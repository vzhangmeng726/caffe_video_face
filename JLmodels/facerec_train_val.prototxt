
name: "facerec"
layer {
  name: "data"
  type: "TripletData"
  top: "data"
  top: "label"
  triplet_data_param {

    train_sub_param {
      subjects_per_iter: 90
      samples_per_subject: 10

      o3_subjects_per_iter: 100
      o3_samples_per_subject: 1

      
        source: "/home/jiliang/data/facerec/annotations/landmarks_200w+30w.train"
        imgs_folder: "/home/jiliang/data/facerec/images"
        key_points_count: 5
      
    }

test_sub_param {
      subjects_per_iter: 20
      samples_per_subject: 10

      o3_subjects_per_iter: 100
      o3_samples_per_subject: 1

      
        source: "dummy"
        imgs_folder: "dummy"
        key_points_count: 5
      
    }

    flip: true

    affine_image_param {
      center_ind: -1

      norm_mode: RECT_LE_RE_LM_RM
      norm_ratio: 0.3

      fill_type: false
      value: 0

      image_info {
        height: 128
        width: 128
        is_color: true
      }
    }
  }
}


### conv1 ###
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 20
    kernel_size: 4
    weight_filler {
      type: "gaussian"
      std: 0.03
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "PReLU"
  bottom: "conv1"
  top: "conv1"
  prelu_param {
    filler {
      type: "gaussian"
      std: 0.03
    }
  }
}

### pool1 ###
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

### conv2 ###
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 40
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.03
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu2"
  type: "PReLU"
  bottom: "conv2"
  top: "conv2"
  prelu_param {
    filler {
      type: "gaussian"
      std: 0.03
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

### conv3 ###
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 60
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.03
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu3"
  type: "PReLU"
  bottom: "conv3"
  top: "conv3"
  prelu_param {
    filler {
      type: "gaussian"
      std: 0.03
    }
  }
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

### conv4 ###
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 80
    kernel_size: 2
    weight_filler {
      type: "gaussian"
      std: 0.03
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu4"
  type: "PReLU"
  bottom: "conv4"
  top: "conv4"
  prelu_param {
    filler {
      type: "gaussian"
      std: 0.03
    }
  }
}


## concat pool3 and conv4
layer {
  name: "flatten_pool3"
  type: "Flatten"
  bottom: "pool3"
  top: "flatten_pool3"
}
layer {
  name: "flatten_conv4"
  type: "Flatten"
  bottom: "conv4"
  top: "flatten_conv4"
}
layer {
  name: "concat_pool3_conv4"
  type: "Concat"
  bottom: "flatten_pool3"
  bottom: "flatten_conv4"
  top: "concat_pool3_conv4"
}

layer {
  name: "fc1"
  type: "InnerProduct"
  bottom: "concat_pool3_conv4"
  top: "fc1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 160
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "l2"
  type: "L2Norm"
  bottom: "fc1"
  top: "l2"
}


layer {
  name: "loss"
  type: "TripletLoss"
  bottom: "l2"
  bottom: "label"
  top: "loss"
  loss_weight: 1.0
  triplet_loss_param{
	margin:0.2
	norm_diff:true
  use_cpu:0
  step:3
  print_time:1
  }
}

#layer{
#name:"power"
##type:"Power"
#bottom:"label"
#top:"plabel"
#}
