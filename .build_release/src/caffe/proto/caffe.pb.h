// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe.proto

#ifndef PROTOBUF_caffe_2eproto__INCLUDED
#define PROTOBUF_caffe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace caffe {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_caffe_2eproto();
void protobuf_AssignDesc_caffe_2eproto();
void protobuf_ShutdownFile_caffe_2eproto();

class BlobShape;
class BlobProto;
class BlobProtoVector;
class Datum;
class FillerParameter;
class NetParameter;
class TestProto;
class TestProtos;
class SolverParameter;
class SolverState;
class NetState;
class NetStateRule;
class ParamSpec;
class LayerParameter;
class GateRecurrent2dParameter;
class LearnCRFParameter;
class TopInfo;
class SegmentDataParameter;
class TripletDataSubParameter;
class TripletDataParameter;
class FacerecImageDataParameter;
class PadParameter;
class ImageInfo;
class AffineImageParameter;
class L2NormParameter;
class TripletLossParameter;
class PairImageDataParameter;
class DenseCRFParameter;
class GateRecurrentParameter;
class GateLstmParameter;
class HardSampleParameter;
class SuperCropParameter;
class MapMetricLossParameter;
class RegionconvolutionParameter;
class BNParameter;
class ElementHingeLossParameter;
class ManipulateLossParameter;
class ResizeParameter;
class TemporalLstmParameter;
class WeakGateLstmParameter;
class SpatialLstmParameter;
class SpatialRecurrentParameter;
class ManipulatelabelParameter;
class ImageDataArbitraryParameter;
class ImageDataTextLabelParameter;
class TransformationParameter;
class LossParameter;
class AccuracyParameter;
class ArgMaxParameter;
class ConcatParameter;
class BatchNormParameter;
class BiasParameter;
class ContrastiveLossParameter;
class ConvolutionParameter;
class CropParameter;
class DataParameter;
class DropoutParameter;
class DummyDataParameter;
class EltwiseParameter;
class ELUParameter;
class EmbedParameter;
class ExpParameter;
class FlattenParameter;
class HDF5DataParameter;
class HDF5OutputParameter;
class HingeLossParameter;
class ImageDataParameter;
class InfogainLossParameter;
class InnerProductParameter;
class InputParameter;
class LogParameter;
class LRNParameter;
class MemoryDataParameter;
class MVNParameter;
class PoolingParameter;
class PowerParameter;
class PythonParameter;
class ReductionParameter;
class ReLUParameter;
class ReshapeParameter;
class ScaleParameter;
class SigmoidParameter;
class SliceParameter;
class SoftmaxParameter;
class TanHParameter;
class TileParameter;
class ThresholdParameter;
class WindowDataParameter;
class SPPParameter;
class V1LayerParameter;
class V0LayerParameter;
class PReLUParameter;
class UpsampleParameter;

enum FillerParameter_VarianceNorm {
  FillerParameter_VarianceNorm_FAN_IN = 0,
  FillerParameter_VarianceNorm_FAN_OUT = 1,
  FillerParameter_VarianceNorm_AVERAGE = 2
};
bool FillerParameter_VarianceNorm_IsValid(int value);
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MIN = FillerParameter_VarianceNorm_FAN_IN;
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MAX = FillerParameter_VarianceNorm_AVERAGE;
const int FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE = FillerParameter_VarianceNorm_VarianceNorm_MAX + 1;

const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor();
inline const ::std::string& FillerParameter_VarianceNorm_Name(FillerParameter_VarianceNorm value) {
  return ::google::protobuf::internal::NameOfEnum(
    FillerParameter_VarianceNorm_descriptor(), value);
}
inline bool FillerParameter_VarianceNorm_Parse(
    const ::std::string& name, FillerParameter_VarianceNorm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FillerParameter_VarianceNorm>(
    FillerParameter_VarianceNorm_descriptor(), name, value);
}
enum TestProto_TestType {
  TestProto_TestType_FACEVER = 0,
  TestProto_TestType_FACERET = 1,
  TestProto_TestType_SEGMENT = 2,
  TestProto_TestType_CLASSIFY = 3
};
bool TestProto_TestType_IsValid(int value);
const TestProto_TestType TestProto_TestType_TestType_MIN = TestProto_TestType_FACEVER;
const TestProto_TestType TestProto_TestType_TestType_MAX = TestProto_TestType_CLASSIFY;
const int TestProto_TestType_TestType_ARRAYSIZE = TestProto_TestType_TestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TestProto_TestType_descriptor();
inline const ::std::string& TestProto_TestType_Name(TestProto_TestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TestProto_TestType_descriptor(), value);
}
inline bool TestProto_TestType_Parse(
    const ::std::string& name, TestProto_TestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TestProto_TestType>(
    TestProto_TestType_descriptor(), name, value);
}
enum SolverParameter_SnapshotFormat {
  SolverParameter_SnapshotFormat_HDF5 = 0,
  SolverParameter_SnapshotFormat_BINARYPROTO = 1
};
bool SolverParameter_SnapshotFormat_IsValid(int value);
const SolverParameter_SnapshotFormat SolverParameter_SnapshotFormat_SnapshotFormat_MIN = SolverParameter_SnapshotFormat_HDF5;
const SolverParameter_SnapshotFormat SolverParameter_SnapshotFormat_SnapshotFormat_MAX = SolverParameter_SnapshotFormat_BINARYPROTO;
const int SolverParameter_SnapshotFormat_SnapshotFormat_ARRAYSIZE = SolverParameter_SnapshotFormat_SnapshotFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SnapshotFormat_descriptor();
inline const ::std::string& SolverParameter_SnapshotFormat_Name(SolverParameter_SnapshotFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SnapshotFormat_descriptor(), value);
}
inline bool SolverParameter_SnapshotFormat_Parse(
    const ::std::string& name, SolverParameter_SnapshotFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SnapshotFormat>(
    SolverParameter_SnapshotFormat_descriptor(), name, value);
}
enum SolverParameter_SolverMode {
  SolverParameter_SolverMode_CPU = 0,
  SolverParameter_SolverMode_GPU = 1
};
bool SolverParameter_SolverMode_IsValid(int value);
const SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MIN = SolverParameter_SolverMode_CPU;
const SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MAX = SolverParameter_SolverMode_GPU;
const int SolverParameter_SolverMode_SolverMode_ARRAYSIZE = SolverParameter_SolverMode_SolverMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor();
inline const ::std::string& SolverParameter_SolverMode_Name(SolverParameter_SolverMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SolverMode_descriptor(), value);
}
inline bool SolverParameter_SolverMode_Parse(
    const ::std::string& name, SolverParameter_SolverMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverMode>(
    SolverParameter_SolverMode_descriptor(), name, value);
}
enum SolverParameter_SolverType {
  SolverParameter_SolverType_SGD = 0,
  SolverParameter_SolverType_NESTEROV = 1,
  SolverParameter_SolverType_ADAGRAD = 2,
  SolverParameter_SolverType_RMSPROP = 3,
  SolverParameter_SolverType_ADADELTA = 4,
  SolverParameter_SolverType_ADAM = 5
};
bool SolverParameter_SolverType_IsValid(int value);
const SolverParameter_SolverType SolverParameter_SolverType_SolverType_MIN = SolverParameter_SolverType_SGD;
const SolverParameter_SolverType SolverParameter_SolverType_SolverType_MAX = SolverParameter_SolverType_ADAM;
const int SolverParameter_SolverType_SolverType_ARRAYSIZE = SolverParameter_SolverType_SolverType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SolverType_descriptor();
inline const ::std::string& SolverParameter_SolverType_Name(SolverParameter_SolverType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SolverType_descriptor(), value);
}
inline bool SolverParameter_SolverType_Parse(
    const ::std::string& name, SolverParameter_SolverType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverType>(
    SolverParameter_SolverType_descriptor(), name, value);
}
enum ParamSpec_DimCheckMode {
  ParamSpec_DimCheckMode_STRICT = 0,
  ParamSpec_DimCheckMode_PERMISSIVE = 1
};
bool ParamSpec_DimCheckMode_IsValid(int value);
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MIN = ParamSpec_DimCheckMode_STRICT;
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MAX = ParamSpec_DimCheckMode_PERMISSIVE;
const int ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE = ParamSpec_DimCheckMode_DimCheckMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor();
inline const ::std::string& ParamSpec_DimCheckMode_Name(ParamSpec_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParamSpec_DimCheckMode_descriptor(), value);
}
inline bool ParamSpec_DimCheckMode_Parse(
    const ::std::string& name, ParamSpec_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParamSpec_DimCheckMode>(
    ParamSpec_DimCheckMode_descriptor(), name, value);
}
enum GateRecurrent2dParameter_Active {
  GateRecurrent2dParameter_Active_LINEAR = 0,
  GateRecurrent2dParameter_Active_SIGMOID = 1,
  GateRecurrent2dParameter_Active_RELU = 2,
  GateRecurrent2dParameter_Active_TANH = 3
};
bool GateRecurrent2dParameter_Active_IsValid(int value);
const GateRecurrent2dParameter_Active GateRecurrent2dParameter_Active_Active_MIN = GateRecurrent2dParameter_Active_LINEAR;
const GateRecurrent2dParameter_Active GateRecurrent2dParameter_Active_Active_MAX = GateRecurrent2dParameter_Active_TANH;
const int GateRecurrent2dParameter_Active_Active_ARRAYSIZE = GateRecurrent2dParameter_Active_Active_MAX + 1;

const ::google::protobuf::EnumDescriptor* GateRecurrent2dParameter_Active_descriptor();
inline const ::std::string& GateRecurrent2dParameter_Active_Name(GateRecurrent2dParameter_Active value) {
  return ::google::protobuf::internal::NameOfEnum(
    GateRecurrent2dParameter_Active_descriptor(), value);
}
inline bool GateRecurrent2dParameter_Active_Parse(
    const ::std::string& name, GateRecurrent2dParameter_Active* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GateRecurrent2dParameter_Active>(
    GateRecurrent2dParameter_Active_descriptor(), name, value);
}
enum TopInfo_SrcType {
  TopInfo_SrcType_IMAGE = 0,
  TopInfo_SrcType_SPARSEPOINT = 1,
  TopInfo_SrcType_NUMBER = 3,
  TopInfo_SrcType_HEATMAP = 4,
  TopInfo_SrcType_DENSEPOINT = 5,
  TopInfo_SrcType_LANE = 6
};
bool TopInfo_SrcType_IsValid(int value);
const TopInfo_SrcType TopInfo_SrcType_SrcType_MIN = TopInfo_SrcType_IMAGE;
const TopInfo_SrcType TopInfo_SrcType_SrcType_MAX = TopInfo_SrcType_LANE;
const int TopInfo_SrcType_SrcType_ARRAYSIZE = TopInfo_SrcType_SrcType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TopInfo_SrcType_descriptor();
inline const ::std::string& TopInfo_SrcType_Name(TopInfo_SrcType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TopInfo_SrcType_descriptor(), value);
}
inline bool TopInfo_SrcType_Parse(
    const ::std::string& name, TopInfo_SrcType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TopInfo_SrcType>(
    TopInfo_SrcType_descriptor(), name, value);
}
enum TopInfo_ResizeType {
  TopInfo_ResizeType_LINEAR = 0,
  TopInfo_ResizeType_NEAREST = 1
};
bool TopInfo_ResizeType_IsValid(int value);
const TopInfo_ResizeType TopInfo_ResizeType_ResizeType_MIN = TopInfo_ResizeType_LINEAR;
const TopInfo_ResizeType TopInfo_ResizeType_ResizeType_MAX = TopInfo_ResizeType_NEAREST;
const int TopInfo_ResizeType_ResizeType_ARRAYSIZE = TopInfo_ResizeType_ResizeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TopInfo_ResizeType_descriptor();
inline const ::std::string& TopInfo_ResizeType_Name(TopInfo_ResizeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TopInfo_ResizeType_descriptor(), value);
}
inline bool TopInfo_ResizeType_Parse(
    const ::std::string& name, TopInfo_ResizeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TopInfo_ResizeType>(
    TopInfo_ResizeType_descriptor(), name, value);
}
enum FacerecImageDataParameter_DataType {
  FacerecImageDataParameter_DataType_SINGLEPATCH = 0,
  FacerecImageDataParameter_DataType_MULTIPATCH = 1
};
bool FacerecImageDataParameter_DataType_IsValid(int value);
const FacerecImageDataParameter_DataType FacerecImageDataParameter_DataType_DataType_MIN = FacerecImageDataParameter_DataType_SINGLEPATCH;
const FacerecImageDataParameter_DataType FacerecImageDataParameter_DataType_DataType_MAX = FacerecImageDataParameter_DataType_MULTIPATCH;
const int FacerecImageDataParameter_DataType_DataType_ARRAYSIZE = FacerecImageDataParameter_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FacerecImageDataParameter_DataType_descriptor();
inline const ::std::string& FacerecImageDataParameter_DataType_Name(FacerecImageDataParameter_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FacerecImageDataParameter_DataType_descriptor(), value);
}
inline bool FacerecImageDataParameter_DataType_Parse(
    const ::std::string& name, FacerecImageDataParameter_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FacerecImageDataParameter_DataType>(
    FacerecImageDataParameter_DataType_descriptor(), name, value);
}
enum PairImageDataParameter_DataType {
  PairImageDataParameter_DataType_SINGLEPATCH = 0,
  PairImageDataParameter_DataType_MULTIPATCH = 1
};
bool PairImageDataParameter_DataType_IsValid(int value);
const PairImageDataParameter_DataType PairImageDataParameter_DataType_DataType_MIN = PairImageDataParameter_DataType_SINGLEPATCH;
const PairImageDataParameter_DataType PairImageDataParameter_DataType_DataType_MAX = PairImageDataParameter_DataType_MULTIPATCH;
const int PairImageDataParameter_DataType_DataType_ARRAYSIZE = PairImageDataParameter_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PairImageDataParameter_DataType_descriptor();
inline const ::std::string& PairImageDataParameter_DataType_Name(PairImageDataParameter_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PairImageDataParameter_DataType_descriptor(), value);
}
inline bool PairImageDataParameter_DataType_Parse(
    const ::std::string& name, PairImageDataParameter_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PairImageDataParameter_DataType>(
    PairImageDataParameter_DataType_descriptor(), name, value);
}
enum GateRecurrentParameter_Active {
  GateRecurrentParameter_Active_LINEAR = 0,
  GateRecurrentParameter_Active_SIGMOID = 1,
  GateRecurrentParameter_Active_RELU = 2,
  GateRecurrentParameter_Active_TANH = 3
};
bool GateRecurrentParameter_Active_IsValid(int value);
const GateRecurrentParameter_Active GateRecurrentParameter_Active_Active_MIN = GateRecurrentParameter_Active_LINEAR;
const GateRecurrentParameter_Active GateRecurrentParameter_Active_Active_MAX = GateRecurrentParameter_Active_TANH;
const int GateRecurrentParameter_Active_Active_ARRAYSIZE = GateRecurrentParameter_Active_Active_MAX + 1;

const ::google::protobuf::EnumDescriptor* GateRecurrentParameter_Active_descriptor();
inline const ::std::string& GateRecurrentParameter_Active_Name(GateRecurrentParameter_Active value) {
  return ::google::protobuf::internal::NameOfEnum(
    GateRecurrentParameter_Active_descriptor(), value);
}
inline bool GateRecurrentParameter_Active_Parse(
    const ::std::string& name, GateRecurrentParameter_Active* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GateRecurrentParameter_Active>(
    GateRecurrentParameter_Active_descriptor(), name, value);
}
enum SuperCropParameter_Type {
  SuperCropParameter_Type_CENTER = 1,
  SuperCropParameter_Type_RANDOM = 2,
  SuperCropParameter_Type_ONEPOINT = 3,
  SuperCropParameter_Type_TWOPOINT = 4
};
bool SuperCropParameter_Type_IsValid(int value);
const SuperCropParameter_Type SuperCropParameter_Type_Type_MIN = SuperCropParameter_Type_CENTER;
const SuperCropParameter_Type SuperCropParameter_Type_Type_MAX = SuperCropParameter_Type_TWOPOINT;
const int SuperCropParameter_Type_Type_ARRAYSIZE = SuperCropParameter_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* SuperCropParameter_Type_descriptor();
inline const ::std::string& SuperCropParameter_Type_Name(SuperCropParameter_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SuperCropParameter_Type_descriptor(), value);
}
inline bool SuperCropParameter_Type_Parse(
    const ::std::string& name, SuperCropParameter_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SuperCropParameter_Type>(
    SuperCropParameter_Type_descriptor(), name, value);
}
enum MapMetricLossParameter_LossType {
  MapMetricLossParameter_LossType_contrastive = 1,
  MapMetricLossParameter_LossType_weakcontrastive = 2
};
bool MapMetricLossParameter_LossType_IsValid(int value);
const MapMetricLossParameter_LossType MapMetricLossParameter_LossType_LossType_MIN = MapMetricLossParameter_LossType_contrastive;
const MapMetricLossParameter_LossType MapMetricLossParameter_LossType_LossType_MAX = MapMetricLossParameter_LossType_weakcontrastive;
const int MapMetricLossParameter_LossType_LossType_ARRAYSIZE = MapMetricLossParameter_LossType_LossType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MapMetricLossParameter_LossType_descriptor();
inline const ::std::string& MapMetricLossParameter_LossType_Name(MapMetricLossParameter_LossType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MapMetricLossParameter_LossType_descriptor(), value);
}
inline bool MapMetricLossParameter_LossType_Parse(
    const ::std::string& name, MapMetricLossParameter_LossType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MapMetricLossParameter_LossType>(
    MapMetricLossParameter_LossType_descriptor(), name, value);
}
enum ElementHingeLossParameter_Norm {
  ElementHingeLossParameter_Norm_L1 = 1,
  ElementHingeLossParameter_Norm_L2 = 2
};
bool ElementHingeLossParameter_Norm_IsValid(int value);
const ElementHingeLossParameter_Norm ElementHingeLossParameter_Norm_Norm_MIN = ElementHingeLossParameter_Norm_L1;
const ElementHingeLossParameter_Norm ElementHingeLossParameter_Norm_Norm_MAX = ElementHingeLossParameter_Norm_L2;
const int ElementHingeLossParameter_Norm_Norm_ARRAYSIZE = ElementHingeLossParameter_Norm_Norm_MAX + 1;

const ::google::protobuf::EnumDescriptor* ElementHingeLossParameter_Norm_descriptor();
inline const ::std::string& ElementHingeLossParameter_Norm_Name(ElementHingeLossParameter_Norm value) {
  return ::google::protobuf::internal::NameOfEnum(
    ElementHingeLossParameter_Norm_descriptor(), value);
}
inline bool ElementHingeLossParameter_Norm_Parse(
    const ::std::string& name, ElementHingeLossParameter_Norm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ElementHingeLossParameter_Norm>(
    ElementHingeLossParameter_Norm_descriptor(), name, value);
}
enum ResizeParameter_Type {
  ResizeParameter_Type_NEAREST = 1,
  ResizeParameter_Type_BILINEAR = 2
};
bool ResizeParameter_Type_IsValid(int value);
const ResizeParameter_Type ResizeParameter_Type_Type_MIN = ResizeParameter_Type_NEAREST;
const ResizeParameter_Type ResizeParameter_Type_Type_MAX = ResizeParameter_Type_BILINEAR;
const int ResizeParameter_Type_Type_ARRAYSIZE = ResizeParameter_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResizeParameter_Type_descriptor();
inline const ::std::string& ResizeParameter_Type_Name(ResizeParameter_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResizeParameter_Type_descriptor(), value);
}
inline bool ResizeParameter_Type_Parse(
    const ::std::string& name, ResizeParameter_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResizeParameter_Type>(
    ResizeParameter_Type_descriptor(), name, value);
}
enum SpatialRecurrentParameter_Active {
  SpatialRecurrentParameter_Active_LINEAR = 0,
  SpatialRecurrentParameter_Active_SIGMOID = 1,
  SpatialRecurrentParameter_Active_RELU = 2,
  SpatialRecurrentParameter_Active_TANH = 3
};
bool SpatialRecurrentParameter_Active_IsValid(int value);
const SpatialRecurrentParameter_Active SpatialRecurrentParameter_Active_Active_MIN = SpatialRecurrentParameter_Active_LINEAR;
const SpatialRecurrentParameter_Active SpatialRecurrentParameter_Active_Active_MAX = SpatialRecurrentParameter_Active_TANH;
const int SpatialRecurrentParameter_Active_Active_ARRAYSIZE = SpatialRecurrentParameter_Active_Active_MAX + 1;

const ::google::protobuf::EnumDescriptor* SpatialRecurrentParameter_Active_descriptor();
inline const ::std::string& SpatialRecurrentParameter_Active_Name(SpatialRecurrentParameter_Active value) {
  return ::google::protobuf::internal::NameOfEnum(
    SpatialRecurrentParameter_Active_descriptor(), value);
}
inline bool SpatialRecurrentParameter_Active_Parse(
    const ::std::string& name, SpatialRecurrentParameter_Active* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SpatialRecurrentParameter_Active>(
    SpatialRecurrentParameter_Active_descriptor(), name, value);
}
enum ManipulatelabelParameter_Type {
  ManipulatelabelParameter_Type_EDGE = 0,
  ManipulatelabelParameter_Type_EXPAND = 1,
  ManipulatelabelParameter_Type_DUPLICATE = 2,
  ManipulatelabelParameter_Type_ANYONE = 3
};
bool ManipulatelabelParameter_Type_IsValid(int value);
const ManipulatelabelParameter_Type ManipulatelabelParameter_Type_Type_MIN = ManipulatelabelParameter_Type_EDGE;
const ManipulatelabelParameter_Type ManipulatelabelParameter_Type_Type_MAX = ManipulatelabelParameter_Type_ANYONE;
const int ManipulatelabelParameter_Type_Type_ARRAYSIZE = ManipulatelabelParameter_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ManipulatelabelParameter_Type_descriptor();
inline const ::std::string& ManipulatelabelParameter_Type_Name(ManipulatelabelParameter_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ManipulatelabelParameter_Type_descriptor(), value);
}
inline bool ManipulatelabelParameter_Type_Parse(
    const ::std::string& name, ManipulatelabelParameter_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ManipulatelabelParameter_Type>(
    ManipulatelabelParameter_Type_descriptor(), name, value);
}
enum ImageDataTextLabelParameter_TextLabelType {
  ImageDataTextLabelParameter_TextLabelType_NONE = 0,
  ImageDataTextLabelParameter_TextLabelType_PERPIXEL = 1,
  ImageDataTextLabelParameter_TextLabelType_PERPIXEL_SPARSE = 2,
  ImageDataTextLabelParameter_TextLabelType_WHOLE = 3,
  ImageDataTextLabelParameter_TextLabelType_PERPIXEL_HEATMAP = 4,
  ImageDataTextLabelParameter_TextLabelType_MAT = 5,
  ImageDataTextLabelParameter_TextLabelType_TXT = 6
};
bool ImageDataTextLabelParameter_TextLabelType_IsValid(int value);
const ImageDataTextLabelParameter_TextLabelType ImageDataTextLabelParameter_TextLabelType_TextLabelType_MIN = ImageDataTextLabelParameter_TextLabelType_NONE;
const ImageDataTextLabelParameter_TextLabelType ImageDataTextLabelParameter_TextLabelType_TextLabelType_MAX = ImageDataTextLabelParameter_TextLabelType_TXT;
const int ImageDataTextLabelParameter_TextLabelType_TextLabelType_ARRAYSIZE = ImageDataTextLabelParameter_TextLabelType_TextLabelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageDataTextLabelParameter_TextLabelType_descriptor();
inline const ::std::string& ImageDataTextLabelParameter_TextLabelType_Name(ImageDataTextLabelParameter_TextLabelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageDataTextLabelParameter_TextLabelType_descriptor(), value);
}
inline bool ImageDataTextLabelParameter_TextLabelType_Parse(
    const ::std::string& name, ImageDataTextLabelParameter_TextLabelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageDataTextLabelParameter_TextLabelType>(
    ImageDataTextLabelParameter_TextLabelType_descriptor(), name, value);
}
enum LossParameter_NormalizationMode {
  LossParameter_NormalizationMode_FULL = 0,
  LossParameter_NormalizationMode_VALID = 1,
  LossParameter_NormalizationMode_BATCH_SIZE = 2,
  LossParameter_NormalizationMode_NONE = 3
};
bool LossParameter_NormalizationMode_IsValid(int value);
const LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MIN = LossParameter_NormalizationMode_FULL;
const LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MAX = LossParameter_NormalizationMode_NONE;
const int LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE = LossParameter_NormalizationMode_NormalizationMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* LossParameter_NormalizationMode_descriptor();
inline const ::std::string& LossParameter_NormalizationMode_Name(LossParameter_NormalizationMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    LossParameter_NormalizationMode_descriptor(), value);
}
inline bool LossParameter_NormalizationMode_Parse(
    const ::std::string& name, LossParameter_NormalizationMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LossParameter_NormalizationMode>(
    LossParameter_NormalizationMode_descriptor(), name, value);
}
enum ConvolutionParameter_Engine {
  ConvolutionParameter_Engine_DEFAULT = 0,
  ConvolutionParameter_Engine_CAFFE = 1,
  ConvolutionParameter_Engine_CUDNN = 2
};
bool ConvolutionParameter_Engine_IsValid(int value);
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MIN = ConvolutionParameter_Engine_DEFAULT;
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MAX = ConvolutionParameter_Engine_CUDNN;
const int ConvolutionParameter_Engine_Engine_ARRAYSIZE = ConvolutionParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor();
inline const ::std::string& ConvolutionParameter_Engine_Name(ConvolutionParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConvolutionParameter_Engine_descriptor(), value);
}
inline bool ConvolutionParameter_Engine_Parse(
    const ::std::string& name, ConvolutionParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConvolutionParameter_Engine>(
    ConvolutionParameter_Engine_descriptor(), name, value);
}
enum DataParameter_DB {
  DataParameter_DB_LEVELDB = 0,
  DataParameter_DB_LMDB = 1
};
bool DataParameter_DB_IsValid(int value);
const DataParameter_DB DataParameter_DB_DB_MIN = DataParameter_DB_LEVELDB;
const DataParameter_DB DataParameter_DB_DB_MAX = DataParameter_DB_LMDB;
const int DataParameter_DB_DB_ARRAYSIZE = DataParameter_DB_DB_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataParameter_DB_descriptor();
inline const ::std::string& DataParameter_DB_Name(DataParameter_DB value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataParameter_DB_descriptor(), value);
}
inline bool DataParameter_DB_Parse(
    const ::std::string& name, DataParameter_DB* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataParameter_DB>(
    DataParameter_DB_descriptor(), name, value);
}
enum EltwiseParameter_EltwiseOp {
  EltwiseParameter_EltwiseOp_PROD = 0,
  EltwiseParameter_EltwiseOp_SUM = 1,
  EltwiseParameter_EltwiseOp_MAX = 2
};
bool EltwiseParameter_EltwiseOp_IsValid(int value);
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MIN = EltwiseParameter_EltwiseOp_PROD;
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MAX = EltwiseParameter_EltwiseOp_MAX;
const int EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE = EltwiseParameter_EltwiseOp_EltwiseOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor();
inline const ::std::string& EltwiseParameter_EltwiseOp_Name(EltwiseParameter_EltwiseOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    EltwiseParameter_EltwiseOp_descriptor(), value);
}
inline bool EltwiseParameter_EltwiseOp_Parse(
    const ::std::string& name, EltwiseParameter_EltwiseOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EltwiseParameter_EltwiseOp>(
    EltwiseParameter_EltwiseOp_descriptor(), name, value);
}
enum HingeLossParameter_Norm {
  HingeLossParameter_Norm_L1 = 1,
  HingeLossParameter_Norm_L2 = 2
};
bool HingeLossParameter_Norm_IsValid(int value);
const HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MIN = HingeLossParameter_Norm_L1;
const HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MAX = HingeLossParameter_Norm_L2;
const int HingeLossParameter_Norm_Norm_ARRAYSIZE = HingeLossParameter_Norm_Norm_MAX + 1;

const ::google::protobuf::EnumDescriptor* HingeLossParameter_Norm_descriptor();
inline const ::std::string& HingeLossParameter_Norm_Name(HingeLossParameter_Norm value) {
  return ::google::protobuf::internal::NameOfEnum(
    HingeLossParameter_Norm_descriptor(), value);
}
inline bool HingeLossParameter_Norm_Parse(
    const ::std::string& name, HingeLossParameter_Norm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HingeLossParameter_Norm>(
    HingeLossParameter_Norm_descriptor(), name, value);
}
enum LRNParameter_NormRegion {
  LRNParameter_NormRegion_ACROSS_CHANNELS = 0,
  LRNParameter_NormRegion_WITHIN_CHANNEL = 1
};
bool LRNParameter_NormRegion_IsValid(int value);
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MIN = LRNParameter_NormRegion_ACROSS_CHANNELS;
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MAX = LRNParameter_NormRegion_WITHIN_CHANNEL;
const int LRNParameter_NormRegion_NormRegion_ARRAYSIZE = LRNParameter_NormRegion_NormRegion_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor();
inline const ::std::string& LRNParameter_NormRegion_Name(LRNParameter_NormRegion value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNParameter_NormRegion_descriptor(), value);
}
inline bool LRNParameter_NormRegion_Parse(
    const ::std::string& name, LRNParameter_NormRegion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_NormRegion>(
    LRNParameter_NormRegion_descriptor(), name, value);
}
enum LRNParameter_Engine {
  LRNParameter_Engine_DEFAULT = 0,
  LRNParameter_Engine_CAFFE = 1,
  LRNParameter_Engine_CUDNN = 2
};
bool LRNParameter_Engine_IsValid(int value);
const LRNParameter_Engine LRNParameter_Engine_Engine_MIN = LRNParameter_Engine_DEFAULT;
const LRNParameter_Engine LRNParameter_Engine_Engine_MAX = LRNParameter_Engine_CUDNN;
const int LRNParameter_Engine_Engine_ARRAYSIZE = LRNParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNParameter_Engine_descriptor();
inline const ::std::string& LRNParameter_Engine_Name(LRNParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNParameter_Engine_descriptor(), value);
}
inline bool LRNParameter_Engine_Parse(
    const ::std::string& name, LRNParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_Engine>(
    LRNParameter_Engine_descriptor(), name, value);
}
enum PoolingParameter_PoolMethod {
  PoolingParameter_PoolMethod_MAX = 0,
  PoolingParameter_PoolMethod_AVE = 1,
  PoolingParameter_PoolMethod_STOCHASTIC = 2
};
bool PoolingParameter_PoolMethod_IsValid(int value);
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MIN = PoolingParameter_PoolMethod_MAX;
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MAX = PoolingParameter_PoolMethod_STOCHASTIC;
const int PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE = PoolingParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor();
inline const ::std::string& PoolingParameter_PoolMethod_Name(PoolingParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_PoolMethod_descriptor(), value);
}
inline bool PoolingParameter_PoolMethod_Parse(
    const ::std::string& name, PoolingParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_PoolMethod>(
    PoolingParameter_PoolMethod_descriptor(), name, value);
}
enum PoolingParameter_Engine {
  PoolingParameter_Engine_DEFAULT = 0,
  PoolingParameter_Engine_CAFFE = 1,
  PoolingParameter_Engine_CUDNN = 2
};
bool PoolingParameter_Engine_IsValid(int value);
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MIN = PoolingParameter_Engine_DEFAULT;
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MAX = PoolingParameter_Engine_CUDNN;
const int PoolingParameter_Engine_Engine_ARRAYSIZE = PoolingParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor();
inline const ::std::string& PoolingParameter_Engine_Name(PoolingParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_Engine_descriptor(), value);
}
inline bool PoolingParameter_Engine_Parse(
    const ::std::string& name, PoolingParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_Engine>(
    PoolingParameter_Engine_descriptor(), name, value);
}
enum ReductionParameter_ReductionOp {
  ReductionParameter_ReductionOp_SUM = 1,
  ReductionParameter_ReductionOp_ASUM = 2,
  ReductionParameter_ReductionOp_SUMSQ = 3,
  ReductionParameter_ReductionOp_MEAN = 4
};
bool ReductionParameter_ReductionOp_IsValid(int value);
const ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MIN = ReductionParameter_ReductionOp_SUM;
const ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MAX = ReductionParameter_ReductionOp_MEAN;
const int ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE = ReductionParameter_ReductionOp_ReductionOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReductionParameter_ReductionOp_descriptor();
inline const ::std::string& ReductionParameter_ReductionOp_Name(ReductionParameter_ReductionOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReductionParameter_ReductionOp_descriptor(), value);
}
inline bool ReductionParameter_ReductionOp_Parse(
    const ::std::string& name, ReductionParameter_ReductionOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReductionParameter_ReductionOp>(
    ReductionParameter_ReductionOp_descriptor(), name, value);
}
enum ReLUParameter_Engine {
  ReLUParameter_Engine_DEFAULT = 0,
  ReLUParameter_Engine_CAFFE = 1,
  ReLUParameter_Engine_CUDNN = 2
};
bool ReLUParameter_Engine_IsValid(int value);
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MIN = ReLUParameter_Engine_DEFAULT;
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MAX = ReLUParameter_Engine_CUDNN;
const int ReLUParameter_Engine_Engine_ARRAYSIZE = ReLUParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor();
inline const ::std::string& ReLUParameter_Engine_Name(ReLUParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReLUParameter_Engine_descriptor(), value);
}
inline bool ReLUParameter_Engine_Parse(
    const ::std::string& name, ReLUParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReLUParameter_Engine>(
    ReLUParameter_Engine_descriptor(), name, value);
}
enum SigmoidParameter_Engine {
  SigmoidParameter_Engine_DEFAULT = 0,
  SigmoidParameter_Engine_CAFFE = 1,
  SigmoidParameter_Engine_CUDNN = 2
};
bool SigmoidParameter_Engine_IsValid(int value);
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MIN = SigmoidParameter_Engine_DEFAULT;
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MAX = SigmoidParameter_Engine_CUDNN;
const int SigmoidParameter_Engine_Engine_ARRAYSIZE = SigmoidParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SigmoidParameter_Engine_descriptor();
inline const ::std::string& SigmoidParameter_Engine_Name(SigmoidParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SigmoidParameter_Engine_descriptor(), value);
}
inline bool SigmoidParameter_Engine_Parse(
    const ::std::string& name, SigmoidParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SigmoidParameter_Engine>(
    SigmoidParameter_Engine_descriptor(), name, value);
}
enum SoftmaxParameter_Engine {
  SoftmaxParameter_Engine_DEFAULT = 0,
  SoftmaxParameter_Engine_CAFFE = 1,
  SoftmaxParameter_Engine_CUDNN = 2
};
bool SoftmaxParameter_Engine_IsValid(int value);
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MIN = SoftmaxParameter_Engine_DEFAULT;
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MAX = SoftmaxParameter_Engine_CUDNN;
const int SoftmaxParameter_Engine_Engine_ARRAYSIZE = SoftmaxParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoftmaxParameter_Engine_descriptor();
inline const ::std::string& SoftmaxParameter_Engine_Name(SoftmaxParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoftmaxParameter_Engine_descriptor(), value);
}
inline bool SoftmaxParameter_Engine_Parse(
    const ::std::string& name, SoftmaxParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftmaxParameter_Engine>(
    SoftmaxParameter_Engine_descriptor(), name, value);
}
enum TanHParameter_Engine {
  TanHParameter_Engine_DEFAULT = 0,
  TanHParameter_Engine_CAFFE = 1,
  TanHParameter_Engine_CUDNN = 2
};
bool TanHParameter_Engine_IsValid(int value);
const TanHParameter_Engine TanHParameter_Engine_Engine_MIN = TanHParameter_Engine_DEFAULT;
const TanHParameter_Engine TanHParameter_Engine_Engine_MAX = TanHParameter_Engine_CUDNN;
const int TanHParameter_Engine_Engine_ARRAYSIZE = TanHParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* TanHParameter_Engine_descriptor();
inline const ::std::string& TanHParameter_Engine_Name(TanHParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    TanHParameter_Engine_descriptor(), value);
}
inline bool TanHParameter_Engine_Parse(
    const ::std::string& name, TanHParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TanHParameter_Engine>(
    TanHParameter_Engine_descriptor(), name, value);
}
enum SPPParameter_PoolMethod {
  SPPParameter_PoolMethod_MAX = 0,
  SPPParameter_PoolMethod_AVE = 1,
  SPPParameter_PoolMethod_STOCHASTIC = 2
};
bool SPPParameter_PoolMethod_IsValid(int value);
const SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MIN = SPPParameter_PoolMethod_MAX;
const SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MAX = SPPParameter_PoolMethod_STOCHASTIC;
const int SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE = SPPParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* SPPParameter_PoolMethod_descriptor();
inline const ::std::string& SPPParameter_PoolMethod_Name(SPPParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    SPPParameter_PoolMethod_descriptor(), value);
}
inline bool SPPParameter_PoolMethod_Parse(
    const ::std::string& name, SPPParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPPParameter_PoolMethod>(
    SPPParameter_PoolMethod_descriptor(), name, value);
}
enum SPPParameter_Engine {
  SPPParameter_Engine_DEFAULT = 0,
  SPPParameter_Engine_CAFFE = 1,
  SPPParameter_Engine_CUDNN = 2
};
bool SPPParameter_Engine_IsValid(int value);
const SPPParameter_Engine SPPParameter_Engine_Engine_MIN = SPPParameter_Engine_DEFAULT;
const SPPParameter_Engine SPPParameter_Engine_Engine_MAX = SPPParameter_Engine_CUDNN;
const int SPPParameter_Engine_Engine_ARRAYSIZE = SPPParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SPPParameter_Engine_descriptor();
inline const ::std::string& SPPParameter_Engine_Name(SPPParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SPPParameter_Engine_descriptor(), value);
}
inline bool SPPParameter_Engine_Parse(
    const ::std::string& name, SPPParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPPParameter_Engine>(
    SPPParameter_Engine_descriptor(), name, value);
}
enum V1LayerParameter_LayerType {
  V1LayerParameter_LayerType_NONE = 0,
  V1LayerParameter_LayerType_ABSVAL = 35,
  V1LayerParameter_LayerType_ACCURACY = 1,
  V1LayerParameter_LayerType_ARGMAX = 30,
  V1LayerParameter_LayerType_BNLL = 2,
  V1LayerParameter_LayerType_CONCAT = 3,
  V1LayerParameter_LayerType_CONTRASTIVE_LOSS = 37,
  V1LayerParameter_LayerType_CONVOLUTION = 4,
  V1LayerParameter_LayerType_DATA = 5,
  V1LayerParameter_LayerType_DECONVOLUTION = 39,
  V1LayerParameter_LayerType_DROPOUT = 6,
  V1LayerParameter_LayerType_DUMMY_DATA = 32,
  V1LayerParameter_LayerType_EUCLIDEAN_LOSS = 7,
  V1LayerParameter_LayerType_ELTWISE = 25,
  V1LayerParameter_LayerType_EXP = 38,
  V1LayerParameter_LayerType_FLATTEN = 8,
  V1LayerParameter_LayerType_HDF5_DATA = 9,
  V1LayerParameter_LayerType_HDF5_OUTPUT = 10,
  V1LayerParameter_LayerType_HINGE_LOSS = 28,
  V1LayerParameter_LayerType_IM2COL = 11,
  V1LayerParameter_LayerType_IMAGE_DATA = 12,
  V1LayerParameter_LayerType_INFOGAIN_LOSS = 13,
  V1LayerParameter_LayerType_INNER_PRODUCT = 14,
  V1LayerParameter_LayerType_LRN = 15,
  V1LayerParameter_LayerType_MEMORY_DATA = 29,
  V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS = 16,
  V1LayerParameter_LayerType_MVN = 34,
  V1LayerParameter_LayerType_POOLING = 17,
  V1LayerParameter_LayerType_POWER = 26,
  V1LayerParameter_LayerType_RELU = 18,
  V1LayerParameter_LayerType_SIGMOID = 19,
  V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS = 27,
  V1LayerParameter_LayerType_SILENCE = 36,
  V1LayerParameter_LayerType_SOFTMAX = 20,
  V1LayerParameter_LayerType_SOFTMAX_LOSS = 21,
  V1LayerParameter_LayerType_SPLIT = 22,
  V1LayerParameter_LayerType_SLICE = 33,
  V1LayerParameter_LayerType_TANH = 23,
  V1LayerParameter_LayerType_WINDOW_DATA = 24,
  V1LayerParameter_LayerType_THRESHOLD = 31
};
bool V1LayerParameter_LayerType_IsValid(int value);
const V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MIN = V1LayerParameter_LayerType_NONE;
const V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MAX = V1LayerParameter_LayerType_DECONVOLUTION;
const int V1LayerParameter_LayerType_LayerType_ARRAYSIZE = V1LayerParameter_LayerType_LayerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* V1LayerParameter_LayerType_descriptor();
inline const ::std::string& V1LayerParameter_LayerType_Name(V1LayerParameter_LayerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    V1LayerParameter_LayerType_descriptor(), value);
}
inline bool V1LayerParameter_LayerType_Parse(
    const ::std::string& name, V1LayerParameter_LayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V1LayerParameter_LayerType>(
    V1LayerParameter_LayerType_descriptor(), name, value);
}
enum V1LayerParameter_DimCheckMode {
  V1LayerParameter_DimCheckMode_STRICT = 0,
  V1LayerParameter_DimCheckMode_PERMISSIVE = 1
};
bool V1LayerParameter_DimCheckMode_IsValid(int value);
const V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MIN = V1LayerParameter_DimCheckMode_STRICT;
const V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MAX = V1LayerParameter_DimCheckMode_PERMISSIVE;
const int V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE = V1LayerParameter_DimCheckMode_DimCheckMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor();
inline const ::std::string& V1LayerParameter_DimCheckMode_Name(V1LayerParameter_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    V1LayerParameter_DimCheckMode_descriptor(), value);
}
inline bool V1LayerParameter_DimCheckMode_Parse(
    const ::std::string& name, V1LayerParameter_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V1LayerParameter_DimCheckMode>(
    V1LayerParameter_DimCheckMode_descriptor(), name, value);
}
enum V0LayerParameter_PoolMethod {
  V0LayerParameter_PoolMethod_MAX = 0,
  V0LayerParameter_PoolMethod_AVE = 1,
  V0LayerParameter_PoolMethod_STOCHASTIC = 2
};
bool V0LayerParameter_PoolMethod_IsValid(int value);
const V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MIN = V0LayerParameter_PoolMethod_MAX;
const V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MAX = V0LayerParameter_PoolMethod_STOCHASTIC;
const int V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE = V0LayerParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor();
inline const ::std::string& V0LayerParameter_PoolMethod_Name(V0LayerParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    V0LayerParameter_PoolMethod_descriptor(), value);
}
inline bool V0LayerParameter_PoolMethod_Parse(
    const ::std::string& name, V0LayerParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V0LayerParameter_PoolMethod>(
    V0LayerParameter_PoolMethod_descriptor(), name, value);
}
enum Phase {
  TRAIN = 0,
  TEST = 1
};
bool Phase_IsValid(int value);
const Phase Phase_MIN = TRAIN;
const Phase Phase_MAX = TEST;
const int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phase_descriptor();
inline const ::std::string& Phase_Name(Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phase_descriptor(), value);
}
inline bool Phase_Parse(
    const ::std::string& name, Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
enum AffineImage_Norm_Mode {
  AVE_LE2LM_RE2RM = 0,
  RECT_LE_RE_LM_RM = 1
};
bool AffineImage_Norm_Mode_IsValid(int value);
const AffineImage_Norm_Mode AffineImage_Norm_Mode_MIN = AVE_LE2LM_RE2RM;
const AffineImage_Norm_Mode AffineImage_Norm_Mode_MAX = RECT_LE_RE_LM_RM;
const int AffineImage_Norm_Mode_ARRAYSIZE = AffineImage_Norm_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* AffineImage_Norm_Mode_descriptor();
inline const ::std::string& AffineImage_Norm_Mode_Name(AffineImage_Norm_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    AffineImage_Norm_Mode_descriptor(), value);
}
inline bool AffineImage_Norm_Mode_Parse(
    const ::std::string& name, AffineImage_Norm_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AffineImage_Norm_Mode>(
    AffineImage_Norm_Mode_descriptor(), name, value);
}
// ===================================================================

class BlobShape : public ::google::protobuf::Message {
 public:
  BlobShape();
  virtual ~BlobShape();

  BlobShape(const BlobShape& from);

  inline BlobShape& operator=(const BlobShape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobShape& default_instance();

  void Swap(BlobShape* other);

  // implements Message ----------------------------------------------

  BlobShape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobShape& from);
  void MergeFrom(const BlobShape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dim = 1 [packed = true];
  inline int dim_size() const;
  inline void clear_dim();
  static const int kDimFieldNumber = 1;
  inline ::google::protobuf::int64 dim(int index) const;
  inline void set_dim(int index, ::google::protobuf::int64 value);
  inline void add_dim(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:caffe.BlobShape)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dim_;
  mutable int _dim_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static BlobShape* default_instance_;
};
// -------------------------------------------------------------------

class BlobProto : public ::google::protobuf::Message {
 public:
  BlobProto();
  virtual ~BlobProto();

  BlobProto(const BlobProto& from);

  inline BlobProto& operator=(const BlobProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProto& default_instance();

  void Swap(BlobProto* other);

  // implements Message ----------------------------------------------

  BlobProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobProto& from);
  void MergeFrom(const BlobProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.BlobShape shape = 7;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 7;
  inline const ::caffe::BlobShape& shape() const;
  inline ::caffe::BlobShape* mutable_shape();
  inline ::caffe::BlobShape* release_shape();
  inline void set_allocated_shape(::caffe::BlobShape* shape);

  // repeated float data = 5 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6 [packed = true];
  inline int diff_size() const;
  inline void clear_diff();
  static const int kDiffFieldNumber = 6;
  inline float diff(int index) const;
  inline void set_diff(int index, float value);
  inline void add_diff(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      diff() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_diff();

  // repeated double double_data = 8 [packed = true];
  inline int double_data_size() const;
  inline void clear_double_data();
  static const int kDoubleDataFieldNumber = 8;
  inline double double_data(int index) const;
  inline void set_double_data(int index, double value);
  inline void add_double_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_data();

  // repeated double double_diff = 9 [packed = true];
  inline int double_diff_size() const;
  inline void clear_double_diff();
  static const int kDoubleDiffFieldNumber = 9;
  inline double double_diff(int index) const;
  inline void set_double_diff(int index, double value);
  inline void add_double_diff(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_diff() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_diff();

  // optional int32 num = 1 [default = 0];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 channels = 2 [default = 0];
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 2;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 3 [default = 0];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 4 [default = 0];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.BlobProto)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::caffe::BlobShape* shape_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > diff_;
  mutable int _diff_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_data_;
  mutable int _double_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_diff_;
  mutable int _double_diff_cached_byte_size_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static BlobProto* default_instance_;
};
// -------------------------------------------------------------------

class BlobProtoVector : public ::google::protobuf::Message {
 public:
  BlobProtoVector();
  virtual ~BlobProtoVector();

  BlobProtoVector(const BlobProtoVector& from);

  inline BlobProtoVector& operator=(const BlobProtoVector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProtoVector& default_instance();

  void Swap(BlobProtoVector* other);

  // implements Message ----------------------------------------------

  BlobProtoVector* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobProtoVector& from);
  void MergeFrom(const BlobProtoVector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobProto blobs = 1;
  inline int blobs_size() const;
  inline void clear_blobs();
  static const int kBlobsFieldNumber = 1;
  inline const ::caffe::BlobProto& blobs(int index) const;
  inline ::caffe::BlobProto* mutable_blobs(int index);
  inline ::caffe::BlobProto* add_blobs();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();

  // @@protoc_insertion_point(class_scope:caffe.BlobProtoVector)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static BlobProtoVector* default_instance_;
};
// -------------------------------------------------------------------

class Datum : public ::google::protobuf::Message {
 public:
  Datum();
  virtual ~Datum();

  Datum(const Datum& from);

  inline Datum& operator=(const Datum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Datum& default_instance();

  void Swap(Datum* other);

  // implements Message ----------------------------------------------

  Datum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Datum& from);
  void MergeFrom(const Datum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 channels = 1;
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 1;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional int32 label = 5;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 5;
  inline ::google::protobuf::int32 label() const;
  inline void set_label(::google::protobuf::int32 value);

  // repeated float float_data = 6;
  inline int float_data_size() const;
  inline void clear_float_data();
  static const int kFloatDataFieldNumber = 6;
  inline float float_data(int index) const;
  inline void set_float_data(int index, float value);
  inline void add_float_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // optional bool encoded = 7 [default = false];
  inline bool has_encoded() const;
  inline void clear_encoded();
  static const int kEncodedFieldNumber = 7;
  inline bool encoded() const;
  inline void set_encoded(bool value);

  // @@protoc_insertion_point(class_scope:caffe.Datum)
 private:
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_encoded();
  inline void clear_has_encoded();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::std::string* data_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 label_;
  ::google::protobuf::RepeatedField< float > float_data_;
  bool encoded_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static Datum* default_instance_;
};
// -------------------------------------------------------------------

class FillerParameter : public ::google::protobuf::Message {
 public:
  FillerParameter();
  virtual ~FillerParameter();

  FillerParameter(const FillerParameter& from);

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FillerParameter& default_instance();

  void Swap(FillerParameter* other);

  // implements Message ----------------------------------------------

  FillerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FillerParameter& from);
  void MergeFrom(const FillerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FillerParameter_VarianceNorm VarianceNorm;
  static const VarianceNorm FAN_IN = FillerParameter_VarianceNorm_FAN_IN;
  static const VarianceNorm FAN_OUT = FillerParameter_VarianceNorm_FAN_OUT;
  static const VarianceNorm AVERAGE = FillerParameter_VarianceNorm_AVERAGE;
  static inline bool VarianceNorm_IsValid(int value) {
    return FillerParameter_VarianceNorm_IsValid(value);
  }
  static const VarianceNorm VarianceNorm_MIN =
    FillerParameter_VarianceNorm_VarianceNorm_MIN;
  static const VarianceNorm VarianceNorm_MAX =
    FillerParameter_VarianceNorm_VarianceNorm_MAX;
  static const int VarianceNorm_ARRAYSIZE =
    FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VarianceNorm_descriptor() {
    return FillerParameter_VarianceNorm_descriptor();
  }
  static inline const ::std::string& VarianceNorm_Name(VarianceNorm value) {
    return FillerParameter_VarianceNorm_Name(value);
  }
  static inline bool VarianceNorm_Parse(const ::std::string& name,
      VarianceNorm* value) {
    return FillerParameter_VarianceNorm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "constant"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional float value = 2 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline float value() const;
  inline void set_value(float value);

  // optional float min = 3 [default = 0];
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 3;
  inline float min() const;
  inline void set_min(float value);

  // optional float max = 4 [default = 1];
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 4;
  inline float max() const;
  inline void set_max(float value);

  // optional float mean = 5 [default = 0];
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 5;
  inline float mean() const;
  inline void set_mean(float value);

  // optional float std = 6 [default = 1];
  inline bool has_std() const;
  inline void clear_std();
  static const int kStdFieldNumber = 6;
  inline float std() const;
  inline void set_std(float value);

  // optional int32 sparse = 7 [default = -1];
  inline bool has_sparse() const;
  inline void clear_sparse();
  static const int kSparseFieldNumber = 7;
  inline ::google::protobuf::int32 sparse() const;
  inline void set_sparse(::google::protobuf::int32 value);

  // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  inline bool has_variance_norm() const;
  inline void clear_variance_norm();
  static const int kVarianceNormFieldNumber = 8;
  inline ::caffe::FillerParameter_VarianceNorm variance_norm() const;
  inline void set_variance_norm(::caffe::FillerParameter_VarianceNorm value);

  // @@protoc_insertion_point(class_scope:caffe.FillerParameter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_std();
  inline void clear_has_std();
  inline void set_has_sparse();
  inline void clear_has_sparse();
  inline void set_has_variance_norm();
  inline void clear_has_variance_norm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  static ::std::string* _default_type_;
  float value_;
  float min_;
  float max_;
  float mean_;
  float std_;
  ::google::protobuf::int32 sparse_;
  int variance_norm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static FillerParameter* default_instance_;
};
// -------------------------------------------------------------------

class NetParameter : public ::google::protobuf::Message {
 public:
  NetParameter();
  virtual ~NetParameter();

  NetParameter(const NetParameter& from);

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetParameter& default_instance();

  void Swap(NetParameter* other);

  // implements Message ----------------------------------------------

  NetParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetParameter& from);
  void MergeFrom(const NetParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string input = 3;
  inline int input_size() const;
  inline void clear_input();
  static const int kInputFieldNumber = 3;
  inline const ::std::string& input(int index) const;
  inline ::std::string* mutable_input(int index);
  inline void set_input(int index, const ::std::string& value);
  inline void set_input(int index, const char* value);
  inline void set_input(int index, const char* value, size_t size);
  inline ::std::string* add_input();
  inline void add_input(const ::std::string& value);
  inline void add_input(const char* value);
  inline void add_input(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated .caffe.BlobShape input_shape = 8;
  inline int input_shape_size() const;
  inline void clear_input_shape();
  static const int kInputShapeFieldNumber = 8;
  inline const ::caffe::BlobShape& input_shape(int index) const;
  inline ::caffe::BlobShape* mutable_input_shape(int index);
  inline ::caffe::BlobShape* add_input_shape();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      input_shape() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_input_shape();

  // repeated int32 input_dim = 4;
  inline int input_dim_size() const;
  inline void clear_input_dim();
  static const int kInputDimFieldNumber = 4;
  inline ::google::protobuf::int32 input_dim(int index) const;
  inline void set_input_dim(int index, ::google::protobuf::int32 value);
  inline void add_input_dim(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dim();

  // optional bool force_backward = 5 [default = false];
  inline bool has_force_backward() const;
  inline void clear_force_backward();
  static const int kForceBackwardFieldNumber = 5;
  inline bool force_backward() const;
  inline void set_force_backward(bool value);

  // optional .caffe.NetState state = 6;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline const ::caffe::NetState& state() const;
  inline ::caffe::NetState* mutable_state();
  inline ::caffe::NetState* release_state();
  inline void set_allocated_state(::caffe::NetState* state);

  // optional bool debug_info = 7 [default = false];
  inline bool has_debug_info() const;
  inline void clear_debug_info();
  static const int kDebugInfoFieldNumber = 7;
  inline bool debug_info() const;
  inline void set_debug_info(bool value);

  // repeated .caffe.LayerParameter layer = 100;
  inline int layer_size() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 100;
  inline const ::caffe::LayerParameter& layer(int index) const;
  inline ::caffe::LayerParameter* mutable_layer(int index);
  inline ::caffe::LayerParameter* add_layer();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
      layer() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
      mutable_layer();

  // repeated .caffe.V1LayerParameter layers = 2;
  inline int layers_size() const;
  inline void clear_layers();
  static const int kLayersFieldNumber = 2;
  inline const ::caffe::V1LayerParameter& layers(int index) const;
  inline ::caffe::V1LayerParameter* mutable_layers(int index);
  inline ::caffe::V1LayerParameter* add_layers();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >&
      layers() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >*
      mutable_layers();

  // @@protoc_insertion_point(class_scope:caffe.NetParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_force_backward();
  inline void clear_has_force_backward();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_debug_info();
  inline void clear_has_debug_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > input_shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dim_;
  ::caffe::NetState* state_;
  ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter > layer_;
  ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter > layers_;
  bool force_backward_;
  bool debug_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static NetParameter* default_instance_;
};
// -------------------------------------------------------------------

class TestProto : public ::google::protobuf::Message {
 public:
  TestProto();
  virtual ~TestProto();

  TestProto(const TestProto& from);

  inline TestProto& operator=(const TestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestProto& default_instance();

  void Swap(TestProto* other);

  // implements Message ----------------------------------------------

  TestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestProto& from);
  void MergeFrom(const TestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TestProto_TestType TestType;
  static const TestType FACEVER = TestProto_TestType_FACEVER;
  static const TestType FACERET = TestProto_TestType_FACERET;
  static const TestType SEGMENT = TestProto_TestType_SEGMENT;
  static const TestType CLASSIFY = TestProto_TestType_CLASSIFY;
  static inline bool TestType_IsValid(int value) {
    return TestProto_TestType_IsValid(value);
  }
  static const TestType TestType_MIN =
    TestProto_TestType_TestType_MIN;
  static const TestType TestType_MAX =
    TestProto_TestType_TestType_MAX;
  static const int TestType_ARRAYSIZE =
    TestProto_TestType_TestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TestType_descriptor() {
    return TestProto_TestType_descriptor();
  }
  static inline const ::std::string& TestType_Name(TestType value) {
    return TestProto_TestType_Name(value);
  }
  static inline bool TestType_Parse(const ::std::string& name,
      TestType* value) {
    return TestProto_TestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.TestProto.TestType test_type = 1;
  inline bool has_test_type() const;
  inline void clear_test_type();
  static const int kTestTypeFieldNumber = 1;
  inline ::caffe::TestProto_TestType test_type() const;
  inline void set_test_type(::caffe::TestProto_TestType value);

  // optional string test_file = 2;
  inline bool has_test_file() const;
  inline void clear_test_file();
  static const int kTestFileFieldNumber = 2;
  inline const ::std::string& test_file() const;
  inline void set_test_file(const ::std::string& value);
  inline void set_test_file(const char* value);
  inline void set_test_file(const char* value, size_t size);
  inline ::std::string* mutable_test_file();
  inline ::std::string* release_test_file();
  inline void set_allocated_test_file(::std::string* test_file);

  // optional string map_file = 6;
  inline bool has_map_file() const;
  inline void clear_map_file();
  static const int kMapFileFieldNumber = 6;
  inline const ::std::string& map_file() const;
  inline void set_map_file(const ::std::string& value);
  inline void set_map_file(const char* value);
  inline void set_map_file(const char* value, size_t size);
  inline ::std::string* mutable_map_file();
  inline ::std::string* release_map_file();
  inline void set_allocated_map_file(::std::string* map_file);

  // repeated .caffe.AffineImageParameter affine_image_param = 3;
  inline int affine_image_param_size() const;
  inline void clear_affine_image_param();
  static const int kAffineImageParamFieldNumber = 3;
  inline const ::caffe::AffineImageParameter& affine_image_param(int index) const;
  inline ::caffe::AffineImageParameter* mutable_affine_image_param(int index);
  inline ::caffe::AffineImageParameter* add_affine_image_param();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter >&
      affine_image_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter >*
      mutable_affine_image_param();

  // optional string deploy_net = 4;
  inline bool has_deploy_net() const;
  inline void clear_deploy_net();
  static const int kDeployNetFieldNumber = 4;
  inline const ::std::string& deploy_net() const;
  inline void set_deploy_net(const ::std::string& value);
  inline void set_deploy_net(const char* value);
  inline void set_deploy_net(const char* value, size_t size);
  inline ::std::string* mutable_deploy_net();
  inline ::std::string* release_deploy_net();
  inline void set_allocated_deploy_net(::std::string* deploy_net);

  // optional int32 key_points_count = 5;
  inline bool has_key_points_count() const;
  inline void clear_key_points_count();
  static const int kKeyPointsCountFieldNumber = 5;
  inline ::google::protobuf::int32 key_points_count() const;
  inline void set_key_points_count(::google::protobuf::int32 value);

  // optional string data_folder = 7;
  inline bool has_data_folder() const;
  inline void clear_data_folder();
  static const int kDataFolderFieldNumber = 7;
  inline const ::std::string& data_folder() const;
  inline void set_data_folder(const ::std::string& value);
  inline void set_data_folder(const char* value);
  inline void set_data_folder(const char* value, size_t size);
  inline ::std::string* mutable_data_folder();
  inline ::std::string* release_data_folder();
  inline void set_allocated_data_folder(::std::string* data_folder);

  // optional string output_layername = 8;
  inline bool has_output_layername() const;
  inline void clear_output_layername();
  static const int kOutputLayernameFieldNumber = 8;
  inline const ::std::string& output_layername() const;
  inline void set_output_layername(const ::std::string& value);
  inline void set_output_layername(const char* value);
  inline void set_output_layername(const char* value, size_t size);
  inline ::std::string* mutable_output_layername();
  inline ::std::string* release_output_layername();
  inline void set_allocated_output_layername(::std::string* output_layername);

  // optional float datascale = 9 [default = 1];
  inline bool has_datascale() const;
  inline void clear_datascale();
  static const int kDatascaleFieldNumber = 9;
  inline float datascale() const;
  inline void set_datascale(float value);

  // optional float meanvalue = 10 [default = 0];
  inline bool has_meanvalue() const;
  inline void clear_meanvalue();
  static const int kMeanvalueFieldNumber = 10;
  inline float meanvalue() const;
  inline void set_meanvalue(float value);

  // repeated int32 topn = 11;
  inline int topn_size() const;
  inline void clear_topn();
  static const int kTopnFieldNumber = 11;
  inline ::google::protobuf::int32 topn(int index) const;
  inline void set_topn(int index, ::google::protobuf::int32 value);
  inline void add_topn(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      topn() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_topn();

  // optional string save_feature_filename = 12 [default = ""];
  inline bool has_save_feature_filename() const;
  inline void clear_save_feature_filename();
  static const int kSaveFeatureFilenameFieldNumber = 12;
  inline const ::std::string& save_feature_filename() const;
  inline void set_save_feature_filename(const ::std::string& value);
  inline void set_save_feature_filename(const char* value);
  inline void set_save_feature_filename(const char* value, size_t size);
  inline ::std::string* mutable_save_feature_filename();
  inline ::std::string* release_save_feature_filename();
  inline void set_allocated_save_feature_filename(::std::string* save_feature_filename);

  // optional string source_splitflag = 13 [default = "||"];
  inline bool has_source_splitflag() const;
  inline void clear_source_splitflag();
  static const int kSourceSplitflagFieldNumber = 13;
  inline const ::std::string& source_splitflag() const;
  inline void set_source_splitflag(const ::std::string& value);
  inline void set_source_splitflag(const char* value);
  inline void set_source_splitflag(const char* value, size_t size);
  inline ::std::string* mutable_source_splitflag();
  inline ::std::string* release_source_splitflag();
  inline void set_allocated_source_splitflag(::std::string* source_splitflag);

  // optional int32 data_channels = 14;
  inline bool has_data_channels() const;
  inline void clear_data_channels();
  static const int kDataChannelsFieldNumber = 14;
  inline ::google::protobuf::int32 data_channels() const;
  inline void set_data_channels(::google::protobuf::int32 value);

  // optional int32 width = 15;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 15;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 16;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 16;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 out_height = 17;
  inline bool has_out_height() const;
  inline void clear_out_height();
  static const int kOutHeightFieldNumber = 17;
  inline ::google::protobuf::int32 out_height() const;
  inline void set_out_height(::google::protobuf::int32 value);

  // optional int32 out_width = 18;
  inline bool has_out_width() const;
  inline void clear_out_width();
  static const int kOutWidthFieldNumber = 18;
  inline ::google::protobuf::int32 out_width() const;
  inline void set_out_width(::google::protobuf::int32 value);

  // optional int32 out_channels = 19;
  inline bool has_out_channels() const;
  inline void clear_out_channels();
  static const int kOutChannelsFieldNumber = 19;
  inline ::google::protobuf::int32 out_channels() const;
  inline void set_out_channels(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.TestProto)
 private:
  inline void set_has_test_type();
  inline void clear_has_test_type();
  inline void set_has_test_file();
  inline void clear_has_test_file();
  inline void set_has_map_file();
  inline void clear_has_map_file();
  inline void set_has_deploy_net();
  inline void clear_has_deploy_net();
  inline void set_has_key_points_count();
  inline void clear_has_key_points_count();
  inline void set_has_data_folder();
  inline void clear_has_data_folder();
  inline void set_has_output_layername();
  inline void clear_has_output_layername();
  inline void set_has_datascale();
  inline void clear_has_datascale();
  inline void set_has_meanvalue();
  inline void clear_has_meanvalue();
  inline void set_has_save_feature_filename();
  inline void clear_has_save_feature_filename();
  inline void set_has_source_splitflag();
  inline void clear_has_source_splitflag();
  inline void set_has_data_channels();
  inline void clear_has_data_channels();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_out_height();
  inline void clear_has_out_height();
  inline void set_has_out_width();
  inline void clear_has_out_width();
  inline void set_has_out_channels();
  inline void clear_has_out_channels();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* test_file_;
  ::std::string* map_file_;
  int test_type_;
  ::google::protobuf::int32 key_points_count_;
  ::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter > affine_image_param_;
  ::std::string* deploy_net_;
  ::std::string* data_folder_;
  ::std::string* output_layername_;
  float datascale_;
  float meanvalue_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > topn_;
  ::std::string* save_feature_filename_;
  ::std::string* source_splitflag_;
  static ::std::string* _default_source_splitflag_;
  ::google::protobuf::int32 data_channels_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 out_height_;
  ::google::protobuf::int32 out_width_;
  ::google::protobuf::int32 out_channels_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TestProto* default_instance_;
};
// -------------------------------------------------------------------

class TestProtos : public ::google::protobuf::Message {
 public:
  TestProtos();
  virtual ~TestProtos();

  TestProtos(const TestProtos& from);

  inline TestProtos& operator=(const TestProtos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestProtos& default_instance();

  void Swap(TestProtos* other);

  // implements Message ----------------------------------------------

  TestProtos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestProtos& from);
  void MergeFrom(const TestProtos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.TestProto test_proto = 1;
  inline int test_proto_size() const;
  inline void clear_test_proto();
  static const int kTestProtoFieldNumber = 1;
  inline const ::caffe::TestProto& test_proto(int index) const;
  inline ::caffe::TestProto* mutable_test_proto(int index);
  inline ::caffe::TestProto* add_test_proto();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::TestProto >&
      test_proto() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::TestProto >*
      mutable_test_proto();

  // @@protoc_insertion_point(class_scope:caffe.TestProtos)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::caffe::TestProto > test_proto_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TestProtos* default_instance_;
};
// -------------------------------------------------------------------

class SolverParameter : public ::google::protobuf::Message {
 public:
  SolverParameter();
  virtual ~SolverParameter();

  SolverParameter(const SolverParameter& from);

  inline SolverParameter& operator=(const SolverParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverParameter& default_instance();

  void Swap(SolverParameter* other);

  // implements Message ----------------------------------------------

  SolverParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverParameter& from);
  void MergeFrom(const SolverParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SolverParameter_SnapshotFormat SnapshotFormat;
  static const SnapshotFormat HDF5 = SolverParameter_SnapshotFormat_HDF5;
  static const SnapshotFormat BINARYPROTO = SolverParameter_SnapshotFormat_BINARYPROTO;
  static inline bool SnapshotFormat_IsValid(int value) {
    return SolverParameter_SnapshotFormat_IsValid(value);
  }
  static const SnapshotFormat SnapshotFormat_MIN =
    SolverParameter_SnapshotFormat_SnapshotFormat_MIN;
  static const SnapshotFormat SnapshotFormat_MAX =
    SolverParameter_SnapshotFormat_SnapshotFormat_MAX;
  static const int SnapshotFormat_ARRAYSIZE =
    SolverParameter_SnapshotFormat_SnapshotFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SnapshotFormat_descriptor() {
    return SolverParameter_SnapshotFormat_descriptor();
  }
  static inline const ::std::string& SnapshotFormat_Name(SnapshotFormat value) {
    return SolverParameter_SnapshotFormat_Name(value);
  }
  static inline bool SnapshotFormat_Parse(const ::std::string& name,
      SnapshotFormat* value) {
    return SolverParameter_SnapshotFormat_Parse(name, value);
  }

  typedef SolverParameter_SolverMode SolverMode;
  static const SolverMode CPU = SolverParameter_SolverMode_CPU;
  static const SolverMode GPU = SolverParameter_SolverMode_GPU;
  static inline bool SolverMode_IsValid(int value) {
    return SolverParameter_SolverMode_IsValid(value);
  }
  static const SolverMode SolverMode_MIN =
    SolverParameter_SolverMode_SolverMode_MIN;
  static const SolverMode SolverMode_MAX =
    SolverParameter_SolverMode_SolverMode_MAX;
  static const int SolverMode_ARRAYSIZE =
    SolverParameter_SolverMode_SolverMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverMode_descriptor() {
    return SolverParameter_SolverMode_descriptor();
  }
  static inline const ::std::string& SolverMode_Name(SolverMode value) {
    return SolverParameter_SolverMode_Name(value);
  }
  static inline bool SolverMode_Parse(const ::std::string& name,
      SolverMode* value) {
    return SolverParameter_SolverMode_Parse(name, value);
  }

  typedef SolverParameter_SolverType SolverType;
  static const SolverType SGD = SolverParameter_SolverType_SGD;
  static const SolverType NESTEROV = SolverParameter_SolverType_NESTEROV;
  static const SolverType ADAGRAD = SolverParameter_SolverType_ADAGRAD;
  static const SolverType RMSPROP = SolverParameter_SolverType_RMSPROP;
  static const SolverType ADADELTA = SolverParameter_SolverType_ADADELTA;
  static const SolverType ADAM = SolverParameter_SolverType_ADAM;
  static inline bool SolverType_IsValid(int value) {
    return SolverParameter_SolverType_IsValid(value);
  }
  static const SolverType SolverType_MIN =
    SolverParameter_SolverType_SolverType_MIN;
  static const SolverType SolverType_MAX =
    SolverParameter_SolverType_SolverType_MAX;
  static const int SolverType_ARRAYSIZE =
    SolverParameter_SolverType_SolverType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverType_descriptor() {
    return SolverParameter_SolverType_descriptor();
  }
  static inline const ::std::string& SolverType_Name(SolverType value) {
    return SolverParameter_SolverType_Name(value);
  }
  static inline bool SolverType_Parse(const ::std::string& name,
      SolverType* value) {
    return SolverParameter_SolverType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string net = 24;
  inline bool has_net() const;
  inline void clear_net();
  static const int kNetFieldNumber = 24;
  inline const ::std::string& net() const;
  inline void set_net(const ::std::string& value);
  inline void set_net(const char* value);
  inline void set_net(const char* value, size_t size);
  inline ::std::string* mutable_net();
  inline ::std::string* release_net();
  inline void set_allocated_net(::std::string* net);

  // optional .caffe.NetParameter net_param = 25;
  inline bool has_net_param() const;
  inline void clear_net_param();
  static const int kNetParamFieldNumber = 25;
  inline const ::caffe::NetParameter& net_param() const;
  inline ::caffe::NetParameter* mutable_net_param();
  inline ::caffe::NetParameter* release_net_param();
  inline void set_allocated_net_param(::caffe::NetParameter* net_param);

  // optional string train_net = 1;
  inline bool has_train_net() const;
  inline void clear_train_net();
  static const int kTrainNetFieldNumber = 1;
  inline const ::std::string& train_net() const;
  inline void set_train_net(const ::std::string& value);
  inline void set_train_net(const char* value);
  inline void set_train_net(const char* value, size_t size);
  inline ::std::string* mutable_train_net();
  inline ::std::string* release_train_net();
  inline void set_allocated_train_net(::std::string* train_net);

  // repeated string test_net = 2;
  inline int test_net_size() const;
  inline void clear_test_net();
  static const int kTestNetFieldNumber = 2;
  inline const ::std::string& test_net(int index) const;
  inline ::std::string* mutable_test_net(int index);
  inline void set_test_net(int index, const ::std::string& value);
  inline void set_test_net(int index, const char* value);
  inline void set_test_net(int index, const char* value, size_t size);
  inline ::std::string* add_test_net();
  inline void add_test_net(const ::std::string& value);
  inline void add_test_net(const char* value);
  inline void add_test_net(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& test_net() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_net();

  // optional .caffe.NetParameter train_net_param = 21;
  inline bool has_train_net_param() const;
  inline void clear_train_net_param();
  static const int kTrainNetParamFieldNumber = 21;
  inline const ::caffe::NetParameter& train_net_param() const;
  inline ::caffe::NetParameter* mutable_train_net_param();
  inline ::caffe::NetParameter* release_train_net_param();
  inline void set_allocated_train_net_param(::caffe::NetParameter* train_net_param);

  // repeated .caffe.NetParameter test_net_param = 22;
  inline int test_net_param_size() const;
  inline void clear_test_net_param();
  static const int kTestNetParamFieldNumber = 22;
  inline const ::caffe::NetParameter& test_net_param(int index) const;
  inline ::caffe::NetParameter* mutable_test_net_param(int index);
  inline ::caffe::NetParameter* add_test_net_param();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >&
      test_net_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >*
      mutable_test_net_param();

  // optional .caffe.NetState train_state = 26;
  inline bool has_train_state() const;
  inline void clear_train_state();
  static const int kTrainStateFieldNumber = 26;
  inline const ::caffe::NetState& train_state() const;
  inline ::caffe::NetState* mutable_train_state();
  inline ::caffe::NetState* release_train_state();
  inline void set_allocated_train_state(::caffe::NetState* train_state);

  // repeated .caffe.NetState test_state = 27;
  inline int test_state_size() const;
  inline void clear_test_state();
  static const int kTestStateFieldNumber = 27;
  inline const ::caffe::NetState& test_state(int index) const;
  inline ::caffe::NetState* mutable_test_state(int index);
  inline ::caffe::NetState* add_test_state();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
      test_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
      mutable_test_state();

  // repeated int32 test_iter = 3;
  inline int test_iter_size() const;
  inline void clear_test_iter();
  static const int kTestIterFieldNumber = 3;
  inline ::google::protobuf::int32 test_iter(int index) const;
  inline void set_test_iter(int index, ::google::protobuf::int32 value);
  inline void add_test_iter(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_iter() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_iter();

  // optional int32 test_interval = 4 [default = 0];
  inline bool has_test_interval() const;
  inline void clear_test_interval();
  static const int kTestIntervalFieldNumber = 4;
  inline ::google::protobuf::int32 test_interval() const;
  inline void set_test_interval(::google::protobuf::int32 value);

  // optional bool test_compute_loss = 19 [default = false];
  inline bool has_test_compute_loss() const;
  inline void clear_test_compute_loss();
  static const int kTestComputeLossFieldNumber = 19;
  inline bool test_compute_loss() const;
  inline void set_test_compute_loss(bool value);

  // optional bool test_initialization = 32 [default = true];
  inline bool has_test_initialization() const;
  inline void clear_test_initialization();
  static const int kTestInitializationFieldNumber = 32;
  inline bool test_initialization() const;
  inline void set_test_initialization(bool value);

  // optional float base_lr = 5;
  inline bool has_base_lr() const;
  inline void clear_base_lr();
  static const int kBaseLrFieldNumber = 5;
  inline float base_lr() const;
  inline void set_base_lr(float value);

  // optional int32 display = 6;
  inline bool has_display() const;
  inline void clear_display();
  static const int kDisplayFieldNumber = 6;
  inline ::google::protobuf::int32 display() const;
  inline void set_display(::google::protobuf::int32 value);

  // optional int32 average_loss = 33 [default = 1];
  inline bool has_average_loss() const;
  inline void clear_average_loss();
  static const int kAverageLossFieldNumber = 33;
  inline ::google::protobuf::int32 average_loss() const;
  inline void set_average_loss(::google::protobuf::int32 value);

  // optional int32 max_iter = 7;
  inline bool has_max_iter() const;
  inline void clear_max_iter();
  static const int kMaxIterFieldNumber = 7;
  inline ::google::protobuf::int32 max_iter() const;
  inline void set_max_iter(::google::protobuf::int32 value);

  // optional int32 iter_size = 36 [default = 1];
  inline bool has_iter_size() const;
  inline void clear_iter_size();
  static const int kIterSizeFieldNumber = 36;
  inline ::google::protobuf::int32 iter_size() const;
  inline void set_iter_size(::google::protobuf::int32 value);

  // optional string lr_policy = 8;
  inline bool has_lr_policy() const;
  inline void clear_lr_policy();
  static const int kLrPolicyFieldNumber = 8;
  inline const ::std::string& lr_policy() const;
  inline void set_lr_policy(const ::std::string& value);
  inline void set_lr_policy(const char* value);
  inline void set_lr_policy(const char* value, size_t size);
  inline ::std::string* mutable_lr_policy();
  inline ::std::string* release_lr_policy();
  inline void set_allocated_lr_policy(::std::string* lr_policy);

  // optional float gamma = 9;
  inline bool has_gamma() const;
  inline void clear_gamma();
  static const int kGammaFieldNumber = 9;
  inline float gamma() const;
  inline void set_gamma(float value);

  // optional float power = 10;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 10;
  inline float power() const;
  inline void set_power(float value);

  // optional float momentum = 11;
  inline bool has_momentum() const;
  inline void clear_momentum();
  static const int kMomentumFieldNumber = 11;
  inline float momentum() const;
  inline void set_momentum(float value);

  // optional float weight_decay = 12;
  inline bool has_weight_decay() const;
  inline void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 12;
  inline float weight_decay() const;
  inline void set_weight_decay(float value);

  // optional string regularization_type = 29 [default = "L2"];
  inline bool has_regularization_type() const;
  inline void clear_regularization_type();
  static const int kRegularizationTypeFieldNumber = 29;
  inline const ::std::string& regularization_type() const;
  inline void set_regularization_type(const ::std::string& value);
  inline void set_regularization_type(const char* value);
  inline void set_regularization_type(const char* value, size_t size);
  inline ::std::string* mutable_regularization_type();
  inline ::std::string* release_regularization_type();
  inline void set_allocated_regularization_type(::std::string* regularization_type);

  // optional int32 stepsize = 13;
  inline bool has_stepsize() const;
  inline void clear_stepsize();
  static const int kStepsizeFieldNumber = 13;
  inline ::google::protobuf::int32 stepsize() const;
  inline void set_stepsize(::google::protobuf::int32 value);

  // repeated int32 stepvalue = 34;
  inline int stepvalue_size() const;
  inline void clear_stepvalue();
  static const int kStepvalueFieldNumber = 34;
  inline ::google::protobuf::int32 stepvalue(int index) const;
  inline void set_stepvalue(int index, ::google::protobuf::int32 value);
  inline void add_stepvalue(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stepvalue() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stepvalue();

  // optional float clip_gradients = 35 [default = -1];
  inline bool has_clip_gradients() const;
  inline void clear_clip_gradients();
  static const int kClipGradientsFieldNumber = 35;
  inline float clip_gradients() const;
  inline void set_clip_gradients(float value);

  // optional int32 snapshot = 14 [default = 0];
  inline bool has_snapshot() const;
  inline void clear_snapshot();
  static const int kSnapshotFieldNumber = 14;
  inline ::google::protobuf::int32 snapshot() const;
  inline void set_snapshot(::google::protobuf::int32 value);

  // optional string snapshot_prefix = 15;
  inline bool has_snapshot_prefix() const;
  inline void clear_snapshot_prefix();
  static const int kSnapshotPrefixFieldNumber = 15;
  inline const ::std::string& snapshot_prefix() const;
  inline void set_snapshot_prefix(const ::std::string& value);
  inline void set_snapshot_prefix(const char* value);
  inline void set_snapshot_prefix(const char* value, size_t size);
  inline ::std::string* mutable_snapshot_prefix();
  inline ::std::string* release_snapshot_prefix();
  inline void set_allocated_snapshot_prefix(::std::string* snapshot_prefix);

  // optional bool snapshot_diff = 16 [default = false];
  inline bool has_snapshot_diff() const;
  inline void clear_snapshot_diff();
  static const int kSnapshotDiffFieldNumber = 16;
  inline bool snapshot_diff() const;
  inline void set_snapshot_diff(bool value);

  // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  inline bool has_snapshot_format() const;
  inline void clear_snapshot_format();
  static const int kSnapshotFormatFieldNumber = 37;
  inline ::caffe::SolverParameter_SnapshotFormat snapshot_format() const;
  inline void set_snapshot_format(::caffe::SolverParameter_SnapshotFormat value);

  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  inline bool has_solver_mode() const;
  inline void clear_solver_mode();
  static const int kSolverModeFieldNumber = 17;
  inline ::caffe::SolverParameter_SolverMode solver_mode() const;
  inline void set_solver_mode(::caffe::SolverParameter_SolverMode value);

  // optional int32 device_id = 18 [default = 0];
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 18;
  inline ::google::protobuf::int32 device_id() const;
  inline void set_device_id(::google::protobuf::int32 value);

  // optional int64 random_seed = 20 [default = -1];
  inline bool has_random_seed() const;
  inline void clear_random_seed();
  static const int kRandomSeedFieldNumber = 20;
  inline ::google::protobuf::int64 random_seed() const;
  inline void set_random_seed(::google::protobuf::int64 value);

  // optional string type = 40 [default = "SGD"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 40;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional float delta = 31 [default = 1e-08];
  inline bool has_delta() const;
  inline void clear_delta();
  static const int kDeltaFieldNumber = 31;
  inline float delta() const;
  inline void set_delta(float value);

  // optional float momentum2 = 39 [default = 0.999];
  inline bool has_momentum2() const;
  inline void clear_momentum2();
  static const int kMomentum2FieldNumber = 39;
  inline float momentum2() const;
  inline void set_momentum2(float value);

  // optional float rms_decay = 38;
  inline bool has_rms_decay() const;
  inline void clear_rms_decay();
  static const int kRmsDecayFieldNumber = 38;
  inline float rms_decay() const;
  inline void set_rms_decay(float value);

  // optional bool debug_info = 23 [default = false];
  inline bool has_debug_info() const;
  inline void clear_debug_info();
  static const int kDebugInfoFieldNumber = 23;
  inline bool debug_info() const;
  inline void set_debug_info(bool value);

  // optional bool snapshot_after_train = 28 [default = true];
  inline bool has_snapshot_after_train() const;
  inline void clear_snapshot_after_train();
  static const int kSnapshotAfterTrainFieldNumber = 28;
  inline bool snapshot_after_train() const;
  inline void set_snapshot_after_train(bool value);

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  inline bool has_solver_type() const;
  inline void clear_solver_type();
  static const int kSolverTypeFieldNumber = 30;
  inline ::caffe::SolverParameter_SolverType solver_type() const;
  inline void set_solver_type(::caffe::SolverParameter_SolverType value);

  // optional int32 print_datadiff = 42 [default = 0];
  inline bool has_print_datadiff() const;
  inline void clear_print_datadiff();
  static const int kPrintDatadiffFieldNumber = 42;
  inline ::google::protobuf::int32 print_datadiff() const;
  inline void set_print_datadiff(::google::protobuf::int32 value);

  // optional int32 print_param = 43 [default = 0];
  inline bool has_print_param() const;
  inline void clear_print_param();
  static const int kPrintParamFieldNumber = 43;
  inline ::google::protobuf::int32 print_param() const;
  inline void set_print_param(::google::protobuf::int32 value);

  // optional int32 save_blob = 44 [default = 0];
  inline bool has_save_blob() const;
  inline void clear_save_blob();
  static const int kSaveBlobFieldNumber = 44;
  inline ::google::protobuf::int32 save_blob() const;
  inline void set_save_blob(::google::protobuf::int32 value);

  // optional string save_blob_path = 45 [default = ""];
  inline bool has_save_blob_path() const;
  inline void clear_save_blob_path();
  static const int kSaveBlobPathFieldNumber = 45;
  inline const ::std::string& save_blob_path() const;
  inline void set_save_blob_path(const ::std::string& value);
  inline void set_save_blob_path(const char* value);
  inline void set_save_blob_path(const char* value, size_t size);
  inline ::std::string* mutable_save_blob_path();
  inline ::std::string* release_save_blob_path();
  inline void set_allocated_save_blob_path(::std::string* save_blob_path);

  // optional bool save_test_blobs = 46 [default = false];
  inline bool has_save_test_blobs() const;
  inline void clear_save_test_blobs();
  static const int kSaveTestBlobsFieldNumber = 46;
  inline bool save_test_blobs() const;
  inline void set_save_test_blobs(bool value);

  // optional .caffe.TestProtos test_protos = 47;
  inline bool has_test_protos() const;
  inline void clear_test_protos();
  static const int kTestProtosFieldNumber = 47;
  inline const ::caffe::TestProtos& test_protos() const;
  inline ::caffe::TestProtos* mutable_test_protos();
  inline ::caffe::TestProtos* release_test_protos();
  inline void set_allocated_test_protos(::caffe::TestProtos* test_protos);

  // @@protoc_insertion_point(class_scope:caffe.SolverParameter)
 private:
  inline void set_has_net();
  inline void clear_has_net();
  inline void set_has_net_param();
  inline void clear_has_net_param();
  inline void set_has_train_net();
  inline void clear_has_train_net();
  inline void set_has_train_net_param();
  inline void clear_has_train_net_param();
  inline void set_has_train_state();
  inline void clear_has_train_state();
  inline void set_has_test_interval();
  inline void clear_has_test_interval();
  inline void set_has_test_compute_loss();
  inline void clear_has_test_compute_loss();
  inline void set_has_test_initialization();
  inline void clear_has_test_initialization();
  inline void set_has_base_lr();
  inline void clear_has_base_lr();
  inline void set_has_display();
  inline void clear_has_display();
  inline void set_has_average_loss();
  inline void clear_has_average_loss();
  inline void set_has_max_iter();
  inline void clear_has_max_iter();
  inline void set_has_iter_size();
  inline void clear_has_iter_size();
  inline void set_has_lr_policy();
  inline void clear_has_lr_policy();
  inline void set_has_gamma();
  inline void clear_has_gamma();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_momentum();
  inline void clear_has_momentum();
  inline void set_has_weight_decay();
  inline void clear_has_weight_decay();
  inline void set_has_regularization_type();
  inline void clear_has_regularization_type();
  inline void set_has_stepsize();
  inline void clear_has_stepsize();
  inline void set_has_clip_gradients();
  inline void clear_has_clip_gradients();
  inline void set_has_snapshot();
  inline void clear_has_snapshot();
  inline void set_has_snapshot_prefix();
  inline void clear_has_snapshot_prefix();
  inline void set_has_snapshot_diff();
  inline void clear_has_snapshot_diff();
  inline void set_has_snapshot_format();
  inline void clear_has_snapshot_format();
  inline void set_has_solver_mode();
  inline void clear_has_solver_mode();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_random_seed();
  inline void clear_has_random_seed();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_delta();
  inline void clear_has_delta();
  inline void set_has_momentum2();
  inline void clear_has_momentum2();
  inline void set_has_rms_decay();
  inline void clear_has_rms_decay();
  inline void set_has_debug_info();
  inline void clear_has_debug_info();
  inline void set_has_snapshot_after_train();
  inline void clear_has_snapshot_after_train();
  inline void set_has_solver_type();
  inline void clear_has_solver_type();
  inline void set_has_print_datadiff();
  inline void clear_has_print_datadiff();
  inline void set_has_print_param();
  inline void clear_has_print_param();
  inline void set_has_save_blob();
  inline void clear_has_save_blob();
  inline void set_has_save_blob_path();
  inline void clear_has_save_blob_path();
  inline void set_has_save_test_blobs();
  inline void clear_has_save_test_blobs();
  inline void set_has_test_protos();
  inline void clear_has_test_protos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* net_;
  ::caffe::NetParameter* net_param_;
  ::std::string* train_net_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_net_;
  ::caffe::NetParameter* train_net_param_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter > test_net_param_;
  ::caffe::NetState* train_state_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetState > test_state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_iter_;
  ::google::protobuf::int32 test_interval_;
  float base_lr_;
  ::google::protobuf::int32 display_;
  ::google::protobuf::int32 average_loss_;
  ::google::protobuf::int32 max_iter_;
  ::google::protobuf::int32 iter_size_;
  ::std::string* lr_policy_;
  float gamma_;
  float power_;
  float momentum_;
  float weight_decay_;
  bool test_compute_loss_;
  bool test_initialization_;
  bool snapshot_diff_;
  bool debug_info_;
  ::google::protobuf::int32 stepsize_;
  ::std::string* regularization_type_;
  static ::std::string* _default_regularization_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stepvalue_;
  float clip_gradients_;
  ::google::protobuf::int32 snapshot_;
  ::std::string* snapshot_prefix_;
  int snapshot_format_;
  int solver_mode_;
  ::google::protobuf::int64 random_seed_;
  ::google::protobuf::int32 device_id_;
  float delta_;
  ::std::string* type_;
  static ::std::string* _default_type_;
  float momentum2_;
  float rms_decay_;
  int solver_type_;
  ::google::protobuf::int32 print_datadiff_;
  ::google::protobuf::int32 print_param_;
  bool snapshot_after_train_;
  bool save_test_blobs_;
  ::std::string* save_blob_path_;
  ::caffe::TestProtos* test_protos_;
  ::google::protobuf::int32 save_blob_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(46 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SolverParameter* default_instance_;
};
// -------------------------------------------------------------------

class SolverState : public ::google::protobuf::Message {
 public:
  SolverState();
  virtual ~SolverState();

  SolverState(const SolverState& from);

  inline SolverState& operator=(const SolverState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverState& default_instance();

  void Swap(SolverState* other);

  // implements Message ----------------------------------------------

  SolverState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverState& from);
  void MergeFrom(const SolverState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iter = 1;
  inline bool has_iter() const;
  inline void clear_iter();
  static const int kIterFieldNumber = 1;
  inline ::google::protobuf::int32 iter() const;
  inline void set_iter(::google::protobuf::int32 value);

  // optional string learned_net = 2;
  inline bool has_learned_net() const;
  inline void clear_learned_net();
  static const int kLearnedNetFieldNumber = 2;
  inline const ::std::string& learned_net() const;
  inline void set_learned_net(const ::std::string& value);
  inline void set_learned_net(const char* value);
  inline void set_learned_net(const char* value, size_t size);
  inline ::std::string* mutable_learned_net();
  inline ::std::string* release_learned_net();
  inline void set_allocated_learned_net(::std::string* learned_net);

  // repeated .caffe.BlobProto history = 3;
  inline int history_size() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 3;
  inline const ::caffe::BlobProto& history(int index) const;
  inline ::caffe::BlobProto* mutable_history(int index);
  inline ::caffe::BlobProto* add_history();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      history() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_history();

  // optional int32 current_step = 4 [default = 0];
  inline bool has_current_step() const;
  inline void clear_current_step();
  static const int kCurrentStepFieldNumber = 4;
  inline ::google::protobuf::int32 current_step() const;
  inline void set_current_step(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.SolverState)
 private:
  inline void set_has_iter();
  inline void clear_has_iter();
  inline void set_has_learned_net();
  inline void clear_has_learned_net();
  inline void set_has_current_step();
  inline void clear_has_current_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* learned_net_;
  ::google::protobuf::int32 iter_;
  ::google::protobuf::int32 current_step_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > history_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SolverState* default_instance_;
};
// -------------------------------------------------------------------

class NetState : public ::google::protobuf::Message {
 public:
  NetState();
  virtual ~NetState();

  NetState(const NetState& from);

  inline NetState& operator=(const NetState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetState& default_instance();

  void Swap(NetState* other);

  // implements Message ----------------------------------------------

  NetState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetState& from);
  void MergeFrom(const NetState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.Phase phase = 1 [default = TEST];
  inline bool has_phase() const;
  inline void clear_phase();
  static const int kPhaseFieldNumber = 1;
  inline ::caffe::Phase phase() const;
  inline void set_phase(::caffe::Phase value);

  // optional int32 level = 2 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated string stage = 3;
  inline int stage_size() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 3;
  inline const ::std::string& stage(int index) const;
  inline ::std::string* mutable_stage(int index);
  inline void set_stage(int index, const ::std::string& value);
  inline void set_stage(int index, const char* value);
  inline void set_stage(int index, const char* value, size_t size);
  inline ::std::string* add_stage();
  inline void add_stage(const ::std::string& value);
  inline void add_stage(const char* value);
  inline void add_stage(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // @@protoc_insertion_point(class_scope:caffe.NetState)
 private:
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int phase_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static NetState* default_instance_;
};
// -------------------------------------------------------------------

class NetStateRule : public ::google::protobuf::Message {
 public:
  NetStateRule();
  virtual ~NetStateRule();

  NetStateRule(const NetStateRule& from);

  inline NetStateRule& operator=(const NetStateRule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetStateRule& default_instance();

  void Swap(NetStateRule* other);

  // implements Message ----------------------------------------------

  NetStateRule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetStateRule& from);
  void MergeFrom(const NetStateRule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.Phase phase = 1;
  inline bool has_phase() const;
  inline void clear_phase();
  static const int kPhaseFieldNumber = 1;
  inline ::caffe::Phase phase() const;
  inline void set_phase(::caffe::Phase value);

  // optional int32 min_level = 2;
  inline bool has_min_level() const;
  inline void clear_min_level();
  static const int kMinLevelFieldNumber = 2;
  inline ::google::protobuf::int32 min_level() const;
  inline void set_min_level(::google::protobuf::int32 value);

  // optional int32 max_level = 3;
  inline bool has_max_level() const;
  inline void clear_max_level();
  static const int kMaxLevelFieldNumber = 3;
  inline ::google::protobuf::int32 max_level() const;
  inline void set_max_level(::google::protobuf::int32 value);

  // repeated string stage = 4;
  inline int stage_size() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 4;
  inline const ::std::string& stage(int index) const;
  inline ::std::string* mutable_stage(int index);
  inline void set_stage(int index, const ::std::string& value);
  inline void set_stage(int index, const char* value);
  inline void set_stage(int index, const char* value, size_t size);
  inline ::std::string* add_stage();
  inline void add_stage(const ::std::string& value);
  inline void add_stage(const char* value);
  inline void add_stage(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // repeated string not_stage = 5;
  inline int not_stage_size() const;
  inline void clear_not_stage();
  static const int kNotStageFieldNumber = 5;
  inline const ::std::string& not_stage(int index) const;
  inline ::std::string* mutable_not_stage(int index);
  inline void set_not_stage(int index, const ::std::string& value);
  inline void set_not_stage(int index, const char* value);
  inline void set_not_stage(int index, const char* value, size_t size);
  inline ::std::string* add_not_stage();
  inline void add_not_stage(const ::std::string& value);
  inline void add_not_stage(const char* value);
  inline void add_not_stage(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& not_stage() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_not_stage();

  // @@protoc_insertion_point(class_scope:caffe.NetStateRule)
 private:
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_min_level();
  inline void clear_has_min_level();
  inline void set_has_max_level();
  inline void clear_has_max_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int phase_;
  ::google::protobuf::int32 min_level_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  ::google::protobuf::RepeatedPtrField< ::std::string> not_stage_;
  ::google::protobuf::int32 max_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static NetStateRule* default_instance_;
};
// -------------------------------------------------------------------

class ParamSpec : public ::google::protobuf::Message {
 public:
  ParamSpec();
  virtual ~ParamSpec();

  ParamSpec(const ParamSpec& from);

  inline ParamSpec& operator=(const ParamSpec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamSpec& default_instance();

  void Swap(ParamSpec* other);

  // implements Message ----------------------------------------------

  ParamSpec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParamSpec& from);
  void MergeFrom(const ParamSpec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ParamSpec_DimCheckMode DimCheckMode;
  static const DimCheckMode STRICT = ParamSpec_DimCheckMode_STRICT;
  static const DimCheckMode PERMISSIVE = ParamSpec_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return ParamSpec_DimCheckMode_IsValid(value);
  }
  static const DimCheckMode DimCheckMode_MIN =
    ParamSpec_DimCheckMode_DimCheckMode_MIN;
  static const DimCheckMode DimCheckMode_MAX =
    ParamSpec_DimCheckMode_DimCheckMode_MAX;
  static const int DimCheckMode_ARRAYSIZE =
    ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DimCheckMode_descriptor() {
    return ParamSpec_DimCheckMode_descriptor();
  }
  static inline const ::std::string& DimCheckMode_Name(DimCheckMode value) {
    return ParamSpec_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(const ::std::string& name,
      DimCheckMode* value) {
    return ParamSpec_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  inline bool has_share_mode() const;
  inline void clear_share_mode();
  static const int kShareModeFieldNumber = 2;
  inline ::caffe::ParamSpec_DimCheckMode share_mode() const;
  inline void set_share_mode(::caffe::ParamSpec_DimCheckMode value);

  // optional float lr_mult = 3 [default = 1];
  inline bool has_lr_mult() const;
  inline void clear_lr_mult();
  static const int kLrMultFieldNumber = 3;
  inline float lr_mult() const;
  inline void set_lr_mult(float value);

  // optional float decay_mult = 4 [default = 1];
  inline bool has_decay_mult() const;
  inline void clear_decay_mult();
  static const int kDecayMultFieldNumber = 4;
  inline float decay_mult() const;
  inline void set_decay_mult(float value);

  // @@protoc_insertion_point(class_scope:caffe.ParamSpec)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_share_mode();
  inline void clear_has_share_mode();
  inline void set_has_lr_mult();
  inline void clear_has_lr_mult();
  inline void set_has_decay_mult();
  inline void clear_has_decay_mult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int share_mode_;
  float lr_mult_;
  float decay_mult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ParamSpec* default_instance_;
};
// -------------------------------------------------------------------

class LayerParameter : public ::google::protobuf::Message {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerParameter& default_instance();

  void Swap(LayerParameter* other);

  // implements Message ----------------------------------------------

  LayerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated string bottom = 3;
  inline int bottom_size() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 3;
  inline const ::std::string& bottom(int index) const;
  inline ::std::string* mutable_bottom(int index);
  inline void set_bottom(int index, const ::std::string& value);
  inline void set_bottom(int index, const char* value);
  inline void set_bottom(int index, const char* value, size_t size);
  inline ::std::string* add_bottom();
  inline void add_bottom(const ::std::string& value);
  inline void add_bottom(const char* value);
  inline void add_bottom(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 4;
  inline int top_size() const;
  inline void clear_top();
  static const int kTopFieldNumber = 4;
  inline const ::std::string& top(int index) const;
  inline ::std::string* mutable_top(int index);
  inline void set_top(int index, const ::std::string& value);
  inline void set_top(int index, const char* value);
  inline void set_top(int index, const char* value, size_t size);
  inline ::std::string* add_top();
  inline void add_top(const ::std::string& value);
  inline void add_top(const char* value);
  inline void add_top(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // optional .caffe.Phase phase = 10;
  inline bool has_phase() const;
  inline void clear_phase();
  static const int kPhaseFieldNumber = 10;
  inline ::caffe::Phase phase() const;
  inline void set_phase(::caffe::Phase value);

  // repeated float loss_weight = 5;
  inline int loss_weight_size() const;
  inline void clear_loss_weight();
  static const int kLossWeightFieldNumber = 5;
  inline float loss_weight(int index) const;
  inline void set_loss_weight(int index, float value);
  inline void add_loss_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      loss_weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_loss_weight();

  // repeated .caffe.ParamSpec param = 6;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 6;
  inline const ::caffe::ParamSpec& param(int index) const;
  inline ::caffe::ParamSpec* mutable_param(int index);
  inline ::caffe::ParamSpec* add_param();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
      param() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
      mutable_param();

  // repeated .caffe.BlobProto blobs = 7;
  inline int blobs_size() const;
  inline void clear_blobs();
  static const int kBlobsFieldNumber = 7;
  inline const ::caffe::BlobProto& blobs(int index) const;
  inline ::caffe::BlobProto* mutable_blobs(int index);
  inline ::caffe::BlobProto* add_blobs();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();

  // repeated bool propagate_down = 11;
  inline int propagate_down_size() const;
  inline void clear_propagate_down();
  static const int kPropagateDownFieldNumber = 11;
  inline bool propagate_down(int index) const;
  inline void set_propagate_down(int index, bool value);
  inline void add_propagate_down(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      propagate_down() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_propagate_down();

  // repeated .caffe.NetStateRule include = 8;
  inline int include_size() const;
  inline void clear_include();
  static const int kIncludeFieldNumber = 8;
  inline const ::caffe::NetStateRule& include(int index) const;
  inline ::caffe::NetStateRule* mutable_include(int index);
  inline ::caffe::NetStateRule* add_include();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      include() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_include();

  // repeated .caffe.NetStateRule exclude = 9;
  inline int exclude_size() const;
  inline void clear_exclude();
  static const int kExcludeFieldNumber = 9;
  inline const ::caffe::NetStateRule& exclude(int index) const;
  inline ::caffe::NetStateRule* mutable_exclude(int index);
  inline ::caffe::NetStateRule* add_exclude();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      exclude() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_exclude();

  // optional .caffe.TransformationParameter transform_param = 100;
  inline bool has_transform_param() const;
  inline void clear_transform_param();
  static const int kTransformParamFieldNumber = 100;
  inline const ::caffe::TransformationParameter& transform_param() const;
  inline ::caffe::TransformationParameter* mutable_transform_param();
  inline ::caffe::TransformationParameter* release_transform_param();
  inline void set_allocated_transform_param(::caffe::TransformationParameter* transform_param);

  // optional .caffe.LossParameter loss_param = 101;
  inline bool has_loss_param() const;
  inline void clear_loss_param();
  static const int kLossParamFieldNumber = 101;
  inline const ::caffe::LossParameter& loss_param() const;
  inline ::caffe::LossParameter* mutable_loss_param();
  inline ::caffe::LossParameter* release_loss_param();
  inline void set_allocated_loss_param(::caffe::LossParameter* loss_param);

  // optional .caffe.AccuracyParameter accuracy_param = 102;
  inline bool has_accuracy_param() const;
  inline void clear_accuracy_param();
  static const int kAccuracyParamFieldNumber = 102;
  inline const ::caffe::AccuracyParameter& accuracy_param() const;
  inline ::caffe::AccuracyParameter* mutable_accuracy_param();
  inline ::caffe::AccuracyParameter* release_accuracy_param();
  inline void set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param);

  // optional .caffe.ArgMaxParameter argmax_param = 103;
  inline bool has_argmax_param() const;
  inline void clear_argmax_param();
  static const int kArgmaxParamFieldNumber = 103;
  inline const ::caffe::ArgMaxParameter& argmax_param() const;
  inline ::caffe::ArgMaxParameter* mutable_argmax_param();
  inline ::caffe::ArgMaxParameter* release_argmax_param();
  inline void set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param);

  // optional .caffe.BatchNormParameter batch_norm_param = 139;
  inline bool has_batch_norm_param() const;
  inline void clear_batch_norm_param();
  static const int kBatchNormParamFieldNumber = 139;
  inline const ::caffe::BatchNormParameter& batch_norm_param() const;
  inline ::caffe::BatchNormParameter* mutable_batch_norm_param();
  inline ::caffe::BatchNormParameter* release_batch_norm_param();
  inline void set_allocated_batch_norm_param(::caffe::BatchNormParameter* batch_norm_param);

  // optional .caffe.BiasParameter bias_param = 141;
  inline bool has_bias_param() const;
  inline void clear_bias_param();
  static const int kBiasParamFieldNumber = 141;
  inline const ::caffe::BiasParameter& bias_param() const;
  inline ::caffe::BiasParameter* mutable_bias_param();
  inline ::caffe::BiasParameter* release_bias_param();
  inline void set_allocated_bias_param(::caffe::BiasParameter* bias_param);

  // optional .caffe.ConcatParameter concat_param = 104;
  inline bool has_concat_param() const;
  inline void clear_concat_param();
  static const int kConcatParamFieldNumber = 104;
  inline const ::caffe::ConcatParameter& concat_param() const;
  inline ::caffe::ConcatParameter* mutable_concat_param();
  inline ::caffe::ConcatParameter* release_concat_param();
  inline void set_allocated_concat_param(::caffe::ConcatParameter* concat_param);

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
  inline bool has_contrastive_loss_param() const;
  inline void clear_contrastive_loss_param();
  static const int kContrastiveLossParamFieldNumber = 105;
  inline const ::caffe::ContrastiveLossParameter& contrastive_loss_param() const;
  inline ::caffe::ContrastiveLossParameter* mutable_contrastive_loss_param();
  inline ::caffe::ContrastiveLossParameter* release_contrastive_loss_param();
  inline void set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param);

  // optional .caffe.ConvolutionParameter convolution_param = 106;
  inline bool has_convolution_param() const;
  inline void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 106;
  inline const ::caffe::ConvolutionParameter& convolution_param() const;
  inline ::caffe::ConvolutionParameter* mutable_convolution_param();
  inline ::caffe::ConvolutionParameter* release_convolution_param();
  inline void set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param);

  // optional .caffe.CropParameter crop_param = 144;
  inline bool has_crop_param() const;
  inline void clear_crop_param();
  static const int kCropParamFieldNumber = 144;
  inline const ::caffe::CropParameter& crop_param() const;
  inline ::caffe::CropParameter* mutable_crop_param();
  inline ::caffe::CropParameter* release_crop_param();
  inline void set_allocated_crop_param(::caffe::CropParameter* crop_param);

  // optional .caffe.DataParameter data_param = 107;
  inline bool has_data_param() const;
  inline void clear_data_param();
  static const int kDataParamFieldNumber = 107;
  inline const ::caffe::DataParameter& data_param() const;
  inline ::caffe::DataParameter* mutable_data_param();
  inline ::caffe::DataParameter* release_data_param();
  inline void set_allocated_data_param(::caffe::DataParameter* data_param);

  // optional .caffe.DropoutParameter dropout_param = 108;
  inline bool has_dropout_param() const;
  inline void clear_dropout_param();
  static const int kDropoutParamFieldNumber = 108;
  inline const ::caffe::DropoutParameter& dropout_param() const;
  inline ::caffe::DropoutParameter* mutable_dropout_param();
  inline ::caffe::DropoutParameter* release_dropout_param();
  inline void set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param);

  // optional .caffe.DummyDataParameter dummy_data_param = 109;
  inline bool has_dummy_data_param() const;
  inline void clear_dummy_data_param();
  static const int kDummyDataParamFieldNumber = 109;
  inline const ::caffe::DummyDataParameter& dummy_data_param() const;
  inline ::caffe::DummyDataParameter* mutable_dummy_data_param();
  inline ::caffe::DummyDataParameter* release_dummy_data_param();
  inline void set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param);

  // optional .caffe.EltwiseParameter eltwise_param = 110;
  inline bool has_eltwise_param() const;
  inline void clear_eltwise_param();
  static const int kEltwiseParamFieldNumber = 110;
  inline const ::caffe::EltwiseParameter& eltwise_param() const;
  inline ::caffe::EltwiseParameter* mutable_eltwise_param();
  inline ::caffe::EltwiseParameter* release_eltwise_param();
  inline void set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param);

  // optional .caffe.ELUParameter elu_param = 140;
  inline bool has_elu_param() const;
  inline void clear_elu_param();
  static const int kEluParamFieldNumber = 140;
  inline const ::caffe::ELUParameter& elu_param() const;
  inline ::caffe::ELUParameter* mutable_elu_param();
  inline ::caffe::ELUParameter* release_elu_param();
  inline void set_allocated_elu_param(::caffe::ELUParameter* elu_param);

  // optional .caffe.EmbedParameter embed_param = 137;
  inline bool has_embed_param() const;
  inline void clear_embed_param();
  static const int kEmbedParamFieldNumber = 137;
  inline const ::caffe::EmbedParameter& embed_param() const;
  inline ::caffe::EmbedParameter* mutable_embed_param();
  inline ::caffe::EmbedParameter* release_embed_param();
  inline void set_allocated_embed_param(::caffe::EmbedParameter* embed_param);

  // optional .caffe.ExpParameter exp_param = 111;
  inline bool has_exp_param() const;
  inline void clear_exp_param();
  static const int kExpParamFieldNumber = 111;
  inline const ::caffe::ExpParameter& exp_param() const;
  inline ::caffe::ExpParameter* mutable_exp_param();
  inline ::caffe::ExpParameter* release_exp_param();
  inline void set_allocated_exp_param(::caffe::ExpParameter* exp_param);

  // optional .caffe.FlattenParameter flatten_param = 135;
  inline bool has_flatten_param() const;
  inline void clear_flatten_param();
  static const int kFlattenParamFieldNumber = 135;
  inline const ::caffe::FlattenParameter& flatten_param() const;
  inline ::caffe::FlattenParameter* mutable_flatten_param();
  inline ::caffe::FlattenParameter* release_flatten_param();
  inline void set_allocated_flatten_param(::caffe::FlattenParameter* flatten_param);

  // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
  inline bool has_hdf5_data_param() const;
  inline void clear_hdf5_data_param();
  static const int kHdf5DataParamFieldNumber = 112;
  inline const ::caffe::HDF5DataParameter& hdf5_data_param() const;
  inline ::caffe::HDF5DataParameter* mutable_hdf5_data_param();
  inline ::caffe::HDF5DataParameter* release_hdf5_data_param();
  inline void set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
  inline bool has_hdf5_output_param() const;
  inline void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 113;
  inline const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  inline ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  inline ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  inline void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // optional .caffe.HingeLossParameter hinge_loss_param = 114;
  inline bool has_hinge_loss_param() const;
  inline void clear_hinge_loss_param();
  static const int kHingeLossParamFieldNumber = 114;
  inline const ::caffe::HingeLossParameter& hinge_loss_param() const;
  inline ::caffe::HingeLossParameter* mutable_hinge_loss_param();
  inline ::caffe::HingeLossParameter* release_hinge_loss_param();
  inline void set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param);

  // optional .caffe.ImageDataParameter image_data_param = 115;
  inline bool has_image_data_param() const;
  inline void clear_image_data_param();
  static const int kImageDataParamFieldNumber = 115;
  inline const ::caffe::ImageDataParameter& image_data_param() const;
  inline ::caffe::ImageDataParameter* mutable_image_data_param();
  inline ::caffe::ImageDataParameter* release_image_data_param();
  inline void set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param);

  // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
  inline bool has_infogain_loss_param() const;
  inline void clear_infogain_loss_param();
  static const int kInfogainLossParamFieldNumber = 116;
  inline const ::caffe::InfogainLossParameter& infogain_loss_param() const;
  inline ::caffe::InfogainLossParameter* mutable_infogain_loss_param();
  inline ::caffe::InfogainLossParameter* release_infogain_loss_param();
  inline void set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param);

  // optional .caffe.InnerProductParameter inner_product_param = 117;
  inline bool has_inner_product_param() const;
  inline void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 117;
  inline const ::caffe::InnerProductParameter& inner_product_param() const;
  inline ::caffe::InnerProductParameter* mutable_inner_product_param();
  inline ::caffe::InnerProductParameter* release_inner_product_param();
  inline void set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param);

  // optional .caffe.InputParameter input_param = 143;
  inline bool has_input_param() const;
  inline void clear_input_param();
  static const int kInputParamFieldNumber = 143;
  inline const ::caffe::InputParameter& input_param() const;
  inline ::caffe::InputParameter* mutable_input_param();
  inline ::caffe::InputParameter* release_input_param();
  inline void set_allocated_input_param(::caffe::InputParameter* input_param);

  // optional .caffe.LogParameter log_param = 134;
  inline bool has_log_param() const;
  inline void clear_log_param();
  static const int kLogParamFieldNumber = 134;
  inline const ::caffe::LogParameter& log_param() const;
  inline ::caffe::LogParameter* mutable_log_param();
  inline ::caffe::LogParameter* release_log_param();
  inline void set_allocated_log_param(::caffe::LogParameter* log_param);

  // optional .caffe.LRNParameter lrn_param = 118;
  inline bool has_lrn_param() const;
  inline void clear_lrn_param();
  static const int kLrnParamFieldNumber = 118;
  inline const ::caffe::LRNParameter& lrn_param() const;
  inline ::caffe::LRNParameter* mutable_lrn_param();
  inline ::caffe::LRNParameter* release_lrn_param();
  inline void set_allocated_lrn_param(::caffe::LRNParameter* lrn_param);

  // optional .caffe.MemoryDataParameter memory_data_param = 119;
  inline bool has_memory_data_param() const;
  inline void clear_memory_data_param();
  static const int kMemoryDataParamFieldNumber = 119;
  inline const ::caffe::MemoryDataParameter& memory_data_param() const;
  inline ::caffe::MemoryDataParameter* mutable_memory_data_param();
  inline ::caffe::MemoryDataParameter* release_memory_data_param();
  inline void set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param);

  // optional .caffe.MVNParameter mvn_param = 120;
  inline bool has_mvn_param() const;
  inline void clear_mvn_param();
  static const int kMvnParamFieldNumber = 120;
  inline const ::caffe::MVNParameter& mvn_param() const;
  inline ::caffe::MVNParameter* mutable_mvn_param();
  inline ::caffe::MVNParameter* release_mvn_param();
  inline void set_allocated_mvn_param(::caffe::MVNParameter* mvn_param);

  // optional .caffe.PoolingParameter pooling_param = 121;
  inline bool has_pooling_param() const;
  inline void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 121;
  inline const ::caffe::PoolingParameter& pooling_param() const;
  inline ::caffe::PoolingParameter* mutable_pooling_param();
  inline ::caffe::PoolingParameter* release_pooling_param();
  inline void set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param);

  // optional .caffe.PowerParameter power_param = 122;
  inline bool has_power_param() const;
  inline void clear_power_param();
  static const int kPowerParamFieldNumber = 122;
  inline const ::caffe::PowerParameter& power_param() const;
  inline ::caffe::PowerParameter* mutable_power_param();
  inline ::caffe::PowerParameter* release_power_param();
  inline void set_allocated_power_param(::caffe::PowerParameter* power_param);

  // optional .caffe.PReLUParameter prelu_param = 131;
  inline bool has_prelu_param() const;
  inline void clear_prelu_param();
  static const int kPreluParamFieldNumber = 131;
  inline const ::caffe::PReLUParameter& prelu_param() const;
  inline ::caffe::PReLUParameter* mutable_prelu_param();
  inline ::caffe::PReLUParameter* release_prelu_param();
  inline void set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param);

  // optional .caffe.PythonParameter python_param = 130;
  inline bool has_python_param() const;
  inline void clear_python_param();
  static const int kPythonParamFieldNumber = 130;
  inline const ::caffe::PythonParameter& python_param() const;
  inline ::caffe::PythonParameter* mutable_python_param();
  inline ::caffe::PythonParameter* release_python_param();
  inline void set_allocated_python_param(::caffe::PythonParameter* python_param);

  // optional .caffe.ReductionParameter reduction_param = 136;
  inline bool has_reduction_param() const;
  inline void clear_reduction_param();
  static const int kReductionParamFieldNumber = 136;
  inline const ::caffe::ReductionParameter& reduction_param() const;
  inline ::caffe::ReductionParameter* mutable_reduction_param();
  inline ::caffe::ReductionParameter* release_reduction_param();
  inline void set_allocated_reduction_param(::caffe::ReductionParameter* reduction_param);

  // optional .caffe.ReLUParameter relu_param = 123;
  inline bool has_relu_param() const;
  inline void clear_relu_param();
  static const int kReluParamFieldNumber = 123;
  inline const ::caffe::ReLUParameter& relu_param() const;
  inline ::caffe::ReLUParameter* mutable_relu_param();
  inline ::caffe::ReLUParameter* release_relu_param();
  inline void set_allocated_relu_param(::caffe::ReLUParameter* relu_param);

  // optional .caffe.ReshapeParameter reshape_param = 133;
  inline bool has_reshape_param() const;
  inline void clear_reshape_param();
  static const int kReshapeParamFieldNumber = 133;
  inline const ::caffe::ReshapeParameter& reshape_param() const;
  inline ::caffe::ReshapeParameter* mutable_reshape_param();
  inline ::caffe::ReshapeParameter* release_reshape_param();
  inline void set_allocated_reshape_param(::caffe::ReshapeParameter* reshape_param);

  // optional .caffe.ScaleParameter scale_param = 142;
  inline bool has_scale_param() const;
  inline void clear_scale_param();
  static const int kScaleParamFieldNumber = 142;
  inline const ::caffe::ScaleParameter& scale_param() const;
  inline ::caffe::ScaleParameter* mutable_scale_param();
  inline ::caffe::ScaleParameter* release_scale_param();
  inline void set_allocated_scale_param(::caffe::ScaleParameter* scale_param);

  // optional .caffe.SigmoidParameter sigmoid_param = 124;
  inline bool has_sigmoid_param() const;
  inline void clear_sigmoid_param();
  static const int kSigmoidParamFieldNumber = 124;
  inline const ::caffe::SigmoidParameter& sigmoid_param() const;
  inline ::caffe::SigmoidParameter* mutable_sigmoid_param();
  inline ::caffe::SigmoidParameter* release_sigmoid_param();
  inline void set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param);

  // optional .caffe.SoftmaxParameter softmax_param = 125;
  inline bool has_softmax_param() const;
  inline void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 125;
  inline const ::caffe::SoftmaxParameter& softmax_param() const;
  inline ::caffe::SoftmaxParameter* mutable_softmax_param();
  inline ::caffe::SoftmaxParameter* release_softmax_param();
  inline void set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param);

  // optional .caffe.SPPParameter spp_param = 132;
  inline bool has_spp_param() const;
  inline void clear_spp_param();
  static const int kSppParamFieldNumber = 132;
  inline const ::caffe::SPPParameter& spp_param() const;
  inline ::caffe::SPPParameter* mutable_spp_param();
  inline ::caffe::SPPParameter* release_spp_param();
  inline void set_allocated_spp_param(::caffe::SPPParameter* spp_param);

  // optional .caffe.SliceParameter slice_param = 126;
  inline bool has_slice_param() const;
  inline void clear_slice_param();
  static const int kSliceParamFieldNumber = 126;
  inline const ::caffe::SliceParameter& slice_param() const;
  inline ::caffe::SliceParameter* mutable_slice_param();
  inline ::caffe::SliceParameter* release_slice_param();
  inline void set_allocated_slice_param(::caffe::SliceParameter* slice_param);

  // optional .caffe.TanHParameter tanh_param = 127;
  inline bool has_tanh_param() const;
  inline void clear_tanh_param();
  static const int kTanhParamFieldNumber = 127;
  inline const ::caffe::TanHParameter& tanh_param() const;
  inline ::caffe::TanHParameter* mutable_tanh_param();
  inline ::caffe::TanHParameter* release_tanh_param();
  inline void set_allocated_tanh_param(::caffe::TanHParameter* tanh_param);

  // optional .caffe.ThresholdParameter threshold_param = 128;
  inline bool has_threshold_param() const;
  inline void clear_threshold_param();
  static const int kThresholdParamFieldNumber = 128;
  inline const ::caffe::ThresholdParameter& threshold_param() const;
  inline ::caffe::ThresholdParameter* mutable_threshold_param();
  inline ::caffe::ThresholdParameter* release_threshold_param();
  inline void set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param);

  // optional .caffe.TileParameter tile_param = 138;
  inline bool has_tile_param() const;
  inline void clear_tile_param();
  static const int kTileParamFieldNumber = 138;
  inline const ::caffe::TileParameter& tile_param() const;
  inline ::caffe::TileParameter* mutable_tile_param();
  inline ::caffe::TileParameter* release_tile_param();
  inline void set_allocated_tile_param(::caffe::TileParameter* tile_param);

  // optional .caffe.WindowDataParameter window_data_param = 129;
  inline bool has_window_data_param() const;
  inline void clear_window_data_param();
  static const int kWindowDataParamFieldNumber = 129;
  inline const ::caffe::WindowDataParameter& window_data_param() const;
  inline ::caffe::WindowDataParameter* mutable_window_data_param();
  inline ::caffe::WindowDataParameter* release_window_data_param();
  inline void set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param);

  // optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 1001;
  inline bool has_image_data_arbitrary_param() const;
  inline void clear_image_data_arbitrary_param();
  static const int kImageDataArbitraryParamFieldNumber = 1001;
  inline const ::caffe::ImageDataArbitraryParameter& image_data_arbitrary_param() const;
  inline ::caffe::ImageDataArbitraryParameter* mutable_image_data_arbitrary_param();
  inline ::caffe::ImageDataArbitraryParameter* release_image_data_arbitrary_param();
  inline void set_allocated_image_data_arbitrary_param(::caffe::ImageDataArbitraryParameter* image_data_arbitrary_param);

  // optional .caffe.ManipulatelabelParameter manipulate_label_param = 1002;
  inline bool has_manipulate_label_param() const;
  inline void clear_manipulate_label_param();
  static const int kManipulateLabelParamFieldNumber = 1002;
  inline const ::caffe::ManipulatelabelParameter& manipulate_label_param() const;
  inline ::caffe::ManipulatelabelParameter* mutable_manipulate_label_param();
  inline ::caffe::ManipulatelabelParameter* release_manipulate_label_param();
  inline void set_allocated_manipulate_label_param(::caffe::ManipulatelabelParameter* manipulate_label_param);

  // optional .caffe.SpatialRecurrentParameter spatialrecurrent_param = 1003;
  inline bool has_spatialrecurrent_param() const;
  inline void clear_spatialrecurrent_param();
  static const int kSpatialrecurrentParamFieldNumber = 1003;
  inline const ::caffe::SpatialRecurrentParameter& spatialrecurrent_param() const;
  inline ::caffe::SpatialRecurrentParameter* mutable_spatialrecurrent_param();
  inline ::caffe::SpatialRecurrentParameter* release_spatialrecurrent_param();
  inline void set_allocated_spatialrecurrent_param(::caffe::SpatialRecurrentParameter* spatialrecurrent_param);

  // optional .caffe.SpatialLstmParameter spatiallstm_param = 1004;
  inline bool has_spatiallstm_param() const;
  inline void clear_spatiallstm_param();
  static const int kSpatiallstmParamFieldNumber = 1004;
  inline const ::caffe::SpatialLstmParameter& spatiallstm_param() const;
  inline ::caffe::SpatialLstmParameter* mutable_spatiallstm_param();
  inline ::caffe::SpatialLstmParameter* release_spatiallstm_param();
  inline void set_allocated_spatiallstm_param(::caffe::SpatialLstmParameter* spatiallstm_param);

  // optional .caffe.WeakGateLstmParameter weakgatelstm_param = 1005;
  inline bool has_weakgatelstm_param() const;
  inline void clear_weakgatelstm_param();
  static const int kWeakgatelstmParamFieldNumber = 1005;
  inline const ::caffe::WeakGateLstmParameter& weakgatelstm_param() const;
  inline ::caffe::WeakGateLstmParameter* mutable_weakgatelstm_param();
  inline ::caffe::WeakGateLstmParameter* release_weakgatelstm_param();
  inline void set_allocated_weakgatelstm_param(::caffe::WeakGateLstmParameter* weakgatelstm_param);

  // optional .caffe.TemporalLstmParameter temporallstm_param = 1006;
  inline bool has_temporallstm_param() const;
  inline void clear_temporallstm_param();
  static const int kTemporallstmParamFieldNumber = 1006;
  inline const ::caffe::TemporalLstmParameter& temporallstm_param() const;
  inline ::caffe::TemporalLstmParameter* mutable_temporallstm_param();
  inline ::caffe::TemporalLstmParameter* release_temporallstm_param();
  inline void set_allocated_temporallstm_param(::caffe::TemporalLstmParameter* temporallstm_param);

  // optional .caffe.ResizeParameter resize_param = 1007;
  inline bool has_resize_param() const;
  inline void clear_resize_param();
  static const int kResizeParamFieldNumber = 1007;
  inline const ::caffe::ResizeParameter& resize_param() const;
  inline ::caffe::ResizeParameter* mutable_resize_param();
  inline ::caffe::ResizeParameter* release_resize_param();
  inline void set_allocated_resize_param(::caffe::ResizeParameter* resize_param);

  // optional .caffe.ManipulateLossParameter manipulate_loss_param = 1008;
  inline bool has_manipulate_loss_param() const;
  inline void clear_manipulate_loss_param();
  static const int kManipulateLossParamFieldNumber = 1008;
  inline const ::caffe::ManipulateLossParameter& manipulate_loss_param() const;
  inline ::caffe::ManipulateLossParameter* mutable_manipulate_loss_param();
  inline ::caffe::ManipulateLossParameter* release_manipulate_loss_param();
  inline void set_allocated_manipulate_loss_param(::caffe::ManipulateLossParameter* manipulate_loss_param);

  // optional .caffe.ElementHingeLossParameter element_hinge_loss_param = 1009;
  inline bool has_element_hinge_loss_param() const;
  inline void clear_element_hinge_loss_param();
  static const int kElementHingeLossParamFieldNumber = 1009;
  inline const ::caffe::ElementHingeLossParameter& element_hinge_loss_param() const;
  inline ::caffe::ElementHingeLossParameter* mutable_element_hinge_loss_param();
  inline ::caffe::ElementHingeLossParameter* release_element_hinge_loss_param();
  inline void set_allocated_element_hinge_loss_param(::caffe::ElementHingeLossParameter* element_hinge_loss_param);

  // optional .caffe.BNParameter bn_param = 1010;
  inline bool has_bn_param() const;
  inline void clear_bn_param();
  static const int kBnParamFieldNumber = 1010;
  inline const ::caffe::BNParameter& bn_param() const;
  inline ::caffe::BNParameter* mutable_bn_param();
  inline ::caffe::BNParameter* release_bn_param();
  inline void set_allocated_bn_param(::caffe::BNParameter* bn_param);

  // optional .caffe.RegionconvolutionParameter regionconvolution_param = 1011;
  inline bool has_regionconvolution_param() const;
  inline void clear_regionconvolution_param();
  static const int kRegionconvolutionParamFieldNumber = 1011;
  inline const ::caffe::RegionconvolutionParameter& regionconvolution_param() const;
  inline ::caffe::RegionconvolutionParameter* mutable_regionconvolution_param();
  inline ::caffe::RegionconvolutionParameter* release_regionconvolution_param();
  inline void set_allocated_regionconvolution_param(::caffe::RegionconvolutionParameter* regionconvolution_param);

  // optional .caffe.MapMetricLossParameter mapmetric_loss_param = 1012;
  inline bool has_mapmetric_loss_param() const;
  inline void clear_mapmetric_loss_param();
  static const int kMapmetricLossParamFieldNumber = 1012;
  inline const ::caffe::MapMetricLossParameter& mapmetric_loss_param() const;
  inline ::caffe::MapMetricLossParameter* mutable_mapmetric_loss_param();
  inline ::caffe::MapMetricLossParameter* release_mapmetric_loss_param();
  inline void set_allocated_mapmetric_loss_param(::caffe::MapMetricLossParameter* mapmetric_loss_param);

  // optional .caffe.ImageDataTextLabelParameter image_data_text_label_param = 1013;
  inline bool has_image_data_text_label_param() const;
  inline void clear_image_data_text_label_param();
  static const int kImageDataTextLabelParamFieldNumber = 1013;
  inline const ::caffe::ImageDataTextLabelParameter& image_data_text_label_param() const;
  inline ::caffe::ImageDataTextLabelParameter* mutable_image_data_text_label_param();
  inline ::caffe::ImageDataTextLabelParameter* release_image_data_text_label_param();
  inline void set_allocated_image_data_text_label_param(::caffe::ImageDataTextLabelParameter* image_data_text_label_param);

  // optional .caffe.SuperCropParameter super_crop_param = 1014;
  inline bool has_super_crop_param() const;
  inline void clear_super_crop_param();
  static const int kSuperCropParamFieldNumber = 1014;
  inline const ::caffe::SuperCropParameter& super_crop_param() const;
  inline ::caffe::SuperCropParameter* mutable_super_crop_param();
  inline ::caffe::SuperCropParameter* release_super_crop_param();
  inline void set_allocated_super_crop_param(::caffe::SuperCropParameter* super_crop_param);

  // optional .caffe.HardSampleParameter hardsample_param = 1015;
  inline bool has_hardsample_param() const;
  inline void clear_hardsample_param();
  static const int kHardsampleParamFieldNumber = 1015;
  inline const ::caffe::HardSampleParameter& hardsample_param() const;
  inline ::caffe::HardSampleParameter* mutable_hardsample_param();
  inline ::caffe::HardSampleParameter* release_hardsample_param();
  inline void set_allocated_hardsample_param(::caffe::HardSampleParameter* hardsample_param);

  // optional .caffe.GateLstmParameter gatelstm_param = 1016;
  inline bool has_gatelstm_param() const;
  inline void clear_gatelstm_param();
  static const int kGatelstmParamFieldNumber = 1016;
  inline const ::caffe::GateLstmParameter& gatelstm_param() const;
  inline ::caffe::GateLstmParameter* mutable_gatelstm_param();
  inline ::caffe::GateLstmParameter* release_gatelstm_param();
  inline void set_allocated_gatelstm_param(::caffe::GateLstmParameter* gatelstm_param);

  // optional .caffe.GateRecurrentParameter gaterecurrent_param = 1017;
  inline bool has_gaterecurrent_param() const;
  inline void clear_gaterecurrent_param();
  static const int kGaterecurrentParamFieldNumber = 1017;
  inline const ::caffe::GateRecurrentParameter& gaterecurrent_param() const;
  inline ::caffe::GateRecurrentParameter* mutable_gaterecurrent_param();
  inline ::caffe::GateRecurrentParameter* release_gaterecurrent_param();
  inline void set_allocated_gaterecurrent_param(::caffe::GateRecurrentParameter* gaterecurrent_param);

  // optional .caffe.DenseCRFParameter dense_crf_param = 1018;
  inline bool has_dense_crf_param() const;
  inline void clear_dense_crf_param();
  static const int kDenseCrfParamFieldNumber = 1018;
  inline const ::caffe::DenseCRFParameter& dense_crf_param() const;
  inline ::caffe::DenseCRFParameter* mutable_dense_crf_param();
  inline ::caffe::DenseCRFParameter* release_dense_crf_param();
  inline void set_allocated_dense_crf_param(::caffe::DenseCRFParameter* dense_crf_param);

  // optional .caffe.PairImageDataParameter pair_image_data_param = 1019;
  inline bool has_pair_image_data_param() const;
  inline void clear_pair_image_data_param();
  static const int kPairImageDataParamFieldNumber = 1019;
  inline const ::caffe::PairImageDataParameter& pair_image_data_param() const;
  inline ::caffe::PairImageDataParameter* mutable_pair_image_data_param();
  inline ::caffe::PairImageDataParameter* release_pair_image_data_param();
  inline void set_allocated_pair_image_data_param(::caffe::PairImageDataParameter* pair_image_data_param);

  // optional .caffe.TripletLossParameter triplet_loss_param = 1020;
  inline bool has_triplet_loss_param() const;
  inline void clear_triplet_loss_param();
  static const int kTripletLossParamFieldNumber = 1020;
  inline const ::caffe::TripletLossParameter& triplet_loss_param() const;
  inline ::caffe::TripletLossParameter* mutable_triplet_loss_param();
  inline ::caffe::TripletLossParameter* release_triplet_loss_param();
  inline void set_allocated_triplet_loss_param(::caffe::TripletLossParameter* triplet_loss_param);

  // optional .caffe.L2NormParameter l2norm_param = 1021;
  inline bool has_l2norm_param() const;
  inline void clear_l2norm_param();
  static const int kL2NormParamFieldNumber = 1021;
  inline const ::caffe::L2NormParameter& l2norm_param() const;
  inline ::caffe::L2NormParameter* mutable_l2norm_param();
  inline ::caffe::L2NormParameter* release_l2norm_param();
  inline void set_allocated_l2norm_param(::caffe::L2NormParameter* l2norm_param);

  // optional .caffe.PadParameter pad_param = 1022;
  inline bool has_pad_param() const;
  inline void clear_pad_param();
  static const int kPadParamFieldNumber = 1022;
  inline const ::caffe::PadParameter& pad_param() const;
  inline ::caffe::PadParameter* mutable_pad_param();
  inline ::caffe::PadParameter* release_pad_param();
  inline void set_allocated_pad_param(::caffe::PadParameter* pad_param);

  // optional .caffe.FacerecImageDataParameter facerec_image_data_param = 1023;
  inline bool has_facerec_image_data_param() const;
  inline void clear_facerec_image_data_param();
  static const int kFacerecImageDataParamFieldNumber = 1023;
  inline const ::caffe::FacerecImageDataParameter& facerec_image_data_param() const;
  inline ::caffe::FacerecImageDataParameter* mutable_facerec_image_data_param();
  inline ::caffe::FacerecImageDataParameter* release_facerec_image_data_param();
  inline void set_allocated_facerec_image_data_param(::caffe::FacerecImageDataParameter* facerec_image_data_param);

  // optional .caffe.TripletDataParameter triplet_data_param = 1024;
  inline bool has_triplet_data_param() const;
  inline void clear_triplet_data_param();
  static const int kTripletDataParamFieldNumber = 1024;
  inline const ::caffe::TripletDataParameter& triplet_data_param() const;
  inline ::caffe::TripletDataParameter* mutable_triplet_data_param();
  inline ::caffe::TripletDataParameter* release_triplet_data_param();
  inline void set_allocated_triplet_data_param(::caffe::TripletDataParameter* triplet_data_param);

  // optional .caffe.SegmentDataParameter segment_data_param = 1025;
  inline bool has_segment_data_param() const;
  inline void clear_segment_data_param();
  static const int kSegmentDataParamFieldNumber = 1025;
  inline const ::caffe::SegmentDataParameter& segment_data_param() const;
  inline ::caffe::SegmentDataParameter* mutable_segment_data_param();
  inline ::caffe::SegmentDataParameter* release_segment_data_param();
  inline void set_allocated_segment_data_param(::caffe::SegmentDataParameter* segment_data_param);

  // optional .caffe.LearnCRFParameter learn_crf_param = 1026;
  inline bool has_learn_crf_param() const;
  inline void clear_learn_crf_param();
  static const int kLearnCrfParamFieldNumber = 1026;
  inline const ::caffe::LearnCRFParameter& learn_crf_param() const;
  inline ::caffe::LearnCRFParameter* mutable_learn_crf_param();
  inline ::caffe::LearnCRFParameter* release_learn_crf_param();
  inline void set_allocated_learn_crf_param(::caffe::LearnCRFParameter* learn_crf_param);

  // optional .caffe.GateRecurrent2dParameter gaterecurrent2d_param = 1027;
  inline bool has_gaterecurrent2d_param() const;
  inline void clear_gaterecurrent2d_param();
  static const int kGaterecurrent2DParamFieldNumber = 1027;
  inline const ::caffe::GateRecurrent2dParameter& gaterecurrent2d_param() const;
  inline ::caffe::GateRecurrent2dParameter* mutable_gaterecurrent2d_param();
  inline ::caffe::GateRecurrent2dParameter* release_gaterecurrent2d_param();
  inline void set_allocated_gaterecurrent2d_param(::caffe::GateRecurrent2dParameter* gaterecurrent2d_param);

  // optional .caffe.UpsampleParameter upsample_param = 1028;
  inline bool has_upsample_param() const;
  inline void clear_upsample_param();
  static const int kUpsampleParamFieldNumber = 1028;
  inline const ::caffe::UpsampleParameter& upsample_param() const;
  inline ::caffe::UpsampleParameter* mutable_upsample_param();
  inline ::caffe::UpsampleParameter* release_upsample_param();
  inline void set_allocated_upsample_param(::caffe::UpsampleParameter* upsample_param);

  // @@protoc_insertion_point(class_scope:caffe.LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_transform_param();
  inline void clear_has_transform_param();
  inline void set_has_loss_param();
  inline void clear_has_loss_param();
  inline void set_has_accuracy_param();
  inline void clear_has_accuracy_param();
  inline void set_has_argmax_param();
  inline void clear_has_argmax_param();
  inline void set_has_batch_norm_param();
  inline void clear_has_batch_norm_param();
  inline void set_has_bias_param();
  inline void clear_has_bias_param();
  inline void set_has_concat_param();
  inline void clear_has_concat_param();
  inline void set_has_contrastive_loss_param();
  inline void clear_has_contrastive_loss_param();
  inline void set_has_convolution_param();
  inline void clear_has_convolution_param();
  inline void set_has_crop_param();
  inline void clear_has_crop_param();
  inline void set_has_data_param();
  inline void clear_has_data_param();
  inline void set_has_dropout_param();
  inline void clear_has_dropout_param();
  inline void set_has_dummy_data_param();
  inline void clear_has_dummy_data_param();
  inline void set_has_eltwise_param();
  inline void clear_has_eltwise_param();
  inline void set_has_elu_param();
  inline void clear_has_elu_param();
  inline void set_has_embed_param();
  inline void clear_has_embed_param();
  inline void set_has_exp_param();
  inline void clear_has_exp_param();
  inline void set_has_flatten_param();
  inline void clear_has_flatten_param();
  inline void set_has_hdf5_data_param();
  inline void clear_has_hdf5_data_param();
  inline void set_has_hdf5_output_param();
  inline void clear_has_hdf5_output_param();
  inline void set_has_hinge_loss_param();
  inline void clear_has_hinge_loss_param();
  inline void set_has_image_data_param();
  inline void clear_has_image_data_param();
  inline void set_has_infogain_loss_param();
  inline void clear_has_infogain_loss_param();
  inline void set_has_inner_product_param();
  inline void clear_has_inner_product_param();
  inline void set_has_input_param();
  inline void clear_has_input_param();
  inline void set_has_log_param();
  inline void clear_has_log_param();
  inline void set_has_lrn_param();
  inline void clear_has_lrn_param();
  inline void set_has_memory_data_param();
  inline void clear_has_memory_data_param();
  inline void set_has_mvn_param();
  inline void clear_has_mvn_param();
  inline void set_has_pooling_param();
  inline void clear_has_pooling_param();
  inline void set_has_power_param();
  inline void clear_has_power_param();
  inline void set_has_prelu_param();
  inline void clear_has_prelu_param();
  inline void set_has_python_param();
  inline void clear_has_python_param();
  inline void set_has_reduction_param();
  inline void clear_has_reduction_param();
  inline void set_has_relu_param();
  inline void clear_has_relu_param();
  inline void set_has_reshape_param();
  inline void clear_has_reshape_param();
  inline void set_has_scale_param();
  inline void clear_has_scale_param();
  inline void set_has_sigmoid_param();
  inline void clear_has_sigmoid_param();
  inline void set_has_softmax_param();
  inline void clear_has_softmax_param();
  inline void set_has_spp_param();
  inline void clear_has_spp_param();
  inline void set_has_slice_param();
  inline void clear_has_slice_param();
  inline void set_has_tanh_param();
  inline void clear_has_tanh_param();
  inline void set_has_threshold_param();
  inline void clear_has_threshold_param();
  inline void set_has_tile_param();
  inline void clear_has_tile_param();
  inline void set_has_window_data_param();
  inline void clear_has_window_data_param();
  inline void set_has_image_data_arbitrary_param();
  inline void clear_has_image_data_arbitrary_param();
  inline void set_has_manipulate_label_param();
  inline void clear_has_manipulate_label_param();
  inline void set_has_spatialrecurrent_param();
  inline void clear_has_spatialrecurrent_param();
  inline void set_has_spatiallstm_param();
  inline void clear_has_spatiallstm_param();
  inline void set_has_weakgatelstm_param();
  inline void clear_has_weakgatelstm_param();
  inline void set_has_temporallstm_param();
  inline void clear_has_temporallstm_param();
  inline void set_has_resize_param();
  inline void clear_has_resize_param();
  inline void set_has_manipulate_loss_param();
  inline void clear_has_manipulate_loss_param();
  inline void set_has_element_hinge_loss_param();
  inline void clear_has_element_hinge_loss_param();
  inline void set_has_bn_param();
  inline void clear_has_bn_param();
  inline void set_has_regionconvolution_param();
  inline void clear_has_regionconvolution_param();
  inline void set_has_mapmetric_loss_param();
  inline void clear_has_mapmetric_loss_param();
  inline void set_has_image_data_text_label_param();
  inline void clear_has_image_data_text_label_param();
  inline void set_has_super_crop_param();
  inline void clear_has_super_crop_param();
  inline void set_has_hardsample_param();
  inline void clear_has_hardsample_param();
  inline void set_has_gatelstm_param();
  inline void clear_has_gatelstm_param();
  inline void set_has_gaterecurrent_param();
  inline void clear_has_gaterecurrent_param();
  inline void set_has_dense_crf_param();
  inline void clear_has_dense_crf_param();
  inline void set_has_pair_image_data_param();
  inline void clear_has_pair_image_data_param();
  inline void set_has_triplet_loss_param();
  inline void clear_has_triplet_loss_param();
  inline void set_has_l2norm_param();
  inline void clear_has_l2norm_param();
  inline void set_has_pad_param();
  inline void clear_has_pad_param();
  inline void set_has_facerec_image_data_param();
  inline void clear_has_facerec_image_data_param();
  inline void set_has_triplet_data_param();
  inline void clear_has_triplet_data_param();
  inline void set_has_segment_data_param();
  inline void clear_has_segment_data_param();
  inline void set_has_learn_crf_param();
  inline void clear_has_learn_crf_param();
  inline void set_has_gaterecurrent2d_param();
  inline void clear_has_gaterecurrent2d_param();
  inline void set_has_upsample_param();
  inline void clear_has_upsample_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::google::protobuf::RepeatedField< float > loss_weight_;
  ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec > param_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::RepeatedField< bool > propagate_down_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > include_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > exclude_;
  ::caffe::TransformationParameter* transform_param_;
  ::caffe::LossParameter* loss_param_;
  ::caffe::AccuracyParameter* accuracy_param_;
  ::caffe::ArgMaxParameter* argmax_param_;
  ::caffe::BatchNormParameter* batch_norm_param_;
  ::caffe::BiasParameter* bias_param_;
  ::caffe::ConcatParameter* concat_param_;
  ::caffe::ContrastiveLossParameter* contrastive_loss_param_;
  ::caffe::ConvolutionParameter* convolution_param_;
  ::caffe::CropParameter* crop_param_;
  ::caffe::DataParameter* data_param_;
  ::caffe::DropoutParameter* dropout_param_;
  ::caffe::DummyDataParameter* dummy_data_param_;
  ::caffe::EltwiseParameter* eltwise_param_;
  ::caffe::ELUParameter* elu_param_;
  ::caffe::EmbedParameter* embed_param_;
  ::caffe::ExpParameter* exp_param_;
  ::caffe::FlattenParameter* flatten_param_;
  ::caffe::HDF5DataParameter* hdf5_data_param_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::caffe::HingeLossParameter* hinge_loss_param_;
  ::caffe::ImageDataParameter* image_data_param_;
  ::caffe::InfogainLossParameter* infogain_loss_param_;
  ::caffe::InnerProductParameter* inner_product_param_;
  ::caffe::InputParameter* input_param_;
  ::caffe::LogParameter* log_param_;
  ::caffe::LRNParameter* lrn_param_;
  ::caffe::MemoryDataParameter* memory_data_param_;
  ::caffe::MVNParameter* mvn_param_;
  ::caffe::PoolingParameter* pooling_param_;
  ::caffe::PowerParameter* power_param_;
  ::caffe::PReLUParameter* prelu_param_;
  ::caffe::PythonParameter* python_param_;
  ::caffe::ReductionParameter* reduction_param_;
  ::caffe::ReLUParameter* relu_param_;
  ::caffe::ReshapeParameter* reshape_param_;
  ::caffe::ScaleParameter* scale_param_;
  ::caffe::SigmoidParameter* sigmoid_param_;
  ::caffe::SoftmaxParameter* softmax_param_;
  ::caffe::SPPParameter* spp_param_;
  ::caffe::SliceParameter* slice_param_;
  ::caffe::TanHParameter* tanh_param_;
  ::caffe::ThresholdParameter* threshold_param_;
  ::caffe::TileParameter* tile_param_;
  ::caffe::WindowDataParameter* window_data_param_;
  ::caffe::ImageDataArbitraryParameter* image_data_arbitrary_param_;
  ::caffe::ManipulatelabelParameter* manipulate_label_param_;
  ::caffe::SpatialRecurrentParameter* spatialrecurrent_param_;
  ::caffe::SpatialLstmParameter* spatiallstm_param_;
  ::caffe::WeakGateLstmParameter* weakgatelstm_param_;
  ::caffe::TemporalLstmParameter* temporallstm_param_;
  ::caffe::ResizeParameter* resize_param_;
  ::caffe::ManipulateLossParameter* manipulate_loss_param_;
  ::caffe::ElementHingeLossParameter* element_hinge_loss_param_;
  ::caffe::BNParameter* bn_param_;
  ::caffe::RegionconvolutionParameter* regionconvolution_param_;
  ::caffe::MapMetricLossParameter* mapmetric_loss_param_;
  ::caffe::ImageDataTextLabelParameter* image_data_text_label_param_;
  ::caffe::SuperCropParameter* super_crop_param_;
  ::caffe::HardSampleParameter* hardsample_param_;
  ::caffe::GateLstmParameter* gatelstm_param_;
  ::caffe::GateRecurrentParameter* gaterecurrent_param_;
  ::caffe::DenseCRFParameter* dense_crf_param_;
  ::caffe::PairImageDataParameter* pair_image_data_param_;
  ::caffe::TripletLossParameter* triplet_loss_param_;
  ::caffe::L2NormParameter* l2norm_param_;
  ::caffe::PadParameter* pad_param_;
  ::caffe::FacerecImageDataParameter* facerec_image_data_param_;
  ::caffe::TripletDataParameter* triplet_data_param_;
  ::caffe::SegmentDataParameter* segment_data_param_;
  ::caffe::LearnCRFParameter* learn_crf_param_;
  ::caffe::GateRecurrent2dParameter* gaterecurrent2d_param_;
  ::caffe::UpsampleParameter* upsample_param_;
  int phase_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(84 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static LayerParameter* default_instance_;
};
// -------------------------------------------------------------------

class GateRecurrent2dParameter : public ::google::protobuf::Message {
 public:
  GateRecurrent2dParameter();
  virtual ~GateRecurrent2dParameter();

  GateRecurrent2dParameter(const GateRecurrent2dParameter& from);

  inline GateRecurrent2dParameter& operator=(const GateRecurrent2dParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateRecurrent2dParameter& default_instance();

  void Swap(GateRecurrent2dParameter* other);

  // implements Message ----------------------------------------------

  GateRecurrent2dParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateRecurrent2dParameter& from);
  void MergeFrom(const GateRecurrent2dParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GateRecurrent2dParameter_Active Active;
  static const Active LINEAR = GateRecurrent2dParameter_Active_LINEAR;
  static const Active SIGMOID = GateRecurrent2dParameter_Active_SIGMOID;
  static const Active RELU = GateRecurrent2dParameter_Active_RELU;
  static const Active TANH = GateRecurrent2dParameter_Active_TANH;
  static inline bool Active_IsValid(int value) {
    return GateRecurrent2dParameter_Active_IsValid(value);
  }
  static const Active Active_MIN =
    GateRecurrent2dParameter_Active_Active_MIN;
  static const Active Active_MAX =
    GateRecurrent2dParameter_Active_Active_MAX;
  static const int Active_ARRAYSIZE =
    GateRecurrent2dParameter_Active_Active_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Active_descriptor() {
    return GateRecurrent2dParameter_Active_descriptor();
  }
  static inline const ::std::string& Active_Name(Active value) {
    return GateRecurrent2dParameter_Active_Name(value);
  }
  static inline bool Active_Parse(const ::std::string& name,
      Active* value) {
    return GateRecurrent2dParameter_Active_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool horizontal = 16 [default = true];
  inline bool has_horizontal() const;
  inline void clear_horizontal();
  static const int kHorizontalFieldNumber = 16;
  inline bool horizontal() const;
  inline void set_horizontal(bool value);

  // optional bool reverse = 17 [default = false];
  inline bool has_reverse() const;
  inline void clear_reverse();
  static const int kReverseFieldNumber = 17;
  inline bool reverse() const;
  inline void set_reverse(bool value);

  // optional .caffe.GateRecurrent2dParameter.Active active = 18 [default = LINEAR];
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 18;
  inline ::caffe::GateRecurrent2dParameter_Active active() const;
  inline void set_active(::caffe::GateRecurrent2dParameter_Active value);

  // @@protoc_insertion_point(class_scope:caffe.GateRecurrent2dParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_horizontal();
  inline void clear_has_horizontal();
  inline void set_has_reverse();
  inline void clear_has_reverse();
  inline void set_has_active();
  inline void clear_has_active();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_output_;
  bool horizontal_;
  bool reverse_;
  int active_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static GateRecurrent2dParameter* default_instance_;
};
// -------------------------------------------------------------------

class LearnCRFParameter : public ::google::protobuf::Message {
 public:
  LearnCRFParameter();
  virtual ~LearnCRFParameter();

  LearnCRFParameter(const LearnCRFParameter& from);

  inline LearnCRFParameter& operator=(const LearnCRFParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LearnCRFParameter& default_instance();

  void Swap(LearnCRFParameter* other);

  // implements Message ----------------------------------------------

  LearnCRFParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LearnCRFParameter& from);
  void MergeFrom(const LearnCRFParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 kernel_size = 1;
  inline bool has_kernel_size() const;
  inline void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 1;
  inline ::google::protobuf::int32 kernel_size() const;
  inline void set_kernel_size(::google::protobuf::int32 value);

  // optional int32 dilation = 18 [default = 1];
  inline bool has_dilation() const;
  inline void clear_dilation();
  static const int kDilationFieldNumber = 18;
  inline ::google::protobuf::int32 dilation() const;
  inline void set_dilation(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.LearnCRFParameter)
 private:
  inline void set_has_kernel_size();
  inline void clear_has_kernel_size();
  inline void set_has_dilation();
  inline void clear_has_dilation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 kernel_size_;
  ::google::protobuf::int32 dilation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static LearnCRFParameter* default_instance_;
};
// -------------------------------------------------------------------

class TopInfo : public ::google::protobuf::Message {
 public:
  TopInfo();
  virtual ~TopInfo();

  TopInfo(const TopInfo& from);

  inline TopInfo& operator=(const TopInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopInfo& default_instance();

  void Swap(TopInfo* other);

  // implements Message ----------------------------------------------

  TopInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopInfo& from);
  void MergeFrom(const TopInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TopInfo_SrcType SrcType;
  static const SrcType IMAGE = TopInfo_SrcType_IMAGE;
  static const SrcType SPARSEPOINT = TopInfo_SrcType_SPARSEPOINT;
  static const SrcType NUMBER = TopInfo_SrcType_NUMBER;
  static const SrcType HEATMAP = TopInfo_SrcType_HEATMAP;
  static const SrcType DENSEPOINT = TopInfo_SrcType_DENSEPOINT;
  static const SrcType LANE = TopInfo_SrcType_LANE;
  static inline bool SrcType_IsValid(int value) {
    return TopInfo_SrcType_IsValid(value);
  }
  static const SrcType SrcType_MIN =
    TopInfo_SrcType_SrcType_MIN;
  static const SrcType SrcType_MAX =
    TopInfo_SrcType_SrcType_MAX;
  static const int SrcType_ARRAYSIZE =
    TopInfo_SrcType_SrcType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SrcType_descriptor() {
    return TopInfo_SrcType_descriptor();
  }
  static inline const ::std::string& SrcType_Name(SrcType value) {
    return TopInfo_SrcType_Name(value);
  }
  static inline bool SrcType_Parse(const ::std::string& name,
      SrcType* value) {
    return TopInfo_SrcType_Parse(name, value);
  }

  typedef TopInfo_ResizeType ResizeType;
  static const ResizeType LINEAR = TopInfo_ResizeType_LINEAR;
  static const ResizeType NEAREST = TopInfo_ResizeType_NEAREST;
  static inline bool ResizeType_IsValid(int value) {
    return TopInfo_ResizeType_IsValid(value);
  }
  static const ResizeType ResizeType_MIN =
    TopInfo_ResizeType_ResizeType_MIN;
  static const ResizeType ResizeType_MAX =
    TopInfo_ResizeType_ResizeType_MAX;
  static const int ResizeType_ARRAYSIZE =
    TopInfo_ResizeType_ResizeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResizeType_descriptor() {
    return TopInfo_ResizeType_descriptor();
  }
  static inline const ::std::string& ResizeType_Name(ResizeType value) {
    return TopInfo_ResizeType_Name(value);
  }
  static inline bool ResizeType_Parse(const ::std::string& name,
      ResizeType* value) {
    return TopInfo_ResizeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 channels = 1 [default = 1];
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 1;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // optional int32 width = 2;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // repeated float mean = 4;
  inline int mean_size() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 4;
  inline float mean(int index) const;
  inline void set_mean(int index, float value);
  inline void add_mean(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      mean() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_mean();

  // optional .caffe.TopInfo.ResizeType resize_type = 5 [default = NEAREST];
  inline bool has_resize_type() const;
  inline void clear_resize_type();
  static const int kResizeTypeFieldNumber = 5;
  inline ::caffe::TopInfo_ResizeType resize_type() const;
  inline void set_resize_type(::caffe::TopInfo_ResizeType value);

  // optional float data_scale = 6 [default = 1];
  inline bool has_data_scale() const;
  inline void clear_data_scale();
  static const int kDataScaleFieldNumber = 6;
  inline float data_scale() const;
  inline void set_data_scale(float value);

  // optional .caffe.TopInfo.SrcType src_type = 7 [default = IMAGE];
  inline bool has_src_type() const;
  inline void clear_src_type();
  static const int kSrcTypeFieldNumber = 7;
  inline ::caffe::TopInfo_SrcType src_type() const;
  inline void set_src_type(::caffe::TopInfo_SrcType value);

  // optional int32 radius = 8 [default = 0];
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 8;
  inline ::google::protobuf::int32 radius() const;
  inline void set_radius(::google::protobuf::int32 value);

  // optional float gamma_distrib_alpha = 9 [default = -1];
  inline bool has_gamma_distrib_alpha() const;
  inline void clear_gamma_distrib_alpha();
  static const int kGammaDistribAlphaFieldNumber = 9;
  inline float gamma_distrib_alpha() const;
  inline void set_gamma_distrib_alpha(float value);

  // optional float gamma_distrib_gamma = 10 [default = 0];
  inline bool has_gamma_distrib_gamma() const;
  inline void clear_gamma_distrib_gamma();
  static const int kGammaDistribGammaFieldNumber = 10;
  inline float gamma_distrib_gamma() const;
  inline void set_gamma_distrib_gamma(float value);

  // @@protoc_insertion_point(class_scope:caffe.TopInfo)
 private:
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_resize_type();
  inline void clear_has_resize_type();
  inline void set_has_data_scale();
  inline void clear_has_data_scale();
  inline void set_has_src_type();
  inline void clear_has_src_type();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_gamma_distrib_alpha();
  inline void clear_has_gamma_distrib_alpha();
  inline void set_has_gamma_distrib_gamma();
  inline void clear_has_gamma_distrib_gamma();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::RepeatedField< float > mean_;
  ::google::protobuf::int32 height_;
  int resize_type_;
  float data_scale_;
  int src_type_;
  ::google::protobuf::int32 radius_;
  float gamma_distrib_alpha_;
  float gamma_distrib_gamma_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TopInfo* default_instance_;
};
// -------------------------------------------------------------------

class SegmentDataParameter : public ::google::protobuf::Message {
 public:
  SegmentDataParameter();
  virtual ~SegmentDataParameter();

  SegmentDataParameter(const SegmentDataParameter& from);

  inline SegmentDataParameter& operator=(const SegmentDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SegmentDataParameter& default_instance();

  void Swap(SegmentDataParameter* other);

  // implements Message ----------------------------------------------

  SegmentDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SegmentDataParameter& from);
  void MergeFrom(const SegmentDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional string data_folder = 2 [default = ""];
  inline bool has_data_folder() const;
  inline void clear_data_folder();
  static const int kDataFolderFieldNumber = 2;
  inline const ::std::string& data_folder() const;
  inline void set_data_folder(const ::std::string& value);
  inline void set_data_folder(const char* value);
  inline void set_data_folder(const char* value, size_t size);
  inline ::std::string* mutable_data_folder();
  inline ::std::string* release_data_folder();
  inline void set_allocated_data_folder(::std::string* data_folder);

  // repeated .caffe.TopInfo topinfo = 3;
  inline int topinfo_size() const;
  inline void clear_topinfo();
  static const int kTopinfoFieldNumber = 3;
  inline const ::caffe::TopInfo& topinfo(int index) const;
  inline ::caffe::TopInfo* mutable_topinfo(int index);
  inline ::caffe::TopInfo* add_topinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::TopInfo >&
      topinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::TopInfo >*
      mutable_topinfo();

  // optional int32 batch_size = 4;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  inline ::google::protobuf::int32 batch_size() const;
  inline void set_batch_size(::google::protobuf::int32 value);

  // optional bool shuffle = 5 [default = true];
  inline bool has_shuffle() const;
  inline void clear_shuffle();
  static const int kShuffleFieldNumber = 5;
  inline bool shuffle() const;
  inline void set_shuffle(bool value);

  // optional bool use_distrib = 6 [default = false];
  inline bool has_use_distrib() const;
  inline void clear_use_distrib();
  static const int kUseDistribFieldNumber = 6;
  inline bool use_distrib() const;
  inline void set_use_distrib(bool value);

  // optional float distrib_angle = 7 [default = 0];
  inline bool has_distrib_angle() const;
  inline void clear_distrib_angle();
  static const int kDistribAngleFieldNumber = 7;
  inline float distrib_angle() const;
  inline void set_distrib_angle(float value);

  // optional float distrib_scale = 8 [default = 1];
  inline bool has_distrib_scale() const;
  inline void clear_distrib_scale();
  static const int kDistribScaleFieldNumber = 8;
  inline float distrib_scale() const;
  inline void set_distrib_scale(float value);

  // optional float distrib_x = 9 [default = 0];
  inline bool has_distrib_x() const;
  inline void clear_distrib_x();
  static const int kDistribXFieldNumber = 9;
  inline float distrib_x() const;
  inline void set_distrib_x(float value);

  // optional float distrib_y = 10 [default = 0];
  inline bool has_distrib_y() const;
  inline void clear_distrib_y();
  static const int kDistribYFieldNumber = 10;
  inline float distrib_y() const;
  inline void set_distrib_y(float value);

  // optional string source_splitflag = 11 [default = "||"];
  inline bool has_source_splitflag() const;
  inline void clear_source_splitflag();
  static const int kSourceSplitflagFieldNumber = 11;
  inline const ::std::string& source_splitflag() const;
  inline void set_source_splitflag(const ::std::string& value);
  inline void set_source_splitflag(const char* value);
  inline void set_source_splitflag(const char* value, size_t size);
  inline ::std::string* mutable_source_splitflag();
  inline ::std::string* release_source_splitflag();
  inline void set_allocated_source_splitflag(::std::string* source_splitflag);

  // optional bool use_flip = 12 [default = false];
  inline bool has_use_flip() const;
  inline void clear_use_flip();
  static const int kUseFlipFieldNumber = 12;
  inline bool use_flip() const;
  inline void set_use_flip(bool value);

  // @@protoc_insertion_point(class_scope:caffe.SegmentDataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_data_folder();
  inline void clear_has_data_folder();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();
  inline void set_has_use_distrib();
  inline void clear_has_use_distrib();
  inline void set_has_distrib_angle();
  inline void clear_has_distrib_angle();
  inline void set_has_distrib_scale();
  inline void clear_has_distrib_scale();
  inline void set_has_distrib_x();
  inline void clear_has_distrib_x();
  inline void set_has_distrib_y();
  inline void clear_has_distrib_y();
  inline void set_has_source_splitflag();
  inline void clear_has_source_splitflag();
  inline void set_has_use_flip();
  inline void clear_has_use_flip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* source_;
  ::std::string* data_folder_;
  ::google::protobuf::RepeatedPtrField< ::caffe::TopInfo > topinfo_;
  ::google::protobuf::int32 batch_size_;
  float distrib_angle_;
  bool shuffle_;
  bool use_distrib_;
  bool use_flip_;
  float distrib_scale_;
  float distrib_x_;
  float distrib_y_;
  ::std::string* source_splitflag_;
  static ::std::string* _default_source_splitflag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SegmentDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class TripletDataSubParameter : public ::google::protobuf::Message {
 public:
  TripletDataSubParameter();
  virtual ~TripletDataSubParameter();

  TripletDataSubParameter(const TripletDataSubParameter& from);

  inline TripletDataSubParameter& operator=(const TripletDataSubParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TripletDataSubParameter& default_instance();

  void Swap(TripletDataSubParameter* other);

  // implements Message ----------------------------------------------

  TripletDataSubParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TripletDataSubParameter& from);
  void MergeFrom(const TripletDataSubParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional string source_filename = 8;
  inline bool has_source_filename() const;
  inline void clear_source_filename();
  static const int kSourceFilenameFieldNumber = 8;
  inline const ::std::string& source_filename() const;
  inline void set_source_filename(const ::std::string& value);
  inline void set_source_filename(const char* value);
  inline void set_source_filename(const char* value, size_t size);
  inline ::std::string* mutable_source_filename();
  inline ::std::string* release_source_filename();
  inline void set_allocated_source_filename(::std::string* source_filename);

  // optional string source_landmark = 9;
  inline bool has_source_landmark() const;
  inline void clear_source_landmark();
  static const int kSourceLandmarkFieldNumber = 9;
  inline const ::std::string& source_landmark() const;
  inline void set_source_landmark(const ::std::string& value);
  inline void set_source_landmark(const char* value);
  inline void set_source_landmark(const char* value, size_t size);
  inline ::std::string* mutable_source_landmark();
  inline ::std::string* release_source_landmark();
  inline void set_allocated_source_landmark(::std::string* source_landmark);

  // optional string imgs_folder = 2;
  inline bool has_imgs_folder() const;
  inline void clear_imgs_folder();
  static const int kImgsFolderFieldNumber = 2;
  inline const ::std::string& imgs_folder() const;
  inline void set_imgs_folder(const ::std::string& value);
  inline void set_imgs_folder(const char* value);
  inline void set_imgs_folder(const char* value, size_t size);
  inline ::std::string* mutable_imgs_folder();
  inline ::std::string* release_imgs_folder();
  inline void set_allocated_imgs_folder(::std::string* imgs_folder);

  // optional int32 subjects_per_iter = 3 [default = 10];
  inline bool has_subjects_per_iter() const;
  inline void clear_subjects_per_iter();
  static const int kSubjectsPerIterFieldNumber = 3;
  inline ::google::protobuf::int32 subjects_per_iter() const;
  inline void set_subjects_per_iter(::google::protobuf::int32 value);

  // optional int32 samples_per_subject = 4 [default = 10];
  inline bool has_samples_per_subject() const;
  inline void clear_samples_per_subject();
  static const int kSamplesPerSubjectFieldNumber = 4;
  inline ::google::protobuf::int32 samples_per_subject() const;
  inline void set_samples_per_subject(::google::protobuf::int32 value);

  // optional int32 o3_subjects_per_iter = 5 [default = 0];
  inline bool has_o3_subjects_per_iter() const;
  inline void clear_o3_subjects_per_iter();
  static const int kO3SubjectsPerIterFieldNumber = 5;
  inline ::google::protobuf::int32 o3_subjects_per_iter() const;
  inline void set_o3_subjects_per_iter(::google::protobuf::int32 value);

  // optional int32 o3_samples_per_subject = 6 [default = 1];
  inline bool has_o3_samples_per_subject() const;
  inline void clear_o3_samples_per_subject();
  static const int kO3SamplesPerSubjectFieldNumber = 6;
  inline ::google::protobuf::int32 o3_samples_per_subject() const;
  inline void set_o3_samples_per_subject(::google::protobuf::int32 value);

  // optional int32 key_points_count = 10 [default = 0];
  inline bool has_key_points_count() const;
  inline void clear_key_points_count();
  static const int kKeyPointsCountFieldNumber = 10;
  inline ::google::protobuf::int32 key_points_count() const;
  inline void set_key_points_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.TripletDataSubParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_source_filename();
  inline void clear_has_source_filename();
  inline void set_has_source_landmark();
  inline void clear_has_source_landmark();
  inline void set_has_imgs_folder();
  inline void clear_has_imgs_folder();
  inline void set_has_subjects_per_iter();
  inline void clear_has_subjects_per_iter();
  inline void set_has_samples_per_subject();
  inline void clear_has_samples_per_subject();
  inline void set_has_o3_subjects_per_iter();
  inline void clear_has_o3_subjects_per_iter();
  inline void set_has_o3_samples_per_subject();
  inline void clear_has_o3_samples_per_subject();
  inline void set_has_key_points_count();
  inline void clear_has_key_points_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* source_;
  ::std::string* source_filename_;
  ::std::string* source_landmark_;
  ::std::string* imgs_folder_;
  ::google::protobuf::int32 subjects_per_iter_;
  ::google::protobuf::int32 samples_per_subject_;
  ::google::protobuf::int32 o3_subjects_per_iter_;
  ::google::protobuf::int32 o3_samples_per_subject_;
  ::google::protobuf::int32 key_points_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TripletDataSubParameter* default_instance_;
};
// -------------------------------------------------------------------

class TripletDataParameter : public ::google::protobuf::Message {
 public:
  TripletDataParameter();
  virtual ~TripletDataParameter();

  TripletDataParameter(const TripletDataParameter& from);

  inline TripletDataParameter& operator=(const TripletDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TripletDataParameter& default_instance();

  void Swap(TripletDataParameter* other);

  // implements Message ----------------------------------------------

  TripletDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TripletDataParameter& from);
  void MergeFrom(const TripletDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.TripletDataSubParameter train_sub_param = 1;
  inline bool has_train_sub_param() const;
  inline void clear_train_sub_param();
  static const int kTrainSubParamFieldNumber = 1;
  inline const ::caffe::TripletDataSubParameter& train_sub_param() const;
  inline ::caffe::TripletDataSubParameter* mutable_train_sub_param();
  inline ::caffe::TripletDataSubParameter* release_train_sub_param();
  inline void set_allocated_train_sub_param(::caffe::TripletDataSubParameter* train_sub_param);

  // optional .caffe.TripletDataSubParameter test_sub_param = 2;
  inline bool has_test_sub_param() const;
  inline void clear_test_sub_param();
  static const int kTestSubParamFieldNumber = 2;
  inline const ::caffe::TripletDataSubParameter& test_sub_param() const;
  inline ::caffe::TripletDataSubParameter* mutable_test_sub_param();
  inline ::caffe::TripletDataSubParameter* release_test_sub_param();
  inline void set_allocated_test_sub_param(::caffe::TripletDataSubParameter* test_sub_param);

  // optional int32 height = 3 [default = 40];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 4 [default = 40];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional bool is_color = 5 [default = true];
  inline bool has_is_color() const;
  inline void clear_is_color();
  static const int kIsColorFieldNumber = 5;
  inline bool is_color() const;
  inline void set_is_color(bool value);

  // optional bool flip = 6 [default = false];
  inline bool has_flip() const;
  inline void clear_flip();
  static const int kFlipFieldNumber = 6;
  inline bool flip() const;
  inline void set_flip(bool value);

  // optional .caffe.ImageInfo image_info = 8;
  inline bool has_image_info() const;
  inline void clear_image_info();
  static const int kImageInfoFieldNumber = 8;
  inline const ::caffe::ImageInfo& image_info() const;
  inline ::caffe::ImageInfo* mutable_image_info();
  inline ::caffe::ImageInfo* release_image_info();
  inline void set_allocated_image_info(::caffe::ImageInfo* image_info);

  // repeated .caffe.AffineImageParameter affine_image_param = 7;
  inline int affine_image_param_size() const;
  inline void clear_affine_image_param();
  static const int kAffineImageParamFieldNumber = 7;
  inline const ::caffe::AffineImageParameter& affine_image_param(int index) const;
  inline ::caffe::AffineImageParameter* mutable_affine_image_param(int index);
  inline ::caffe::AffineImageParameter* add_affine_image_param();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter >&
      affine_image_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter >*
      mutable_affine_image_param();

  // optional float meanvalue = 9 [default = 0];
  inline bool has_meanvalue() const;
  inline void clear_meanvalue();
  static const int kMeanvalueFieldNumber = 9;
  inline float meanvalue() const;
  inline void set_meanvalue(float value);

  // optional float datascale = 10 [default = 1];
  inline bool has_datascale() const;
  inline void clear_datascale();
  static const int kDatascaleFieldNumber = 10;
  inline float datascale() const;
  inline void set_datascale(float value);

  // @@protoc_insertion_point(class_scope:caffe.TripletDataParameter)
 private:
  inline void set_has_train_sub_param();
  inline void clear_has_train_sub_param();
  inline void set_has_test_sub_param();
  inline void clear_has_test_sub_param();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_is_color();
  inline void clear_has_is_color();
  inline void set_has_flip();
  inline void clear_has_flip();
  inline void set_has_image_info();
  inline void clear_has_image_info();
  inline void set_has_meanvalue();
  inline void clear_has_meanvalue();
  inline void set_has_datascale();
  inline void clear_has_datascale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::caffe::TripletDataSubParameter* train_sub_param_;
  ::caffe::TripletDataSubParameter* test_sub_param_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  bool is_color_;
  bool flip_;
  float meanvalue_;
  ::caffe::ImageInfo* image_info_;
  ::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter > affine_image_param_;
  float datascale_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TripletDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class FacerecImageDataParameter : public ::google::protobuf::Message {
 public:
  FacerecImageDataParameter();
  virtual ~FacerecImageDataParameter();

  FacerecImageDataParameter(const FacerecImageDataParameter& from);

  inline FacerecImageDataParameter& operator=(const FacerecImageDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FacerecImageDataParameter& default_instance();

  void Swap(FacerecImageDataParameter* other);

  // implements Message ----------------------------------------------

  FacerecImageDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FacerecImageDataParameter& from);
  void MergeFrom(const FacerecImageDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FacerecImageDataParameter_DataType DataType;
  static const DataType SINGLEPATCH = FacerecImageDataParameter_DataType_SINGLEPATCH;
  static const DataType MULTIPATCH = FacerecImageDataParameter_DataType_MULTIPATCH;
  static inline bool DataType_IsValid(int value) {
    return FacerecImageDataParameter_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    FacerecImageDataParameter_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    FacerecImageDataParameter_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    FacerecImageDataParameter_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return FacerecImageDataParameter_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return FacerecImageDataParameter_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return FacerecImageDataParameter_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional bool use_disturb = 14 [default = false];
  inline bool has_use_disturb() const;
  inline void clear_use_disturb();
  static const int kUseDisturbFieldNumber = 14;
  inline bool use_disturb() const;
  inline void set_use_disturb(bool value);

  // optional bool useflip = 15 [default = false];
  inline bool has_useflip() const;
  inline void clear_useflip();
  static const int kUseflipFieldNumber = 15;
  inline bool useflip() const;
  inline void set_useflip(bool value);

  // optional uint32 batch_size = 4;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  inline bool has_rand_skip() const;
  inline void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  inline ::google::protobuf::uint32 rand_skip() const;
  inline void set_rand_skip(::google::protobuf::uint32 value);

  // optional bool shuffle = 8 [default = false];
  inline bool has_shuffle() const;
  inline void clear_shuffle();
  static const int kShuffleFieldNumber = 8;
  inline bool shuffle() const;
  inline void set_shuffle(bool value);

  // optional bool mirror = 6 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional float mean_value = 3 [default = 0];
  inline bool has_mean_value() const;
  inline void clear_mean_value();
  static const int kMeanValueFieldNumber = 3;
  inline float mean_value() const;
  inline void set_mean_value(float value);

  // optional float data_scale = 29 [default = 0];
  inline bool has_data_scale() const;
  inline void clear_data_scale();
  static const int kDataScaleFieldNumber = 29;
  inline float data_scale() const;
  inline void set_data_scale(float value);

  // optional float rand_angle = 18 [default = 0];
  inline bool has_rand_angle() const;
  inline void clear_rand_angle();
  static const int kRandAngleFieldNumber = 18;
  inline float rand_angle() const;
  inline void set_rand_angle(float value);

  // optional float rand_scale = 19 [default = 0];
  inline bool has_rand_scale() const;
  inline void clear_rand_scale();
  static const int kRandScaleFieldNumber = 19;
  inline float rand_scale() const;
  inline void set_rand_scale(float value);

  // optional float rand_movex = 20 [default = 0];
  inline bool has_rand_movex() const;
  inline void clear_rand_movex();
  static const int kRandMovexFieldNumber = 20;
  inline float rand_movex() const;
  inline void set_rand_movex(float value);

  // optional float rand_movey = 21 [default = 0];
  inline bool has_rand_movey() const;
  inline void clear_rand_movey();
  static const int kRandMoveyFieldNumber = 21;
  inline float rand_movey() const;
  inline void set_rand_movey(float value);

  // optional uint32 select_num_per_instance = 23 [default = 0];
  inline bool has_select_num_per_instance() const;
  inline void clear_select_num_per_instance();
  static const int kSelectNumPerInstanceFieldNumber = 23;
  inline ::google::protobuf::uint32 select_num_per_instance() const;
  inline void set_select_num_per_instance(::google::protobuf::uint32 value);

  // optional uint32 select_oneinstance_num = 26 [default = 0];
  inline bool has_select_oneinstance_num() const;
  inline void clear_select_oneinstance_num();
  static const int kSelectOneinstanceNumFieldNumber = 26;
  inline ::google::protobuf::uint32 select_oneinstance_num() const;
  inline void set_select_oneinstance_num(::google::protobuf::uint32 value);

  // optional .caffe.FacerecImageDataParameter.DataType datatype = 24 [default = SINGLEPATCH];
  inline bool has_datatype() const;
  inline void clear_datatype();
  static const int kDatatypeFieldNumber = 24;
  inline ::caffe::FacerecImageDataParameter_DataType datatype() const;
  inline void set_datatype(::caffe::FacerecImageDataParameter_DataType value);

  // optional uint32 key_points_num = 25 [default = 0];
  inline bool has_key_points_num() const;
  inline void clear_key_points_num();
  static const int kKeyPointsNumFieldNumber = 25;
  inline ::google::protobuf::uint32 key_points_num() const;
  inline void set_key_points_num(::google::protobuf::uint32 value);

  // repeated .caffe.AffineImageParameter affine_param = 27;
  inline int affine_param_size() const;
  inline void clear_affine_param();
  static const int kAffineParamFieldNumber = 27;
  inline const ::caffe::AffineImageParameter& affine_param(int index) const;
  inline ::caffe::AffineImageParameter* mutable_affine_param(int index);
  inline ::caffe::AffineImageParameter* add_affine_param();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter >&
      affine_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter >*
      mutable_affine_param();

  // optional string data_folder = 28 [default = ""];
  inline bool has_data_folder() const;
  inline void clear_data_folder();
  static const int kDataFolderFieldNumber = 28;
  inline const ::std::string& data_folder() const;
  inline void set_data_folder(const ::std::string& value);
  inline void set_data_folder(const char* value);
  inline void set_data_folder(const char* value, size_t size);
  inline ::std::string* mutable_data_folder();
  inline ::std::string* release_data_folder();
  inline void set_allocated_data_folder(::std::string* data_folder);

  // @@protoc_insertion_point(class_scope:caffe.FacerecImageDataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_use_disturb();
  inline void clear_has_use_disturb();
  inline void set_has_useflip();
  inline void clear_has_useflip();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_mean_value();
  inline void clear_has_mean_value();
  inline void set_has_data_scale();
  inline void clear_has_data_scale();
  inline void set_has_rand_angle();
  inline void clear_has_rand_angle();
  inline void set_has_rand_scale();
  inline void clear_has_rand_scale();
  inline void set_has_rand_movex();
  inline void clear_has_rand_movex();
  inline void set_has_rand_movey();
  inline void clear_has_rand_movey();
  inline void set_has_select_num_per_instance();
  inline void clear_has_select_num_per_instance();
  inline void set_has_select_oneinstance_num();
  inline void clear_has_select_oneinstance_num();
  inline void set_has_datatype();
  inline void clear_has_datatype();
  inline void set_has_key_points_num();
  inline void clear_has_key_points_num();
  inline void set_has_data_folder();
  inline void clear_has_data_folder();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* source_;
  ::google::protobuf::uint32 batch_size_;
  bool use_disturb_;
  bool useflip_;
  bool shuffle_;
  bool mirror_;
  ::google::protobuf::uint32 rand_skip_;
  float mean_value_;
  float data_scale_;
  float rand_angle_;
  float rand_scale_;
  float rand_movex_;
  float rand_movey_;
  ::google::protobuf::uint32 select_num_per_instance_;
  ::google::protobuf::uint32 select_oneinstance_num_;
  int datatype_;
  ::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter > affine_param_;
  ::std::string* data_folder_;
  ::google::protobuf::uint32 key_points_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static FacerecImageDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class PadParameter : public ::google::protobuf::Message {
 public:
  PadParameter();
  virtual ~PadParameter();

  PadParameter(const PadParameter& from);

  inline PadParameter& operator=(const PadParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PadParameter& default_instance();

  void Swap(PadParameter* other);

  // implements Message ----------------------------------------------

  PadParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PadParameter& from);
  void MergeFrom(const PadParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pad_w = 1 [default = 0];
  inline bool has_pad_w() const;
  inline void clear_pad_w();
  static const int kPadWFieldNumber = 1;
  inline ::google::protobuf::uint32 pad_w() const;
  inline void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 2 [default = 0];
  inline bool has_pad_h() const;
  inline void clear_pad_h();
  static const int kPadHFieldNumber = 2;
  inline ::google::protobuf::uint32 pad_h() const;
  inline void set_pad_h(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.PadParameter)
 private:
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 pad_h_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static PadParameter* default_instance_;
};
// -------------------------------------------------------------------

class ImageInfo : public ::google::protobuf::Message {
 public:
  ImageInfo();
  virtual ~ImageInfo();

  ImageInfo(const ImageInfo& from);

  inline ImageInfo& operator=(const ImageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageInfo& default_instance();

  void Swap(ImageInfo* other);

  // implements Message ----------------------------------------------

  ImageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageInfo& from);
  void MergeFrom(const ImageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 height = 1 [default = 40];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 1;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 2 [default = 40];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional bool is_color = 3 [default = true];
  inline bool has_is_color() const;
  inline void clear_is_color();
  static const int kIsColorFieldNumber = 3;
  inline bool is_color() const;
  inline void set_is_color(bool value);

  // @@protoc_insertion_point(class_scope:caffe.ImageInfo)
 private:
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_is_color();
  inline void clear_has_is_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  bool is_color_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ImageInfo* default_instance_;
};
// -------------------------------------------------------------------

class AffineImageParameter : public ::google::protobuf::Message {
 public:
  AffineImageParameter();
  virtual ~AffineImageParameter();

  AffineImageParameter(const AffineImageParameter& from);

  inline AffineImageParameter& operator=(const AffineImageParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AffineImageParameter& default_instance();

  void Swap(AffineImageParameter* other);

  // implements Message ----------------------------------------------

  AffineImageParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AffineImageParameter& from);
  void MergeFrom(const AffineImageParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 center_ind = 1;
  inline int center_ind_size() const;
  inline void clear_center_ind();
  static const int kCenterIndFieldNumber = 1;
  inline ::google::protobuf::int32 center_ind(int index) const;
  inline void set_center_ind(int index, ::google::protobuf::int32 value);
  inline void add_center_ind(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      center_ind() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_center_ind();

  // optional .caffe.AffineImage_Norm_Mode norm_mode = 2 [default = RECT_LE_RE_LM_RM];
  inline bool has_norm_mode() const;
  inline void clear_norm_mode();
  static const int kNormModeFieldNumber = 2;
  inline ::caffe::AffineImage_Norm_Mode norm_mode() const;
  inline void set_norm_mode(::caffe::AffineImage_Norm_Mode value);

  // optional float norm_ratio = 3 [default = 0.5];
  inline bool has_norm_ratio() const;
  inline void clear_norm_ratio();
  static const int kNormRatioFieldNumber = 3;
  inline float norm_ratio() const;
  inline void set_norm_ratio(float value);

  // optional bool fill_type = 7 [default = true];
  inline bool has_fill_type() const;
  inline void clear_fill_type();
  static const int kFillTypeFieldNumber = 7;
  inline bool fill_type() const;
  inline void set_fill_type(bool value);

  // optional uint32 value = 8 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 8;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // optional .caffe.ImageInfo image_info = 9;
  inline bool has_image_info() const;
  inline void clear_image_info();
  static const int kImageInfoFieldNumber = 9;
  inline const ::caffe::ImageInfo& image_info() const;
  inline ::caffe::ImageInfo* mutable_image_info();
  inline ::caffe::ImageInfo* release_image_info();
  inline void set_allocated_image_info(::caffe::ImageInfo* image_info);

  // optional string mean_file = 10;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 10;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // optional float scale = 11;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 11;
  inline float scale() const;
  inline void set_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.AffineImageParameter)
 private:
  inline void set_has_norm_mode();
  inline void clear_has_norm_mode();
  inline void set_has_norm_ratio();
  inline void clear_has_norm_ratio();
  inline void set_has_fill_type();
  inline void clear_has_fill_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_image_info();
  inline void clear_has_image_info();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_scale();
  inline void clear_has_scale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > center_ind_;
  int norm_mode_;
  float norm_ratio_;
  bool fill_type_;
  ::google::protobuf::uint32 value_;
  ::caffe::ImageInfo* image_info_;
  ::std::string* mean_file_;
  float scale_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static AffineImageParameter* default_instance_;
};
// -------------------------------------------------------------------

class L2NormParameter : public ::google::protobuf::Message {
 public:
  L2NormParameter();
  virtual ~L2NormParameter();

  L2NormParameter(const L2NormParameter& from);

  inline L2NormParameter& operator=(const L2NormParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const L2NormParameter& default_instance();

  void Swap(L2NormParameter* other);

  // implements Message ----------------------------------------------

  L2NormParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const L2NormParameter& from);
  void MergeFrom(const L2NormParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float eps = 1 [default = 1e-08];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 1;
  inline float eps() const;
  inline void set_eps(float value);

  // @@protoc_insertion_point(class_scope:caffe.L2NormParameter)
 private:
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float eps_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static L2NormParameter* default_instance_;
};
// -------------------------------------------------------------------

class TripletLossParameter : public ::google::protobuf::Message {
 public:
  TripletLossParameter();
  virtual ~TripletLossParameter();

  TripletLossParameter(const TripletLossParameter& from);

  inline TripletLossParameter& operator=(const TripletLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TripletLossParameter& default_instance();

  void Swap(TripletLossParameter* other);

  // implements Message ----------------------------------------------

  TripletLossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TripletLossParameter& from);
  void MergeFrom(const TripletLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float margin = 1 [default = 1];
  inline bool has_margin() const;
  inline void clear_margin();
  static const int kMarginFieldNumber = 1;
  inline float margin() const;
  inline void set_margin(float value);

  // optional bool norm_diff = 2 [default = false];
  inline bool has_norm_diff() const;
  inline void clear_norm_diff();
  static const int kNormDiffFieldNumber = 2;
  inline bool norm_diff() const;
  inline void set_norm_diff(bool value);

  // optional bool sequencial_bottom = 3 [default = true];
  inline bool has_sequencial_bottom() const;
  inline void clear_sequencial_bottom();
  static const int kSequencialBottomFieldNumber = 3;
  inline bool sequencial_bottom() const;
  inline void set_sequencial_bottom(bool value);

  // optional bool use_cpu = 4 [default = false];
  inline bool has_use_cpu() const;
  inline void clear_use_cpu();
  static const int kUseCpuFieldNumber = 4;
  inline bool use_cpu() const;
  inline void set_use_cpu(bool value);

  // optional int32 step = 5 [default = 3];
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 5;
  inline ::google::protobuf::int32 step() const;
  inline void set_step(::google::protobuf::int32 value);

  // optional bool print_time = 6 [default = false];
  inline bool has_print_time() const;
  inline void clear_print_time();
  static const int kPrintTimeFieldNumber = 6;
  inline bool print_time() const;
  inline void set_print_time(bool value);

  // optional float ignore_hardest_ratio = 7 [default = -1];
  inline bool has_ignore_hardest_ratio() const;
  inline void clear_ignore_hardest_ratio();
  static const int kIgnoreHardestRatioFieldNumber = 7;
  inline float ignore_hardest_ratio() const;
  inline void set_ignore_hardest_ratio(float value);

  // optional float use_hard_sample = 8 [default = -1];
  inline bool has_use_hard_sample() const;
  inline void clear_use_hard_sample();
  static const int kUseHardSampleFieldNumber = 8;
  inline float use_hard_sample() const;
  inline void set_use_hard_sample(float value);

  // optional int32 active_ignorehardest_len = 9 [default = 4];
  inline bool has_active_ignorehardest_len() const;
  inline void clear_active_ignorehardest_len();
  static const int kActiveIgnorehardestLenFieldNumber = 9;
  inline ::google::protobuf::int32 active_ignorehardest_len() const;
  inline void set_active_ignorehardest_len(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.TripletLossParameter)
 private:
  inline void set_has_margin();
  inline void clear_has_margin();
  inline void set_has_norm_diff();
  inline void clear_has_norm_diff();
  inline void set_has_sequencial_bottom();
  inline void clear_has_sequencial_bottom();
  inline void set_has_use_cpu();
  inline void clear_has_use_cpu();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_print_time();
  inline void clear_has_print_time();
  inline void set_has_ignore_hardest_ratio();
  inline void clear_has_ignore_hardest_ratio();
  inline void set_has_use_hard_sample();
  inline void clear_has_use_hard_sample();
  inline void set_has_active_ignorehardest_len();
  inline void clear_has_active_ignorehardest_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float margin_;
  bool norm_diff_;
  bool sequencial_bottom_;
  bool use_cpu_;
  bool print_time_;
  ::google::protobuf::int32 step_;
  float ignore_hardest_ratio_;
  float use_hard_sample_;
  ::google::protobuf::int32 active_ignorehardest_len_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TripletLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class PairImageDataParameter : public ::google::protobuf::Message {
 public:
  PairImageDataParameter();
  virtual ~PairImageDataParameter();

  PairImageDataParameter(const PairImageDataParameter& from);

  inline PairImageDataParameter& operator=(const PairImageDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PairImageDataParameter& default_instance();

  void Swap(PairImageDataParameter* other);

  // implements Message ----------------------------------------------

  PairImageDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PairImageDataParameter& from);
  void MergeFrom(const PairImageDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PairImageDataParameter_DataType DataType;
  static const DataType SINGLEPATCH = PairImageDataParameter_DataType_SINGLEPATCH;
  static const DataType MULTIPATCH = PairImageDataParameter_DataType_MULTIPATCH;
  static inline bool DataType_IsValid(int value) {
    return PairImageDataParameter_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    PairImageDataParameter_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    PairImageDataParameter_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    PairImageDataParameter_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return PairImageDataParameter_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return PairImageDataParameter_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return PairImageDataParameter_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional bool use_disturb = 14 [default = false];
  inline bool has_use_disturb() const;
  inline void clear_use_disturb();
  static const int kUseDisturbFieldNumber = 14;
  inline bool use_disturb() const;
  inline void set_use_disturb(bool value);

  // optional bool useflip = 15 [default = false];
  inline bool has_useflip() const;
  inline void clear_useflip();
  static const int kUseflipFieldNumber = 15;
  inline bool useflip() const;
  inline void set_useflip(bool value);

  // optional uint32 batch_size = 4;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  inline bool has_rand_skip() const;
  inline void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  inline ::google::protobuf::uint32 rand_skip() const;
  inline void set_rand_skip(::google::protobuf::uint32 value);

  // optional bool shuffle = 8 [default = false];
  inline bool has_shuffle() const;
  inline void clear_shuffle();
  static const int kShuffleFieldNumber = 8;
  inline bool shuffle() const;
  inline void set_shuffle(bool value);

  // optional uint32 crop_size = 5 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // repeated uint32 resize_type = 2;
  inline int resize_type_size() const;
  inline void clear_resize_type();
  static const int kResizeTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 resize_type(int index) const;
  inline void set_resize_type(int index, ::google::protobuf::uint32 value);
  inline void add_resize_type(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      resize_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_resize_type();

  // repeated uint32 data_height = 9;
  inline int data_height_size() const;
  inline void clear_data_height();
  static const int kDataHeightFieldNumber = 9;
  inline ::google::protobuf::uint32 data_height(int index) const;
  inline void set_data_height(int index, ::google::protobuf::uint32 value);
  inline void add_data_height(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      data_height() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_data_height();

  // repeated uint32 data_width = 10;
  inline int data_width_size() const;
  inline void clear_data_width();
  static const int kDataWidthFieldNumber = 10;
  inline ::google::protobuf::uint32 data_width(int index) const;
  inline void set_data_width(int index, ::google::protobuf::uint32 value);
  inline void add_data_width(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      data_width() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_data_width();

  // repeated uint32 data_channels = 17;
  inline int data_channels_size() const;
  inline void clear_data_channels();
  static const int kDataChannelsFieldNumber = 17;
  inline ::google::protobuf::uint32 data_channels(int index) const;
  inline void set_data_channels(int index, ::google::protobuf::uint32 value);
  inline void add_data_channels(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      data_channels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_data_channels();

  // repeated float data_scale = 22;
  inline int data_scale_size() const;
  inline void clear_data_scale();
  static const int kDataScaleFieldNumber = 22;
  inline float data_scale(int index) const;
  inline void set_data_scale(int index, float value);
  inline void add_data_scale(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data_scale() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data_scale();

  // repeated string mean_file = 3;
  inline int mean_file_size() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  inline const ::std::string& mean_file(int index) const;
  inline ::std::string* mutable_mean_file(int index);
  inline void set_mean_file(int index, const ::std::string& value);
  inline void set_mean_file(int index, const char* value);
  inline void set_mean_file(int index, const char* value, size_t size);
  inline ::std::string* add_mean_file();
  inline void add_mean_file(const ::std::string& value);
  inline void add_mean_file(const char* value);
  inline void add_mean_file(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mean_file() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mean_file();

  // optional float rand_angle = 18 [default = 0];
  inline bool has_rand_angle() const;
  inline void clear_rand_angle();
  static const int kRandAngleFieldNumber = 18;
  inline float rand_angle() const;
  inline void set_rand_angle(float value);

  // optional float rand_scale = 19 [default = 0];
  inline bool has_rand_scale() const;
  inline void clear_rand_scale();
  static const int kRandScaleFieldNumber = 19;
  inline float rand_scale() const;
  inline void set_rand_scale(float value);

  // optional float rand_movex = 20 [default = 0];
  inline bool has_rand_movex() const;
  inline void clear_rand_movex();
  static const int kRandMovexFieldNumber = 20;
  inline float rand_movex() const;
  inline void set_rand_movex(float value);

  // optional float rand_movey = 21 [default = 0];
  inline bool has_rand_movey() const;
  inline void clear_rand_movey();
  static const int kRandMoveyFieldNumber = 21;
  inline float rand_movey() const;
  inline void set_rand_movey(float value);

  // optional uint32 select_num_per_instance = 23 [default = 0];
  inline bool has_select_num_per_instance() const;
  inline void clear_select_num_per_instance();
  static const int kSelectNumPerInstanceFieldNumber = 23;
  inline ::google::protobuf::uint32 select_num_per_instance() const;
  inline void set_select_num_per_instance(::google::protobuf::uint32 value);

  // optional uint32 select_oneinstance_num = 26 [default = 0];
  inline bool has_select_oneinstance_num() const;
  inline void clear_select_oneinstance_num();
  static const int kSelectOneinstanceNumFieldNumber = 26;
  inline ::google::protobuf::uint32 select_oneinstance_num() const;
  inline void set_select_oneinstance_num(::google::protobuf::uint32 value);

  // optional .caffe.PairImageDataParameter.DataType datatype = 24 [default = SINGLEPATCH];
  inline bool has_datatype() const;
  inline void clear_datatype();
  static const int kDatatypeFieldNumber = 24;
  inline ::caffe::PairImageDataParameter_DataType datatype() const;
  inline void set_datatype(::caffe::PairImageDataParameter_DataType value);

  // optional uint32 lmk_num = 25 [default = 0];
  inline bool has_lmk_num() const;
  inline void clear_lmk_num();
  static const int kLmkNumFieldNumber = 25;
  inline ::google::protobuf::uint32 lmk_num() const;
  inline void set_lmk_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.PairImageDataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_use_disturb();
  inline void clear_has_use_disturb();
  inline void set_has_useflip();
  inline void clear_has_useflip();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_rand_angle();
  inline void clear_has_rand_angle();
  inline void set_has_rand_scale();
  inline void clear_has_rand_scale();
  inline void set_has_rand_movex();
  inline void clear_has_rand_movex();
  inline void set_has_rand_movey();
  inline void clear_has_rand_movey();
  inline void set_has_select_num_per_instance();
  inline void clear_has_select_num_per_instance();
  inline void set_has_select_oneinstance_num();
  inline void clear_has_select_oneinstance_num();
  inline void set_has_datatype();
  inline void clear_has_datatype();
  inline void set_has_lmk_num();
  inline void clear_has_lmk_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* source_;
  ::google::protobuf::uint32 batch_size_;
  bool use_disturb_;
  bool useflip_;
  bool shuffle_;
  bool mirror_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::uint32 crop_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > resize_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > data_height_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > data_width_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > data_channels_;
  ::google::protobuf::RepeatedField< float > data_scale_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mean_file_;
  float rand_angle_;
  float rand_scale_;
  float rand_movex_;
  float rand_movey_;
  ::google::protobuf::uint32 select_num_per_instance_;
  ::google::protobuf::uint32 select_oneinstance_num_;
  int datatype_;
  ::google::protobuf::uint32 lmk_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static PairImageDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class DenseCRFParameter : public ::google::protobuf::Message {
 public:
  DenseCRFParameter();
  virtual ~DenseCRFParameter();

  DenseCRFParameter(const DenseCRFParameter& from);

  inline DenseCRFParameter& operator=(const DenseCRFParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DenseCRFParameter& default_instance();

  void Swap(DenseCRFParameter* other);

  // implements Message ----------------------------------------------

  DenseCRFParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DenseCRFParameter& from);
  void MergeFrom(const DenseCRFParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 max_iter = 1 [default = 10];
  inline bool has_max_iter() const;
  inline void clear_max_iter();
  static const int kMaxIterFieldNumber = 1;
  inline ::google::protobuf::int32 max_iter() const;
  inline void set_max_iter(::google::protobuf::int32 value);

  // repeated float pos_xy_std = 2;
  inline int pos_xy_std_size() const;
  inline void clear_pos_xy_std();
  static const int kPosXyStdFieldNumber = 2;
  inline float pos_xy_std(int index) const;
  inline void set_pos_xy_std(int index, float value);
  inline void add_pos_xy_std(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      pos_xy_std() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_pos_xy_std();

  // repeated float pos_w = 3;
  inline int pos_w_size() const;
  inline void clear_pos_w();
  static const int kPosWFieldNumber = 3;
  inline float pos_w(int index) const;
  inline void set_pos_w(int index, float value);
  inline void add_pos_w(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      pos_w() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_pos_w();

  // repeated float bi_xy_std = 4;
  inline int bi_xy_std_size() const;
  inline void clear_bi_xy_std();
  static const int kBiXyStdFieldNumber = 4;
  inline float bi_xy_std(int index) const;
  inline void set_bi_xy_std(int index, float value);
  inline void add_bi_xy_std(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      bi_xy_std() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_bi_xy_std();

  // repeated float bi_rgb_std = 5;
  inline int bi_rgb_std_size() const;
  inline void clear_bi_rgb_std();
  static const int kBiRgbStdFieldNumber = 5;
  inline float bi_rgb_std(int index) const;
  inline void set_bi_rgb_std(int index, float value);
  inline void add_bi_rgb_std(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      bi_rgb_std() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_bi_rgb_std();

  // repeated float bi_w = 6;
  inline int bi_w_size() const;
  inline void clear_bi_w();
  static const int kBiWFieldNumber = 6;
  inline float bi_w(int index) const;
  inline void set_bi_w(int index, float value);
  inline void add_bi_w(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      bi_w() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_bi_w();

  // optional bool output_probability = 7 [default = true];
  inline bool has_output_probability() const;
  inline void clear_output_probability();
  static const int kOutputProbabilityFieldNumber = 7;
  inline bool output_probability() const;
  inline void set_output_probability(bool value);

  // @@protoc_insertion_point(class_scope:caffe.DenseCRFParameter)
 private:
  inline void set_has_max_iter();
  inline void clear_has_max_iter();
  inline void set_has_output_probability();
  inline void clear_has_output_probability();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< float > pos_xy_std_;
  ::google::protobuf::RepeatedField< float > pos_w_;
  ::google::protobuf::RepeatedField< float > bi_xy_std_;
  ::google::protobuf::int32 max_iter_;
  bool output_probability_;
  ::google::protobuf::RepeatedField< float > bi_rgb_std_;
  ::google::protobuf::RepeatedField< float > bi_w_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static DenseCRFParameter* default_instance_;
};
// -------------------------------------------------------------------

class GateRecurrentParameter : public ::google::protobuf::Message {
 public:
  GateRecurrentParameter();
  virtual ~GateRecurrentParameter();

  GateRecurrentParameter(const GateRecurrentParameter& from);

  inline GateRecurrentParameter& operator=(const GateRecurrentParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateRecurrentParameter& default_instance();

  void Swap(GateRecurrentParameter* other);

  // implements Message ----------------------------------------------

  GateRecurrentParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateRecurrentParameter& from);
  void MergeFrom(const GateRecurrentParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GateRecurrentParameter_Active Active;
  static const Active LINEAR = GateRecurrentParameter_Active_LINEAR;
  static const Active SIGMOID = GateRecurrentParameter_Active_SIGMOID;
  static const Active RELU = GateRecurrentParameter_Active_RELU;
  static const Active TANH = GateRecurrentParameter_Active_TANH;
  static inline bool Active_IsValid(int value) {
    return GateRecurrentParameter_Active_IsValid(value);
  }
  static const Active Active_MIN =
    GateRecurrentParameter_Active_Active_MIN;
  static const Active Active_MAX =
    GateRecurrentParameter_Active_Active_MAX;
  static const int Active_ARRAYSIZE =
    GateRecurrentParameter_Active_Active_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Active_descriptor() {
    return GateRecurrentParameter_Active_descriptor();
  }
  static inline const ::std::string& Active_Name(Active value) {
    return GateRecurrentParameter_Active_Name(value);
  }
  static inline bool Active_Parse(const ::std::string& name,
      Active* value) {
    return GateRecurrentParameter_Active_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool use_bias = 2 [default = true];
  inline bool has_use_bias() const;
  inline void clear_use_bias();
  static const int kUseBiasFieldNumber = 2;
  inline bool use_bias() const;
  inline void set_use_bias(bool value);

  // optional bool use_wx = 3 [default = true];
  inline bool has_use_wx() const;
  inline void clear_use_wx();
  static const int kUseWxFieldNumber = 3;
  inline bool use_wx() const;
  inline void set_use_wx(bool value);

  // optional bool use_wh = 4 [default = true];
  inline bool has_use_wh() const;
  inline void clear_use_wh();
  static const int kUseWhFieldNumber = 4;
  inline bool use_wh() const;
  inline void set_use_wh(bool value);

  // optional .caffe.FillerParameter weight_filler = 7;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 7;
  inline const ::caffe::FillerParameter& weight_filler() const;
  inline ::caffe::FillerParameter* mutable_weight_filler();
  inline ::caffe::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 8;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 8;
  inline const ::caffe::FillerParameter& bias_filler() const;
  inline ::caffe::FillerParameter* mutable_bias_filler();
  inline ::caffe::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional bool horizontal = 16 [default = true];
  inline bool has_horizontal() const;
  inline void clear_horizontal();
  static const int kHorizontalFieldNumber = 16;
  inline bool horizontal() const;
  inline void set_horizontal(bool value);

  // optional bool reverse = 17 [default = false];
  inline bool has_reverse() const;
  inline void clear_reverse();
  static const int kReverseFieldNumber = 17;
  inline bool reverse() const;
  inline void set_reverse(bool value);

  // optional .caffe.GateRecurrentParameter.Active active = 18 [default = LINEAR];
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 18;
  inline ::caffe::GateRecurrentParameter_Active active() const;
  inline void set_active(::caffe::GateRecurrentParameter_Active value);

  // optional float bound_diff = 19 [default = -1];
  inline bool has_bound_diff() const;
  inline void clear_bound_diff();
  static const int kBoundDiffFieldNumber = 19;
  inline float bound_diff() const;
  inline void set_bound_diff(float value);

  // optional float restrict_w = 20 [default = -1];
  inline bool has_restrict_w() const;
  inline void clear_restrict_w();
  static const int kRestrictWFieldNumber = 20;
  inline float restrict_w() const;
  inline void set_restrict_w(float value);

  // optional float restrict_g = 21 [default = 1];
  inline bool has_restrict_g() const;
  inline void clear_restrict_g();
  static const int kRestrictGFieldNumber = 21;
  inline float restrict_g() const;
  inline void set_restrict_g(float value);

  // optional bool use_x_gate = 22 [default = true];
  inline bool has_use_x_gate() const;
  inline void clear_use_x_gate();
  static const int kUseXGateFieldNumber = 22;
  inline bool use_x_gate() const;
  inline void set_use_x_gate(bool value);

  // optional bool use_new_fix = 23 [default = true];
  inline bool has_use_new_fix() const;
  inline void clear_use_new_fix();
  static const int kUseNewFixFieldNumber = 23;
  inline bool use_new_fix() const;
  inline void set_use_new_fix(bool value);

  // optional bool slash = 24 [default = false];
  inline bool has_slash() const;
  inline void clear_slash();
  static const int kSlashFieldNumber = 24;
  inline bool slash() const;
  inline void set_slash(bool value);

  // @@protoc_insertion_point(class_scope:caffe.GateRecurrentParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_use_bias();
  inline void clear_has_use_bias();
  inline void set_has_use_wx();
  inline void clear_has_use_wx();
  inline void set_has_use_wh();
  inline void clear_has_use_wh();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_horizontal();
  inline void clear_has_horizontal();
  inline void set_has_reverse();
  inline void clear_has_reverse();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_bound_diff();
  inline void clear_has_bound_diff();
  inline void set_has_restrict_w();
  inline void clear_has_restrict_w();
  inline void set_has_restrict_g();
  inline void clear_has_restrict_g();
  inline void set_has_use_x_gate();
  inline void clear_has_use_x_gate();
  inline void set_has_use_new_fix();
  inline void clear_has_use_new_fix();
  inline void set_has_slash();
  inline void clear_has_slash();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_output_;
  bool use_bias_;
  bool use_wx_;
  bool use_wh_;
  bool horizontal_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  int active_;
  float bound_diff_;
  float restrict_w_;
  float restrict_g_;
  bool reverse_;
  bool use_x_gate_;
  bool use_new_fix_;
  bool slash_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static GateRecurrentParameter* default_instance_;
};
// -------------------------------------------------------------------

class GateLstmParameter : public ::google::protobuf::Message {
 public:
  GateLstmParameter();
  virtual ~GateLstmParameter();

  GateLstmParameter(const GateLstmParameter& from);

  inline GateLstmParameter& operator=(const GateLstmParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateLstmParameter& default_instance();

  void Swap(GateLstmParameter* other);

  // implements Message ----------------------------------------------

  GateLstmParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateLstmParameter& from);
  void MergeFrom(const GateLstmParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional .caffe.FillerParameter weight_filler = 3;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  inline const ::caffe::FillerParameter& weight_filler() const;
  inline ::caffe::FillerParameter* mutable_weight_filler();
  inline ::caffe::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 4;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 4;
  inline const ::caffe::FillerParameter& bias_filler() const;
  inline ::caffe::FillerParameter* mutable_bias_filler();
  inline ::caffe::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional bool horizontal = 5 [default = true];
  inline bool has_horizontal() const;
  inline void clear_horizontal();
  static const int kHorizontalFieldNumber = 5;
  inline bool horizontal() const;
  inline void set_horizontal(bool value);

  // optional bool reverse = 6 [default = false];
  inline bool has_reverse() const;
  inline void clear_reverse();
  static const int kReverseFieldNumber = 6;
  inline bool reverse() const;
  inline void set_reverse(bool value);

  // optional float restrict_w = 7 [default = -1];
  inline bool has_restrict_w() const;
  inline void clear_restrict_w();
  static const int kRestrictWFieldNumber = 7;
  inline float restrict_w() const;
  inline void set_restrict_w(float value);

  // optional bool printall_datadiff = 8 [default = false];
  inline bool has_printall_datadiff() const;
  inline void clear_printall_datadiff();
  static const int kPrintallDatadiffFieldNumber = 8;
  inline bool printall_datadiff() const;
  inline void set_printall_datadiff(bool value);

  // @@protoc_insertion_point(class_scope:caffe.GateLstmParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_horizontal();
  inline void clear_has_horizontal();
  inline void set_has_reverse();
  inline void clear_has_reverse();
  inline void set_has_restrict_w();
  inline void clear_has_restrict_w();
  inline void set_has_printall_datadiff();
  inline void clear_has_printall_datadiff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  bool bias_term_;
  bool horizontal_;
  bool reverse_;
  bool printall_datadiff_;
  float restrict_w_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static GateLstmParameter* default_instance_;
};
// -------------------------------------------------------------------

class HardSampleParameter : public ::google::protobuf::Message {
 public:
  HardSampleParameter();
  virtual ~HardSampleParameter();

  HardSampleParameter(const HardSampleParameter& from);

  inline HardSampleParameter& operator=(const HardSampleParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HardSampleParameter& default_instance();

  void Swap(HardSampleParameter* other);

  // implements Message ----------------------------------------------

  HardSampleParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HardSampleParameter& from);
  void MergeFrom(const HardSampleParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float pos_use_ratio = 1 [default = 0.5];
  inline bool has_pos_use_ratio() const;
  inline void clear_pos_use_ratio();
  static const int kPosUseRatioFieldNumber = 1;
  inline float pos_use_ratio() const;
  inline void set_pos_use_ratio(float value);

  // optional float neg_use_ratio = 8 [default = 0.5];
  inline bool has_neg_use_ratio() const;
  inline void clear_neg_use_ratio();
  static const int kNegUseRatioFieldNumber = 8;
  inline float neg_use_ratio() const;
  inline void set_neg_use_ratio(float value);

  // optional float pos_hard_ratio = 11 [default = 0.5];
  inline bool has_pos_hard_ratio() const;
  inline void clear_pos_hard_ratio();
  static const int kPosHardRatioFieldNumber = 11;
  inline float pos_hard_ratio() const;
  inline void set_pos_hard_ratio(float value);

  // optional float neg_hard_ratio = 12 [default = 0.5];
  inline bool has_neg_hard_ratio() const;
  inline void clear_neg_hard_ratio();
  static const int kNegHardRatioFieldNumber = 12;
  inline float neg_hard_ratio() const;
  inline void set_neg_hard_ratio(float value);

  // optional float neg_compare_pos_ratio = 2 [default = -1];
  inline bool has_neg_compare_pos_ratio() const;
  inline void clear_neg_compare_pos_ratio();
  static const int kNegComparePosRatioFieldNumber = 2;
  inline float neg_compare_pos_ratio() const;
  inline void set_neg_compare_pos_ratio(float value);

  // optional float pos_ignore_hardest_ratio = 3 [default = 0];
  inline bool has_pos_ignore_hardest_ratio() const;
  inline void clear_pos_ignore_hardest_ratio();
  static const int kPosIgnoreHardestRatioFieldNumber = 3;
  inline float pos_ignore_hardest_ratio() const;
  inline void set_pos_ignore_hardest_ratio(float value);

  // optional float neg_ignore_hardest_ratio = 4 [default = 0];
  inline bool has_neg_ignore_hardest_ratio() const;
  inline void clear_neg_ignore_hardest_ratio();
  static const int kNegIgnoreHardestRatioFieldNumber = 4;
  inline float neg_ignore_hardest_ratio() const;
  inline void set_neg_ignore_hardest_ratio(float value);

  // optional uint32 max_ignore_pos_hardest_num = 13 [default = 0];
  inline bool has_max_ignore_pos_hardest_num() const;
  inline void clear_max_ignore_pos_hardest_num();
  static const int kMaxIgnorePosHardestNumFieldNumber = 13;
  inline ::google::protobuf::uint32 max_ignore_pos_hardest_num() const;
  inline void set_max_ignore_pos_hardest_num(::google::protobuf::uint32 value);

  // optional uint32 max_ignore_neg_hardest_num = 14 [default = 0];
  inline bool has_max_ignore_neg_hardest_num() const;
  inline void clear_max_ignore_neg_hardest_num();
  static const int kMaxIgnoreNegHardestNumFieldNumber = 14;
  inline ::google::protobuf::uint32 max_ignore_neg_hardest_num() const;
  inline void set_max_ignore_neg_hardest_num(::google::protobuf::uint32 value);

  // optional uint32 neg_margin = 5 [default = 0];
  inline bool has_neg_margin() const;
  inline void clear_neg_margin();
  static const int kNegMarginFieldNumber = 5;
  inline ::google::protobuf::uint32 neg_margin() const;
  inline void set_neg_margin(::google::protobuf::uint32 value);

  // optional uint32 pos_margin = 6 [default = 0];
  inline bool has_pos_margin() const;
  inline void clear_pos_margin();
  static const int kPosMarginFieldNumber = 6;
  inline ::google::protobuf::uint32 pos_margin() const;
  inline void set_pos_margin(::google::protobuf::uint32 value);

  // optional bool use_hardsample = 7 [default = true];
  inline bool has_use_hardsample() const;
  inline void clear_use_hardsample();
  static const int kUseHardsampleFieldNumber = 7;
  inline bool use_hardsample() const;
  inline void set_use_hardsample(bool value);

  // optional uint32 min_neg_num = 9 [default = 0];
  inline bool has_min_neg_num() const;
  inline void clear_min_neg_num();
  static const int kMinNegNumFieldNumber = 9;
  inline ::google::protobuf::uint32 min_neg_num() const;
  inline void set_min_neg_num(::google::protobuf::uint32 value);

  // optional uint32 min_pos_num = 10 [default = 0];
  inline bool has_min_pos_num() const;
  inline void clear_min_pos_num();
  static const int kMinPosNumFieldNumber = 10;
  inline ::google::protobuf::uint32 min_pos_num() const;
  inline void set_min_pos_num(::google::protobuf::uint32 value);

  // optional bool print_info = 15 [default = false];
  inline bool has_print_info() const;
  inline void clear_print_info();
  static const int kPrintInfoFieldNumber = 15;
  inline bool print_info() const;
  inline void set_print_info(bool value);

  // @@protoc_insertion_point(class_scope:caffe.HardSampleParameter)
 private:
  inline void set_has_pos_use_ratio();
  inline void clear_has_pos_use_ratio();
  inline void set_has_neg_use_ratio();
  inline void clear_has_neg_use_ratio();
  inline void set_has_pos_hard_ratio();
  inline void clear_has_pos_hard_ratio();
  inline void set_has_neg_hard_ratio();
  inline void clear_has_neg_hard_ratio();
  inline void set_has_neg_compare_pos_ratio();
  inline void clear_has_neg_compare_pos_ratio();
  inline void set_has_pos_ignore_hardest_ratio();
  inline void clear_has_pos_ignore_hardest_ratio();
  inline void set_has_neg_ignore_hardest_ratio();
  inline void clear_has_neg_ignore_hardest_ratio();
  inline void set_has_max_ignore_pos_hardest_num();
  inline void clear_has_max_ignore_pos_hardest_num();
  inline void set_has_max_ignore_neg_hardest_num();
  inline void clear_has_max_ignore_neg_hardest_num();
  inline void set_has_neg_margin();
  inline void clear_has_neg_margin();
  inline void set_has_pos_margin();
  inline void clear_has_pos_margin();
  inline void set_has_use_hardsample();
  inline void clear_has_use_hardsample();
  inline void set_has_min_neg_num();
  inline void clear_has_min_neg_num();
  inline void set_has_min_pos_num();
  inline void clear_has_min_pos_num();
  inline void set_has_print_info();
  inline void clear_has_print_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float pos_use_ratio_;
  float neg_use_ratio_;
  float pos_hard_ratio_;
  float neg_hard_ratio_;
  float neg_compare_pos_ratio_;
  float pos_ignore_hardest_ratio_;
  float neg_ignore_hardest_ratio_;
  ::google::protobuf::uint32 max_ignore_pos_hardest_num_;
  ::google::protobuf::uint32 max_ignore_neg_hardest_num_;
  ::google::protobuf::uint32 neg_margin_;
  ::google::protobuf::uint32 pos_margin_;
  ::google::protobuf::uint32 min_neg_num_;
  bool use_hardsample_;
  bool print_info_;
  ::google::protobuf::uint32 min_pos_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static HardSampleParameter* default_instance_;
};
// -------------------------------------------------------------------

class SuperCropParameter : public ::google::protobuf::Message {
 public:
  SuperCropParameter();
  virtual ~SuperCropParameter();

  SuperCropParameter(const SuperCropParameter& from);

  inline SuperCropParameter& operator=(const SuperCropParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuperCropParameter& default_instance();

  void Swap(SuperCropParameter* other);

  // implements Message ----------------------------------------------

  SuperCropParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SuperCropParameter& from);
  void MergeFrom(const SuperCropParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SuperCropParameter_Type Type;
  static const Type CENTER = SuperCropParameter_Type_CENTER;
  static const Type RANDOM = SuperCropParameter_Type_RANDOM;
  static const Type ONEPOINT = SuperCropParameter_Type_ONEPOINT;
  static const Type TWOPOINT = SuperCropParameter_Type_TWOPOINT;
  static inline bool Type_IsValid(int value) {
    return SuperCropParameter_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SuperCropParameter_Type_Type_MIN;
  static const Type Type_MAX =
    SuperCropParameter_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SuperCropParameter_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SuperCropParameter_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SuperCropParameter_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SuperCropParameter_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.SuperCropParameter.Type type = 1 [default = CENTER];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::caffe::SuperCropParameter_Type type() const;
  inline void set_type(::caffe::SuperCropParameter_Type value);

  // optional uint32 crop_w = 2 [default = 0];
  inline bool has_crop_w() const;
  inline void clear_crop_w();
  static const int kCropWFieldNumber = 2;
  inline ::google::protobuf::uint32 crop_w() const;
  inline void set_crop_w(::google::protobuf::uint32 value);

  // optional uint32 crop_h = 3 [default = 0];
  inline bool has_crop_h() const;
  inline void clear_crop_h();
  static const int kCropHFieldNumber = 3;
  inline ::google::protobuf::uint32 crop_h() const;
  inline void set_crop_h(::google::protobuf::uint32 value);

  // optional bool print_info = 4 [default = false];
  inline bool has_print_info() const;
  inline void clear_print_info();
  static const int kPrintInfoFieldNumber = 4;
  inline bool print_info() const;
  inline void set_print_info(bool value);

  // optional uint32 point_fix_h = 5 [default = 0];
  inline bool has_point_fix_h() const;
  inline void clear_point_fix_h();
  static const int kPointFixHFieldNumber = 5;
  inline ::google::protobuf::uint32 point_fix_h() const;
  inline void set_point_fix_h(::google::protobuf::uint32 value);

  // optional uint32 point_fix_w = 6 [default = 0];
  inline bool has_point_fix_w() const;
  inline void clear_point_fix_w();
  static const int kPointFixWFieldNumber = 6;
  inline ::google::protobuf::uint32 point_fix_w() const;
  inline void set_point_fix_w(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.SuperCropParameter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_crop_w();
  inline void clear_has_crop_w();
  inline void set_has_crop_h();
  inline void clear_has_crop_h();
  inline void set_has_print_info();
  inline void clear_has_print_info();
  inline void set_has_point_fix_h();
  inline void clear_has_point_fix_h();
  inline void set_has_point_fix_w();
  inline void clear_has_point_fix_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 crop_w_;
  ::google::protobuf::uint32 crop_h_;
  bool print_info_;
  ::google::protobuf::uint32 point_fix_h_;
  ::google::protobuf::uint32 point_fix_w_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SuperCropParameter* default_instance_;
};
// -------------------------------------------------------------------

class MapMetricLossParameter : public ::google::protobuf::Message {
 public:
  MapMetricLossParameter();
  virtual ~MapMetricLossParameter();

  MapMetricLossParameter(const MapMetricLossParameter& from);

  inline MapMetricLossParameter& operator=(const MapMetricLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapMetricLossParameter& default_instance();

  void Swap(MapMetricLossParameter* other);

  // implements Message ----------------------------------------------

  MapMetricLossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapMetricLossParameter& from);
  void MergeFrom(const MapMetricLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MapMetricLossParameter_LossType LossType;
  static const LossType contrastive = MapMetricLossParameter_LossType_contrastive;
  static const LossType weakcontrastive = MapMetricLossParameter_LossType_weakcontrastive;
  static inline bool LossType_IsValid(int value) {
    return MapMetricLossParameter_LossType_IsValid(value);
  }
  static const LossType LossType_MIN =
    MapMetricLossParameter_LossType_LossType_MIN;
  static const LossType LossType_MAX =
    MapMetricLossParameter_LossType_LossType_MAX;
  static const int LossType_ARRAYSIZE =
    MapMetricLossParameter_LossType_LossType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LossType_descriptor() {
    return MapMetricLossParameter_LossType_descriptor();
  }
  static inline const ::std::string& LossType_Name(LossType value) {
    return MapMetricLossParameter_LossType_Name(value);
  }
  static inline bool LossType_Parse(const ::std::string& name,
      LossType* value) {
    return MapMetricLossParameter_LossType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.MapMetricLossParameter.LossType losstype = 1 [default = contrastive];
  inline bool has_losstype() const;
  inline void clear_losstype();
  static const int kLosstypeFieldNumber = 1;
  inline ::caffe::MapMetricLossParameter_LossType losstype() const;
  inline void set_losstype(::caffe::MapMetricLossParameter_LossType value);

  // optional float sim_ratio = 2 [default = 1];
  inline bool has_sim_ratio() const;
  inline void clear_sim_ratio();
  static const int kSimRatioFieldNumber = 2;
  inline float sim_ratio() const;
  inline void set_sim_ratio(float value);

  // optional float dis_ratio = 3 [default = 1];
  inline bool has_dis_ratio() const;
  inline void clear_dis_ratio();
  static const int kDisRatioFieldNumber = 3;
  inline float dis_ratio() const;
  inline void set_dis_ratio(float value);

  // optional float sim_margin = 5 [default = 0];
  inline bool has_sim_margin() const;
  inline void clear_sim_margin();
  static const int kSimMarginFieldNumber = 5;
  inline float sim_margin() const;
  inline void set_sim_margin(float value);

  // optional float dis_margin = 6 [default = 1];
  inline bool has_dis_margin() const;
  inline void clear_dis_margin();
  static const int kDisMarginFieldNumber = 6;
  inline float dis_margin() const;
  inline void set_dis_margin(float value);

  // @@protoc_insertion_point(class_scope:caffe.MapMetricLossParameter)
 private:
  inline void set_has_losstype();
  inline void clear_has_losstype();
  inline void set_has_sim_ratio();
  inline void clear_has_sim_ratio();
  inline void set_has_dis_ratio();
  inline void clear_has_dis_ratio();
  inline void set_has_sim_margin();
  inline void clear_has_sim_margin();
  inline void set_has_dis_margin();
  inline void clear_has_dis_margin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int losstype_;
  float sim_ratio_;
  float dis_ratio_;
  float sim_margin_;
  float dis_margin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static MapMetricLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class RegionconvolutionParameter : public ::google::protobuf::Message {
 public:
  RegionconvolutionParameter();
  virtual ~RegionconvolutionParameter();

  RegionconvolutionParameter(const RegionconvolutionParameter& from);

  inline RegionconvolutionParameter& operator=(const RegionconvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionconvolutionParameter& default_instance();

  void Swap(RegionconvolutionParameter* other);

  // implements Message ----------------------------------------------

  RegionconvolutionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionconvolutionParameter& from);
  void MergeFrom(const RegionconvolutionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional uint32 input_pad = 3 [default = 0];
  inline bool has_input_pad() const;
  inline void clear_input_pad();
  static const int kInputPadFieldNumber = 3;
  inline ::google::protobuf::uint32 input_pad() const;
  inline void set_input_pad(::google::protobuf::uint32 value);

  // optional uint32 input_pad_h = 9 [default = 0];
  inline bool has_input_pad_h() const;
  inline void clear_input_pad_h();
  static const int kInputPadHFieldNumber = 9;
  inline ::google::protobuf::uint32 input_pad_h() const;
  inline void set_input_pad_h(::google::protobuf::uint32 value);

  // optional uint32 input_pad_w = 10 [default = 0];
  inline bool has_input_pad_w() const;
  inline void clear_input_pad_w();
  static const int kInputPadWFieldNumber = 10;
  inline ::google::protobuf::uint32 input_pad_w() const;
  inline void set_input_pad_w(::google::protobuf::uint32 value);

  // optional uint32 input_patch_size = 4;
  inline bool has_input_patch_size() const;
  inline void clear_input_patch_size();
  static const int kInputPatchSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 input_patch_size() const;
  inline void set_input_patch_size(::google::protobuf::uint32 value);

  // optional uint32 input_patch_h = 11;
  inline bool has_input_patch_h() const;
  inline void clear_input_patch_h();
  static const int kInputPatchHFieldNumber = 11;
  inline ::google::protobuf::uint32 input_patch_h() const;
  inline void set_input_patch_h(::google::protobuf::uint32 value);

  // optional uint32 input_patch_w = 12;
  inline bool has_input_patch_w() const;
  inline void clear_input_patch_w();
  static const int kInputPatchWFieldNumber = 12;
  inline ::google::protobuf::uint32 input_patch_w() const;
  inline void set_input_patch_w(::google::protobuf::uint32 value);

  // optional uint32 input_stride = 6 [default = 1];
  inline bool has_input_stride() const;
  inline void clear_input_stride();
  static const int kInputStrideFieldNumber = 6;
  inline ::google::protobuf::uint32 input_stride() const;
  inline void set_input_stride(::google::protobuf::uint32 value);

  // optional uint32 input_stride_h = 13;
  inline bool has_input_stride_h() const;
  inline void clear_input_stride_h();
  static const int kInputStrideHFieldNumber = 13;
  inline ::google::protobuf::uint32 input_stride_h() const;
  inline void set_input_stride_h(::google::protobuf::uint32 value);

  // optional uint32 input_stride_w = 14;
  inline bool has_input_stride_w() const;
  inline void clear_input_stride_w();
  static const int kInputStrideWFieldNumber = 14;
  inline ::google::protobuf::uint32 input_stride_w() const;
  inline void set_input_stride_w(::google::protobuf::uint32 value);

  // optional uint32 output_pad = 16 [default = 0];
  inline bool has_output_pad() const;
  inline void clear_output_pad();
  static const int kOutputPadFieldNumber = 16;
  inline ::google::protobuf::uint32 output_pad() const;
  inline void set_output_pad(::google::protobuf::uint32 value);

  // optional uint32 output_pad_h = 17 [default = 0];
  inline bool has_output_pad_h() const;
  inline void clear_output_pad_h();
  static const int kOutputPadHFieldNumber = 17;
  inline ::google::protobuf::uint32 output_pad_h() const;
  inline void set_output_pad_h(::google::protobuf::uint32 value);

  // optional uint32 output_pad_w = 18 [default = 0];
  inline bool has_output_pad_w() const;
  inline void clear_output_pad_w();
  static const int kOutputPadWFieldNumber = 18;
  inline ::google::protobuf::uint32 output_pad_w() const;
  inline void set_output_pad_w(::google::protobuf::uint32 value);

  // optional uint32 output_patch_size = 19;
  inline bool has_output_patch_size() const;
  inline void clear_output_patch_size();
  static const int kOutputPatchSizeFieldNumber = 19;
  inline ::google::protobuf::uint32 output_patch_size() const;
  inline void set_output_patch_size(::google::protobuf::uint32 value);

  // optional uint32 output_patch_h = 20;
  inline bool has_output_patch_h() const;
  inline void clear_output_patch_h();
  static const int kOutputPatchHFieldNumber = 20;
  inline ::google::protobuf::uint32 output_patch_h() const;
  inline void set_output_patch_h(::google::protobuf::uint32 value);

  // optional uint32 output_patch_w = 21;
  inline bool has_output_patch_w() const;
  inline void clear_output_patch_w();
  static const int kOutputPatchWFieldNumber = 21;
  inline ::google::protobuf::uint32 output_patch_w() const;
  inline void set_output_patch_w(::google::protobuf::uint32 value);

  // optional uint32 output_stride = 22 [default = 1];
  inline bool has_output_stride() const;
  inline void clear_output_stride();
  static const int kOutputStrideFieldNumber = 22;
  inline ::google::protobuf::uint32 output_stride() const;
  inline void set_output_stride(::google::protobuf::uint32 value);

  // optional uint32 output_stride_h = 23;
  inline bool has_output_stride_h() const;
  inline void clear_output_stride_h();
  static const int kOutputStrideHFieldNumber = 23;
  inline ::google::protobuf::uint32 output_stride_h() const;
  inline void set_output_stride_h(::google::protobuf::uint32 value);

  // optional uint32 output_stride_w = 24;
  inline bool has_output_stride_w() const;
  inline void clear_output_stride_w();
  static const int kOutputStrideWFieldNumber = 24;
  inline ::google::protobuf::uint32 output_stride_w() const;
  inline void set_output_stride_w(::google::protobuf::uint32 value);

  // optional uint32 group = 5 [default = 1];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 5;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // optional .caffe.FillerParameter weight_filler = 7;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 7;
  inline const ::caffe::FillerParameter& weight_filler() const;
  inline ::caffe::FillerParameter* mutable_weight_filler();
  inline ::caffe::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 8;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 8;
  inline const ::caffe::FillerParameter& bias_filler() const;
  inline ::caffe::FillerParameter* mutable_bias_filler();
  inline ::caffe::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // @@protoc_insertion_point(class_scope:caffe.RegionconvolutionParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_input_pad();
  inline void clear_has_input_pad();
  inline void set_has_input_pad_h();
  inline void clear_has_input_pad_h();
  inline void set_has_input_pad_w();
  inline void clear_has_input_pad_w();
  inline void set_has_input_patch_size();
  inline void clear_has_input_patch_size();
  inline void set_has_input_patch_h();
  inline void clear_has_input_patch_h();
  inline void set_has_input_patch_w();
  inline void clear_has_input_patch_w();
  inline void set_has_input_stride();
  inline void clear_has_input_stride();
  inline void set_has_input_stride_h();
  inline void clear_has_input_stride_h();
  inline void set_has_input_stride_w();
  inline void clear_has_input_stride_w();
  inline void set_has_output_pad();
  inline void clear_has_output_pad();
  inline void set_has_output_pad_h();
  inline void clear_has_output_pad_h();
  inline void set_has_output_pad_w();
  inline void clear_has_output_pad_w();
  inline void set_has_output_patch_size();
  inline void clear_has_output_patch_size();
  inline void set_has_output_patch_h();
  inline void clear_has_output_patch_h();
  inline void set_has_output_patch_w();
  inline void clear_has_output_patch_w();
  inline void set_has_output_stride();
  inline void clear_has_output_stride();
  inline void set_has_output_stride_h();
  inline void clear_has_output_stride_h();
  inline void set_has_output_stride_w();
  inline void clear_has_output_stride_w();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_output_;
  bool bias_term_;
  ::google::protobuf::uint32 input_pad_;
  ::google::protobuf::uint32 input_pad_h_;
  ::google::protobuf::uint32 input_pad_w_;
  ::google::protobuf::uint32 input_patch_size_;
  ::google::protobuf::uint32 input_patch_h_;
  ::google::protobuf::uint32 input_patch_w_;
  ::google::protobuf::uint32 input_stride_;
  ::google::protobuf::uint32 input_stride_h_;
  ::google::protobuf::uint32 input_stride_w_;
  ::google::protobuf::uint32 output_pad_;
  ::google::protobuf::uint32 output_pad_h_;
  ::google::protobuf::uint32 output_pad_w_;
  ::google::protobuf::uint32 output_patch_size_;
  ::google::protobuf::uint32 output_patch_h_;
  ::google::protobuf::uint32 output_patch_w_;
  ::google::protobuf::uint32 output_stride_;
  ::google::protobuf::uint32 output_stride_h_;
  ::google::protobuf::uint32 output_stride_w_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 group_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static RegionconvolutionParameter* default_instance_;
};
// -------------------------------------------------------------------

class BNParameter : public ::google::protobuf::Message {
 public:
  BNParameter();
  virtual ~BNParameter();

  BNParameter(const BNParameter& from);

  inline BNParameter& operator=(const BNParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BNParameter& default_instance();

  void Swap(BNParameter* other);

  // implements Message ----------------------------------------------

  BNParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BNParameter& from);
  void MergeFrom(const BNParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter scale_filler = 1;
  inline bool has_scale_filler() const;
  inline void clear_scale_filler();
  static const int kScaleFillerFieldNumber = 1;
  inline const ::caffe::FillerParameter& scale_filler() const;
  inline ::caffe::FillerParameter* mutable_scale_filler();
  inline ::caffe::FillerParameter* release_scale_filler();
  inline void set_allocated_scale_filler(::caffe::FillerParameter* scale_filler);

  // optional .caffe.FillerParameter shift_filler = 2;
  inline bool has_shift_filler() const;
  inline void clear_shift_filler();
  static const int kShiftFillerFieldNumber = 2;
  inline const ::caffe::FillerParameter& shift_filler() const;
  inline ::caffe::FillerParameter* mutable_shift_filler();
  inline ::caffe::FillerParameter* release_shift_filler();
  inline void set_allocated_shift_filler(::caffe::FillerParameter* shift_filler);

  // @@protoc_insertion_point(class_scope:caffe.BNParameter)
 private:
  inline void set_has_scale_filler();
  inline void clear_has_scale_filler();
  inline void set_has_shift_filler();
  inline void clear_has_shift_filler();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::caffe::FillerParameter* scale_filler_;
  ::caffe::FillerParameter* shift_filler_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static BNParameter* default_instance_;
};
// -------------------------------------------------------------------

class ElementHingeLossParameter : public ::google::protobuf::Message {
 public:
  ElementHingeLossParameter();
  virtual ~ElementHingeLossParameter();

  ElementHingeLossParameter(const ElementHingeLossParameter& from);

  inline ElementHingeLossParameter& operator=(const ElementHingeLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementHingeLossParameter& default_instance();

  void Swap(ElementHingeLossParameter* other);

  // implements Message ----------------------------------------------

  ElementHingeLossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ElementHingeLossParameter& from);
  void MergeFrom(const ElementHingeLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ElementHingeLossParameter_Norm Norm;
  static const Norm L1 = ElementHingeLossParameter_Norm_L1;
  static const Norm L2 = ElementHingeLossParameter_Norm_L2;
  static inline bool Norm_IsValid(int value) {
    return ElementHingeLossParameter_Norm_IsValid(value);
  }
  static const Norm Norm_MIN =
    ElementHingeLossParameter_Norm_Norm_MIN;
  static const Norm Norm_MAX =
    ElementHingeLossParameter_Norm_Norm_MAX;
  static const int Norm_ARRAYSIZE =
    ElementHingeLossParameter_Norm_Norm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Norm_descriptor() {
    return ElementHingeLossParameter_Norm_descriptor();
  }
  static inline const ::std::string& Norm_Name(Norm value) {
    return ElementHingeLossParameter_Norm_Name(value);
  }
  static inline bool Norm_Parse(const ::std::string& name,
      Norm* value) {
    return ElementHingeLossParameter_Norm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.ElementHingeLossParameter.Norm norm = 1 [default = L2];
  inline bool has_norm() const;
  inline void clear_norm();
  static const int kNormFieldNumber = 1;
  inline ::caffe::ElementHingeLossParameter_Norm norm() const;
  inline void set_norm(::caffe::ElementHingeLossParameter_Norm value);

  // optional bool scale_loss = 2 [default = false];
  inline bool has_scale_loss() const;
  inline void clear_scale_loss();
  static const int kScaleLossFieldNumber = 2;
  inline bool scale_loss() const;
  inline void set_scale_loss(bool value);

  // @@protoc_insertion_point(class_scope:caffe.ElementHingeLossParameter)
 private:
  inline void set_has_norm();
  inline void clear_has_norm();
  inline void set_has_scale_loss();
  inline void clear_has_scale_loss();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int norm_;
  bool scale_loss_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ElementHingeLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class ManipulateLossParameter : public ::google::protobuf::Message {
 public:
  ManipulateLossParameter();
  virtual ~ManipulateLossParameter();

  ManipulateLossParameter(const ManipulateLossParameter& from);

  inline ManipulateLossParameter& operator=(const ManipulateLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ManipulateLossParameter& default_instance();

  void Swap(ManipulateLossParameter* other);

  // implements Message ----------------------------------------------

  ManipulateLossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ManipulateLossParameter& from);
  void MergeFrom(const ManipulateLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_balancesample = 1 [default = false];
  inline bool has_use_balancesample() const;
  inline void clear_use_balancesample();
  static const int kUseBalancesampleFieldNumber = 1;
  inline bool use_balancesample() const;
  inline void set_use_balancesample(bool value);

  // optional string ignore_value = 2 [default = ""];
  inline bool has_ignore_value() const;
  inline void clear_ignore_value();
  static const int kIgnoreValueFieldNumber = 2;
  inline const ::std::string& ignore_value() const;
  inline void set_ignore_value(const ::std::string& value);
  inline void set_ignore_value(const char* value);
  inline void set_ignore_value(const char* value, size_t size);
  inline ::std::string* mutable_ignore_value();
  inline ::std::string* release_ignore_value();
  inline void set_allocated_ignore_value(::std::string* ignore_value);

  // optional bool use_fullzeroignore = 3 [default = false];
  inline bool has_use_fullzeroignore() const;
  inline void clear_use_fullzeroignore();
  static const int kUseFullzeroignoreFieldNumber = 3;
  inline bool use_fullzeroignore() const;
  inline void set_use_fullzeroignore(bool value);

  // optional float bg_ratio = 4 [default = 1];
  inline bool has_bg_ratio() const;
  inline void clear_bg_ratio();
  static const int kBgRatioFieldNumber = 4;
  inline float bg_ratio() const;
  inline void set_bg_ratio(float value);

  // optional float uniform_droprate = 5 [default = 1];
  inline bool has_uniform_droprate() const;
  inline void clear_uniform_droprate();
  static const int kUniformDroprateFieldNumber = 5;
  inline float uniform_droprate() const;
  inline void set_uniform_droprate(float value);

  // optional bool use_perchannel_balance = 6 [default = false];
  inline bool has_use_perchannel_balance() const;
  inline void clear_use_perchannel_balance();
  static const int kUsePerchannelBalanceFieldNumber = 6;
  inline bool use_perchannel_balance() const;
  inline void set_use_perchannel_balance(bool value);

  // optional bool drop_singleclasschannel = 7 [default = false];
  inline bool has_drop_singleclasschannel() const;
  inline void clear_drop_singleclasschannel();
  static const int kDropSingleclasschannelFieldNumber = 7;
  inline bool drop_singleclasschannel() const;
  inline void set_drop_singleclasschannel(bool value);

  // optional bool print_info = 8 [default = false];
  inline bool has_print_info() const;
  inline void clear_print_info();
  static const int kPrintInfoFieldNumber = 8;
  inline bool print_info() const;
  inline void set_print_info(bool value);

  // optional bool use_unionchannel_balance = 9 [default = false];
  inline bool has_use_unionchannel_balance() const;
  inline void clear_use_unionchannel_balance();
  static const int kUseUnionchannelBalanceFieldNumber = 9;
  inline bool use_unionchannel_balance() const;
  inline void set_use_unionchannel_balance(bool value);

  // @@protoc_insertion_point(class_scope:caffe.ManipulateLossParameter)
 private:
  inline void set_has_use_balancesample();
  inline void clear_has_use_balancesample();
  inline void set_has_ignore_value();
  inline void clear_has_ignore_value();
  inline void set_has_use_fullzeroignore();
  inline void clear_has_use_fullzeroignore();
  inline void set_has_bg_ratio();
  inline void clear_has_bg_ratio();
  inline void set_has_uniform_droprate();
  inline void clear_has_uniform_droprate();
  inline void set_has_use_perchannel_balance();
  inline void clear_has_use_perchannel_balance();
  inline void set_has_drop_singleclasschannel();
  inline void clear_has_drop_singleclasschannel();
  inline void set_has_print_info();
  inline void clear_has_print_info();
  inline void set_has_use_unionchannel_balance();
  inline void clear_has_use_unionchannel_balance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ignore_value_;
  float bg_ratio_;
  bool use_balancesample_;
  bool use_fullzeroignore_;
  bool use_perchannel_balance_;
  bool drop_singleclasschannel_;
  float uniform_droprate_;
  bool print_info_;
  bool use_unionchannel_balance_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ManipulateLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class ResizeParameter : public ::google::protobuf::Message {
 public:
  ResizeParameter();
  virtual ~ResizeParameter();

  ResizeParameter(const ResizeParameter& from);

  inline ResizeParameter& operator=(const ResizeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResizeParameter& default_instance();

  void Swap(ResizeParameter* other);

  // implements Message ----------------------------------------------

  ResizeParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResizeParameter& from);
  void MergeFrom(const ResizeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ResizeParameter_Type Type;
  static const Type NEAREST = ResizeParameter_Type_NEAREST;
  static const Type BILINEAR = ResizeParameter_Type_BILINEAR;
  static inline bool Type_IsValid(int value) {
    return ResizeParameter_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ResizeParameter_Type_Type_MIN;
  static const Type Type_MAX =
    ResizeParameter_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ResizeParameter_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ResizeParameter_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ResizeParameter_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ResizeParameter_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float resize_ratio = 1 [default = 1];
  inline bool has_resize_ratio() const;
  inline void clear_resize_ratio();
  static const int kResizeRatioFieldNumber = 1;
  inline float resize_ratio() const;
  inline void set_resize_ratio(float value);

  // optional .caffe.ResizeParameter.Type type = 4 [default = NEAREST];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::caffe::ResizeParameter_Type type() const;
  inline void set_type(::caffe::ResizeParameter_Type value);

  // optional bool is_pyramid_test = 5 [default = false];
  inline bool has_is_pyramid_test() const;
  inline void clear_is_pyramid_test();
  static const int kIsPyramidTestFieldNumber = 5;
  inline bool is_pyramid_test() const;
  inline void set_is_pyramid_test(bool value);

  // optional float height = 6;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 6;
  inline float height() const;
  inline void set_height(float value);

  // optional float width = 7;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 7;
  inline float width() const;
  inline void set_width(float value);

  // optional float out_height_scale = 8;
  inline bool has_out_height_scale() const;
  inline void clear_out_height_scale();
  static const int kOutHeightScaleFieldNumber = 8;
  inline float out_height_scale() const;
  inline void set_out_height_scale(float value);

  // optional float out_width_scale = 9;
  inline bool has_out_width_scale() const;
  inline void clear_out_width_scale();
  static const int kOutWidthScaleFieldNumber = 9;
  inline float out_width_scale() const;
  inline void set_out_width_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.ResizeParameter)
 private:
  inline void set_has_resize_ratio();
  inline void clear_has_resize_ratio();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_is_pyramid_test();
  inline void clear_has_is_pyramid_test();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_out_height_scale();
  inline void clear_has_out_height_scale();
  inline void set_has_out_width_scale();
  inline void clear_has_out_width_scale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float resize_ratio_;
  int type_;
  bool is_pyramid_test_;
  float height_;
  float width_;
  float out_height_scale_;
  float out_width_scale_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ResizeParameter* default_instance_;
};
// -------------------------------------------------------------------

class TemporalLstmParameter : public ::google::protobuf::Message {
 public:
  TemporalLstmParameter();
  virtual ~TemporalLstmParameter();

  TemporalLstmParameter(const TemporalLstmParameter& from);

  inline TemporalLstmParameter& operator=(const TemporalLstmParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TemporalLstmParameter& default_instance();

  void Swap(TemporalLstmParameter* other);

  // implements Message ----------------------------------------------

  TemporalLstmParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TemporalLstmParameter& from);
  void MergeFrom(const TemporalLstmParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional .caffe.FillerParameter weight_filler = 7;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 7;
  inline const ::caffe::FillerParameter& weight_filler() const;
  inline ::caffe::FillerParameter* mutable_weight_filler();
  inline ::caffe::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 8;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 8;
  inline const ::caffe::FillerParameter& bias_filler() const;
  inline ::caffe::FillerParameter* mutable_bias_filler();
  inline ::caffe::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional bool horizontal = 16 [default = true];
  inline bool has_horizontal() const;
  inline void clear_horizontal();
  static const int kHorizontalFieldNumber = 16;
  inline bool horizontal() const;
  inline void set_horizontal(bool value);

  // optional bool reverse = 17 [default = false];
  inline bool has_reverse() const;
  inline void clear_reverse();
  static const int kReverseFieldNumber = 17;
  inline bool reverse() const;
  inline void set_reverse(bool value);

  // @@protoc_insertion_point(class_scope:caffe.TemporalLstmParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_horizontal();
  inline void clear_has_horizontal();
  inline void set_has_reverse();
  inline void clear_has_reverse();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::caffe::FillerParameter* weight_filler_;
  ::google::protobuf::uint32 num_output_;
  bool bias_term_;
  bool horizontal_;
  bool reverse_;
  ::caffe::FillerParameter* bias_filler_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TemporalLstmParameter* default_instance_;
};
// -------------------------------------------------------------------

class WeakGateLstmParameter : public ::google::protobuf::Message {
 public:
  WeakGateLstmParameter();
  virtual ~WeakGateLstmParameter();

  WeakGateLstmParameter(const WeakGateLstmParameter& from);

  inline WeakGateLstmParameter& operator=(const WeakGateLstmParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeakGateLstmParameter& default_instance();

  void Swap(WeakGateLstmParameter* other);

  // implements Message ----------------------------------------------

  WeakGateLstmParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeakGateLstmParameter& from);
  void MergeFrom(const WeakGateLstmParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional .caffe.FillerParameter weight_filler = 3;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  inline const ::caffe::FillerParameter& weight_filler() const;
  inline ::caffe::FillerParameter* mutable_weight_filler();
  inline ::caffe::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 4;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 4;
  inline const ::caffe::FillerParameter& bias_filler() const;
  inline ::caffe::FillerParameter* mutable_bias_filler();
  inline ::caffe::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional bool horizontal = 5 [default = true];
  inline bool has_horizontal() const;
  inline void clear_horizontal();
  static const int kHorizontalFieldNumber = 5;
  inline bool horizontal() const;
  inline void set_horizontal(bool value);

  // optional bool reverse = 6 [default = false];
  inline bool has_reverse() const;
  inline void clear_reverse();
  static const int kReverseFieldNumber = 6;
  inline bool reverse() const;
  inline void set_reverse(bool value);

  // optional float restrict_w = 7 [default = -1];
  inline bool has_restrict_w() const;
  inline void clear_restrict_w();
  static const int kRestrictWFieldNumber = 7;
  inline float restrict_w() const;
  inline void set_restrict_w(float value);

  // optional bool printall_datadiff = 8 [default = false];
  inline bool has_printall_datadiff() const;
  inline void clear_printall_datadiff();
  static const int kPrintallDatadiffFieldNumber = 8;
  inline bool printall_datadiff() const;
  inline void set_printall_datadiff(bool value);

  // @@protoc_insertion_point(class_scope:caffe.WeakGateLstmParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_horizontal();
  inline void clear_has_horizontal();
  inline void set_has_reverse();
  inline void clear_has_reverse();
  inline void set_has_restrict_w();
  inline void clear_has_restrict_w();
  inline void set_has_printall_datadiff();
  inline void clear_has_printall_datadiff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  bool bias_term_;
  bool horizontal_;
  bool reverse_;
  bool printall_datadiff_;
  float restrict_w_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static WeakGateLstmParameter* default_instance_;
};
// -------------------------------------------------------------------

class SpatialLstmParameter : public ::google::protobuf::Message {
 public:
  SpatialLstmParameter();
  virtual ~SpatialLstmParameter();

  SpatialLstmParameter(const SpatialLstmParameter& from);

  inline SpatialLstmParameter& operator=(const SpatialLstmParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpatialLstmParameter& default_instance();

  void Swap(SpatialLstmParameter* other);

  // implements Message ----------------------------------------------

  SpatialLstmParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpatialLstmParameter& from);
  void MergeFrom(const SpatialLstmParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional .caffe.FillerParameter weight_filler = 7;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 7;
  inline const ::caffe::FillerParameter& weight_filler() const;
  inline ::caffe::FillerParameter* mutable_weight_filler();
  inline ::caffe::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 8;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 8;
  inline const ::caffe::FillerParameter& bias_filler() const;
  inline ::caffe::FillerParameter* mutable_bias_filler();
  inline ::caffe::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional bool horizontal = 16 [default = true];
  inline bool has_horizontal() const;
  inline void clear_horizontal();
  static const int kHorizontalFieldNumber = 16;
  inline bool horizontal() const;
  inline void set_horizontal(bool value);

  // optional bool reverse = 17 [default = false];
  inline bool has_reverse() const;
  inline void clear_reverse();
  static const int kReverseFieldNumber = 17;
  inline bool reverse() const;
  inline void set_reverse(bool value);

  // @@protoc_insertion_point(class_scope:caffe.SpatialLstmParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_horizontal();
  inline void clear_has_horizontal();
  inline void set_has_reverse();
  inline void clear_has_reverse();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::caffe::FillerParameter* weight_filler_;
  ::google::protobuf::uint32 num_output_;
  bool bias_term_;
  bool horizontal_;
  bool reverse_;
  ::caffe::FillerParameter* bias_filler_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SpatialLstmParameter* default_instance_;
};
// -------------------------------------------------------------------

class SpatialRecurrentParameter : public ::google::protobuf::Message {
 public:
  SpatialRecurrentParameter();
  virtual ~SpatialRecurrentParameter();

  SpatialRecurrentParameter(const SpatialRecurrentParameter& from);

  inline SpatialRecurrentParameter& operator=(const SpatialRecurrentParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpatialRecurrentParameter& default_instance();

  void Swap(SpatialRecurrentParameter* other);

  // implements Message ----------------------------------------------

  SpatialRecurrentParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpatialRecurrentParameter& from);
  void MergeFrom(const SpatialRecurrentParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SpatialRecurrentParameter_Active Active;
  static const Active LINEAR = SpatialRecurrentParameter_Active_LINEAR;
  static const Active SIGMOID = SpatialRecurrentParameter_Active_SIGMOID;
  static const Active RELU = SpatialRecurrentParameter_Active_RELU;
  static const Active TANH = SpatialRecurrentParameter_Active_TANH;
  static inline bool Active_IsValid(int value) {
    return SpatialRecurrentParameter_Active_IsValid(value);
  }
  static const Active Active_MIN =
    SpatialRecurrentParameter_Active_Active_MIN;
  static const Active Active_MAX =
    SpatialRecurrentParameter_Active_Active_MAX;
  static const int Active_ARRAYSIZE =
    SpatialRecurrentParameter_Active_Active_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Active_descriptor() {
    return SpatialRecurrentParameter_Active_descriptor();
  }
  static inline const ::std::string& Active_Name(Active value) {
    return SpatialRecurrentParameter_Active_Name(value);
  }
  static inline bool Active_Parse(const ::std::string& name,
      Active* value) {
    return SpatialRecurrentParameter_Active_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional .caffe.FillerParameter weight_filler = 7;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 7;
  inline const ::caffe::FillerParameter& weight_filler() const;
  inline ::caffe::FillerParameter* mutable_weight_filler();
  inline ::caffe::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 8;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 8;
  inline const ::caffe::FillerParameter& bias_filler() const;
  inline ::caffe::FillerParameter* mutable_bias_filler();
  inline ::caffe::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional bool horizontal = 16 [default = true];
  inline bool has_horizontal() const;
  inline void clear_horizontal();
  static const int kHorizontalFieldNumber = 16;
  inline bool horizontal() const;
  inline void set_horizontal(bool value);

  // optional bool reverse = 17 [default = false];
  inline bool has_reverse() const;
  inline void clear_reverse();
  static const int kReverseFieldNumber = 17;
  inline bool reverse() const;
  inline void set_reverse(bool value);

  // optional .caffe.SpatialRecurrentParameter.Active active = 18 [default = LINEAR];
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 18;
  inline ::caffe::SpatialRecurrentParameter_Active active() const;
  inline void set_active(::caffe::SpatialRecurrentParameter_Active value);

  // optional float bound_diff = 19 [default = -1];
  inline bool has_bound_diff() const;
  inline void clear_bound_diff();
  static const int kBoundDiffFieldNumber = 19;
  inline float bound_diff() const;
  inline void set_bound_diff(float value);

  // optional float restrict_w = 20 [default = -1];
  inline bool has_restrict_w() const;
  inline void clear_restrict_w();
  static const int kRestrictWFieldNumber = 20;
  inline float restrict_w() const;
  inline void set_restrict_w(float value);

  // @@protoc_insertion_point(class_scope:caffe.SpatialRecurrentParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_horizontal();
  inline void clear_has_horizontal();
  inline void set_has_reverse();
  inline void clear_has_reverse();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_bound_diff();
  inline void clear_has_bound_diff();
  inline void set_has_restrict_w();
  inline void clear_has_restrict_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::caffe::FillerParameter* weight_filler_;
  ::google::protobuf::uint32 num_output_;
  bool bias_term_;
  bool horizontal_;
  bool reverse_;
  ::caffe::FillerParameter* bias_filler_;
  int active_;
  float bound_diff_;
  float restrict_w_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SpatialRecurrentParameter* default_instance_;
};
// -------------------------------------------------------------------

class ManipulatelabelParameter : public ::google::protobuf::Message {
 public:
  ManipulatelabelParameter();
  virtual ~ManipulatelabelParameter();

  ManipulatelabelParameter(const ManipulatelabelParameter& from);

  inline ManipulatelabelParameter& operator=(const ManipulatelabelParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ManipulatelabelParameter& default_instance();

  void Swap(ManipulatelabelParameter* other);

  // implements Message ----------------------------------------------

  ManipulatelabelParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ManipulatelabelParameter& from);
  void MergeFrom(const ManipulatelabelParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ManipulatelabelParameter_Type Type;
  static const Type EDGE = ManipulatelabelParameter_Type_EDGE;
  static const Type EXPAND = ManipulatelabelParameter_Type_EXPAND;
  static const Type DUPLICATE = ManipulatelabelParameter_Type_DUPLICATE;
  static const Type ANYONE = ManipulatelabelParameter_Type_ANYONE;
  static inline bool Type_IsValid(int value) {
    return ManipulatelabelParameter_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ManipulatelabelParameter_Type_Type_MIN;
  static const Type Type_MAX =
    ManipulatelabelParameter_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ManipulatelabelParameter_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ManipulatelabelParameter_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ManipulatelabelParameter_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ManipulatelabelParameter_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 maxlabel = 1 [default = 0];
  inline bool has_maxlabel() const;
  inline void clear_maxlabel();
  static const int kMaxlabelFieldNumber = 1;
  inline ::google::protobuf::uint32 maxlabel() const;
  inline void set_maxlabel(::google::protobuf::uint32 value);

  // optional .caffe.ManipulatelabelParameter.Type type = 2 [default = EXPAND];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::caffe::ManipulatelabelParameter_Type type() const;
  inline void set_type(::caffe::ManipulatelabelParameter_Type value);

  // optional bool horizontal = 3 [default = true];
  inline bool has_horizontal() const;
  inline void clear_horizontal();
  static const int kHorizontalFieldNumber = 3;
  inline bool horizontal() const;
  inline void set_horizontal(bool value);

  // optional uint32 edgerange = 4 [default = 1];
  inline bool has_edgerange() const;
  inline void clear_edgerange();
  static const int kEdgerangeFieldNumber = 4;
  inline ::google::protobuf::uint32 edgerange() const;
  inline void set_edgerange(::google::protobuf::uint32 value);

  // optional uint32 duplicate_dim = 5 [default = 1];
  inline bool has_duplicate_dim() const;
  inline void clear_duplicate_dim();
  static const int kDuplicateDimFieldNumber = 5;
  inline ::google::protobuf::uint32 duplicate_dim() const;
  inline void set_duplicate_dim(::google::protobuf::uint32 value);

  // optional uint32 duplicate_num = 6 [default = 1];
  inline bool has_duplicate_num() const;
  inline void clear_duplicate_num();
  static const int kDuplicateNumFieldNumber = 6;
  inline ::google::protobuf::uint32 duplicate_num() const;
  inline void set_duplicate_num(::google::protobuf::uint32 value);

  // optional bool reverse_label = 7 [default = false];
  inline bool has_reverse_label() const;
  inline void clear_reverse_label();
  static const int kReverseLabelFieldNumber = 7;
  inline bool reverse_label() const;
  inline void set_reverse_label(bool value);

  // optional bool both_edge_direction = 8 [default = false];
  inline bool has_both_edge_direction() const;
  inline void clear_both_edge_direction();
  static const int kBothEdgeDirectionFieldNumber = 8;
  inline bool both_edge_direction() const;
  inline void set_both_edge_direction(bool value);

  // optional bool duplicate_isanyone = 9 [default = false];
  inline bool has_duplicate_isanyone() const;
  inline void clear_duplicate_isanyone();
  static const int kDuplicateIsanyoneFieldNumber = 9;
  inline bool duplicate_isanyone() const;
  inline void set_duplicate_isanyone(bool value);

  // @@protoc_insertion_point(class_scope:caffe.ManipulatelabelParameter)
 private:
  inline void set_has_maxlabel();
  inline void clear_has_maxlabel();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_horizontal();
  inline void clear_has_horizontal();
  inline void set_has_edgerange();
  inline void clear_has_edgerange();
  inline void set_has_duplicate_dim();
  inline void clear_has_duplicate_dim();
  inline void set_has_duplicate_num();
  inline void clear_has_duplicate_num();
  inline void set_has_reverse_label();
  inline void clear_has_reverse_label();
  inline void set_has_both_edge_direction();
  inline void clear_has_both_edge_direction();
  inline void set_has_duplicate_isanyone();
  inline void clear_has_duplicate_isanyone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 maxlabel_;
  int type_;
  ::google::protobuf::uint32 edgerange_;
  ::google::protobuf::uint32 duplicate_dim_;
  ::google::protobuf::uint32 duplicate_num_;
  bool horizontal_;
  bool reverse_label_;
  bool both_edge_direction_;
  bool duplicate_isanyone_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ManipulatelabelParameter* default_instance_;
};
// -------------------------------------------------------------------

class ImageDataArbitraryParameter : public ::google::protobuf::Message {
 public:
  ImageDataArbitraryParameter();
  virtual ~ImageDataArbitraryParameter();

  ImageDataArbitraryParameter(const ImageDataArbitraryParameter& from);

  inline ImageDataArbitraryParameter& operator=(const ImageDataArbitraryParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageDataArbitraryParameter& default_instance();

  void Swap(ImageDataArbitraryParameter* other);

  // implements Message ----------------------------------------------

  ImageDataArbitraryParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageDataArbitraryParameter& from);
  void MergeFrom(const ImageDataArbitraryParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional bool use_disturb = 14 [default = false];
  inline bool has_use_disturb() const;
  inline void clear_use_disturb();
  static const int kUseDisturbFieldNumber = 14;
  inline bool use_disturb() const;
  inline void set_use_disturb(bool value);

  // optional bool useflip = 15 [default = false];
  inline bool has_useflip() const;
  inline void clear_useflip();
  static const int kUseflipFieldNumber = 15;
  inline bool useflip() const;
  inline void set_useflip(bool value);

  // optional uint32 batch_size = 4;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  inline bool has_rand_skip() const;
  inline void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  inline ::google::protobuf::uint32 rand_skip() const;
  inline void set_rand_skip(::google::protobuf::uint32 value);

  // optional bool shuffle = 8 [default = false];
  inline bool has_shuffle() const;
  inline void clear_shuffle();
  static const int kShuffleFieldNumber = 8;
  inline bool shuffle() const;
  inline void set_shuffle(bool value);

  // optional uint32 crop_size = 5 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // repeated uint32 resize_type = 2;
  inline int resize_type_size() const;
  inline void clear_resize_type();
  static const int kResizeTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 resize_type(int index) const;
  inline void set_resize_type(int index, ::google::protobuf::uint32 value);
  inline void add_resize_type(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      resize_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_resize_type();

  // repeated uint32 data_height = 9;
  inline int data_height_size() const;
  inline void clear_data_height();
  static const int kDataHeightFieldNumber = 9;
  inline ::google::protobuf::uint32 data_height(int index) const;
  inline void set_data_height(int index, ::google::protobuf::uint32 value);
  inline void add_data_height(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      data_height() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_data_height();

  // repeated uint32 data_width = 10;
  inline int data_width_size() const;
  inline void clear_data_width();
  static const int kDataWidthFieldNumber = 10;
  inline ::google::protobuf::uint32 data_width(int index) const;
  inline void set_data_width(int index, ::google::protobuf::uint32 value);
  inline void add_data_width(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      data_width() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_data_width();

  // repeated uint32 data_channels = 17;
  inline int data_channels_size() const;
  inline void clear_data_channels();
  static const int kDataChannelsFieldNumber = 17;
  inline ::google::protobuf::uint32 data_channels(int index) const;
  inline void set_data_channels(int index, ::google::protobuf::uint32 value);
  inline void add_data_channels(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      data_channels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_data_channels();

  // repeated float data_scale = 22;
  inline int data_scale_size() const;
  inline void clear_data_scale();
  static const int kDataScaleFieldNumber = 22;
  inline float data_scale(int index) const;
  inline void set_data_scale(int index, float value);
  inline void add_data_scale(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data_scale() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data_scale();

  // repeated string mean_file = 3;
  inline int mean_file_size() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  inline const ::std::string& mean_file(int index) const;
  inline ::std::string* mutable_mean_file(int index);
  inline void set_mean_file(int index, const ::std::string& value);
  inline void set_mean_file(int index, const char* value);
  inline void set_mean_file(int index, const char* value, size_t size);
  inline ::std::string* add_mean_file();
  inline void add_mean_file(const ::std::string& value);
  inline void add_mean_file(const char* value);
  inline void add_mean_file(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mean_file() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mean_file();

  // optional float rand_angle = 18 [default = 0];
  inline bool has_rand_angle() const;
  inline void clear_rand_angle();
  static const int kRandAngleFieldNumber = 18;
  inline float rand_angle() const;
  inline void set_rand_angle(float value);

  // optional float rand_scale = 19 [default = 0];
  inline bool has_rand_scale() const;
  inline void clear_rand_scale();
  static const int kRandScaleFieldNumber = 19;
  inline float rand_scale() const;
  inline void set_rand_scale(float value);

  // optional float rand_movex = 20 [default = 0];
  inline bool has_rand_movex() const;
  inline void clear_rand_movex();
  static const int kRandMovexFieldNumber = 20;
  inline float rand_movex() const;
  inline void set_rand_movex(float value);

  // optional float rand_movey = 21 [default = 0];
  inline bool has_rand_movey() const;
  inline void clear_rand_movey();
  static const int kRandMoveyFieldNumber = 21;
  inline float rand_movey() const;
  inline void set_rand_movey(float value);

  // @@protoc_insertion_point(class_scope:caffe.ImageDataArbitraryParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_use_disturb();
  inline void clear_has_use_disturb();
  inline void set_has_useflip();
  inline void clear_has_useflip();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_rand_angle();
  inline void clear_has_rand_angle();
  inline void set_has_rand_scale();
  inline void clear_has_rand_scale();
  inline void set_has_rand_movex();
  inline void clear_has_rand_movex();
  inline void set_has_rand_movey();
  inline void clear_has_rand_movey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* source_;
  ::google::protobuf::uint32 batch_size_;
  bool use_disturb_;
  bool useflip_;
  bool shuffle_;
  bool mirror_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::uint32 crop_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > resize_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > data_height_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > data_width_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > data_channels_;
  ::google::protobuf::RepeatedField< float > data_scale_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mean_file_;
  float rand_angle_;
  float rand_scale_;
  float rand_movex_;
  float rand_movey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ImageDataArbitraryParameter* default_instance_;
};
// -------------------------------------------------------------------

class ImageDataTextLabelParameter : public ::google::protobuf::Message {
 public:
  ImageDataTextLabelParameter();
  virtual ~ImageDataTextLabelParameter();

  ImageDataTextLabelParameter(const ImageDataTextLabelParameter& from);

  inline ImageDataTextLabelParameter& operator=(const ImageDataTextLabelParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageDataTextLabelParameter& default_instance();

  void Swap(ImageDataTextLabelParameter* other);

  // implements Message ----------------------------------------------

  ImageDataTextLabelParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageDataTextLabelParameter& from);
  void MergeFrom(const ImageDataTextLabelParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ImageDataTextLabelParameter_TextLabelType TextLabelType;
  static const TextLabelType NONE = ImageDataTextLabelParameter_TextLabelType_NONE;
  static const TextLabelType PERPIXEL = ImageDataTextLabelParameter_TextLabelType_PERPIXEL;
  static const TextLabelType PERPIXEL_SPARSE = ImageDataTextLabelParameter_TextLabelType_PERPIXEL_SPARSE;
  static const TextLabelType WHOLE = ImageDataTextLabelParameter_TextLabelType_WHOLE;
  static const TextLabelType PERPIXEL_HEATMAP = ImageDataTextLabelParameter_TextLabelType_PERPIXEL_HEATMAP;
  static const TextLabelType MAT = ImageDataTextLabelParameter_TextLabelType_MAT;
  static const TextLabelType TXT = ImageDataTextLabelParameter_TextLabelType_TXT;
  static inline bool TextLabelType_IsValid(int value) {
    return ImageDataTextLabelParameter_TextLabelType_IsValid(value);
  }
  static const TextLabelType TextLabelType_MIN =
    ImageDataTextLabelParameter_TextLabelType_TextLabelType_MIN;
  static const TextLabelType TextLabelType_MAX =
    ImageDataTextLabelParameter_TextLabelType_TextLabelType_MAX;
  static const int TextLabelType_ARRAYSIZE =
    ImageDataTextLabelParameter_TextLabelType_TextLabelType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TextLabelType_descriptor() {
    return ImageDataTextLabelParameter_TextLabelType_descriptor();
  }
  static inline const ::std::string& TextLabelType_Name(TextLabelType value) {
    return ImageDataTextLabelParameter_TextLabelType_Name(value);
  }
  static inline bool TextLabelType_Parse(const ::std::string& name,
      TextLabelType* value) {
    return ImageDataTextLabelParameter_TextLabelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional bool use_disturb = 14 [default = false];
  inline bool has_use_disturb() const;
  inline void clear_use_disturb();
  static const int kUseDisturbFieldNumber = 14;
  inline bool use_disturb() const;
  inline void set_use_disturb(bool value);

  // optional bool useflip = 15 [default = false];
  inline bool has_useflip() const;
  inline void clear_useflip();
  static const int kUseflipFieldNumber = 15;
  inline bool useflip() const;
  inline void set_useflip(bool value);

  // optional uint32 batch_size = 4;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  inline bool has_rand_skip() const;
  inline void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  inline ::google::protobuf::uint32 rand_skip() const;
  inline void set_rand_skip(::google::protobuf::uint32 value);

  // optional bool shuffle = 8 [default = false];
  inline bool has_shuffle() const;
  inline void clear_shuffle();
  static const int kShuffleFieldNumber = 8;
  inline bool shuffle() const;
  inline void set_shuffle(bool value);

  // optional uint32 crop_size = 5 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // repeated float mean_value = 30;
  inline int mean_value_size() const;
  inline void clear_mean_value();
  static const int kMeanValueFieldNumber = 30;
  inline float mean_value(int index) const;
  inline void set_mean_value(int index, float value);
  inline void add_mean_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // repeated uint32 resize_type = 2;
  inline int resize_type_size() const;
  inline void clear_resize_type();
  static const int kResizeTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 resize_type(int index) const;
  inline void set_resize_type(int index, ::google::protobuf::uint32 value);
  inline void add_resize_type(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      resize_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_resize_type();

  // repeated uint32 data_height = 9;
  inline int data_height_size() const;
  inline void clear_data_height();
  static const int kDataHeightFieldNumber = 9;
  inline ::google::protobuf::uint32 data_height(int index) const;
  inline void set_data_height(int index, ::google::protobuf::uint32 value);
  inline void add_data_height(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      data_height() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_data_height();

  // repeated uint32 data_width = 10;
  inline int data_width_size() const;
  inline void clear_data_width();
  static const int kDataWidthFieldNumber = 10;
  inline ::google::protobuf::uint32 data_width(int index) const;
  inline void set_data_width(int index, ::google::protobuf::uint32 value);
  inline void add_data_width(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      data_width() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_data_width();

  // repeated uint32 data_channels = 17;
  inline int data_channels_size() const;
  inline void clear_data_channels();
  static const int kDataChannelsFieldNumber = 17;
  inline ::google::protobuf::uint32 data_channels(int index) const;
  inline void set_data_channels(int index, ::google::protobuf::uint32 value);
  inline void add_data_channels(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      data_channels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_data_channels();

  // repeated float data_scale = 22;
  inline int data_scale_size() const;
  inline void clear_data_scale();
  static const int kDataScaleFieldNumber = 22;
  inline float data_scale(int index) const;
  inline void set_data_scale(int index, float value);
  inline void add_data_scale(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data_scale() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data_scale();

  // repeated string mean_file = 3;
  inline int mean_file_size() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  inline const ::std::string& mean_file(int index) const;
  inline ::std::string* mutable_mean_file(int index);
  inline void set_mean_file(int index, const ::std::string& value);
  inline void set_mean_file(int index, const char* value);
  inline void set_mean_file(int index, const char* value, size_t size);
  inline ::std::string* add_mean_file();
  inline void add_mean_file(const ::std::string& value);
  inline void add_mean_file(const char* value);
  inline void add_mean_file(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mean_file() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mean_file();

  // optional .caffe.ImageDataTextLabelParameter.TextLabelType textlabeltype = 23 [default = NONE];
  inline bool has_textlabeltype() const;
  inline void clear_textlabeltype();
  static const int kTextlabeltypeFieldNumber = 23;
  inline ::caffe::ImageDataTextLabelParameter_TextLabelType textlabeltype() const;
  inline void set_textlabeltype(::caffe::ImageDataTextLabelParameter_TextLabelType value);

  // optional uint32 textlabel_num_perpixel = 24 [default = 0];
  inline bool has_textlabel_num_perpixel() const;
  inline void clear_textlabel_num_perpixel();
  static const int kTextlabelNumPerpixelFieldNumber = 24;
  inline ::google::protobuf::uint32 textlabel_num_perpixel() const;
  inline void set_textlabel_num_perpixel(::google::protobuf::uint32 value);

  // optional bool save_topdata = 25 [default = false];
  inline bool has_save_topdata() const;
  inline void clear_save_topdata();
  static const int kSaveTopdataFieldNumber = 25;
  inline bool save_topdata() const;
  inline void set_save_topdata(bool value);

  // optional uint32 textlabel_channels = 26 [default = 0];
  inline bool has_textlabel_channels() const;
  inline void clear_textlabel_channels();
  static const int kTextlabelChannelsFieldNumber = 26;
  inline ::google::protobuf::uint32 textlabel_channels() const;
  inline void set_textlabel_channels(::google::protobuf::uint32 value);

  // optional uint32 textlabel_height = 28 [default = 0];
  inline bool has_textlabel_height() const;
  inline void clear_textlabel_height();
  static const int kTextlabelHeightFieldNumber = 28;
  inline ::google::protobuf::uint32 textlabel_height() const;
  inline void set_textlabel_height(::google::protobuf::uint32 value);

  // optional uint32 textlabel_width = 29 [default = 0];
  inline bool has_textlabel_width() const;
  inline void clear_textlabel_width();
  static const int kTextlabelWidthFieldNumber = 29;
  inline ::google::protobuf::uint32 textlabel_width() const;
  inline void set_textlabel_width(::google::protobuf::uint32 value);

  // optional float heatmap_radius = 27 [default = 0];
  inline bool has_heatmap_radius() const;
  inline void clear_heatmap_radius();
  static const int kHeatmapRadiusFieldNumber = 27;
  inline float heatmap_radius() const;
  inline void set_heatmap_radius(float value);

  // optional float rand_angle = 18 [default = 0];
  inline bool has_rand_angle() const;
  inline void clear_rand_angle();
  static const int kRandAngleFieldNumber = 18;
  inline float rand_angle() const;
  inline void set_rand_angle(float value);

  // optional float rand_scale = 19 [default = 0];
  inline bool has_rand_scale() const;
  inline void clear_rand_scale();
  static const int kRandScaleFieldNumber = 19;
  inline float rand_scale() const;
  inline void set_rand_scale(float value);

  // optional float rand_movex = 20 [default = 0];
  inline bool has_rand_movex() const;
  inline void clear_rand_movex();
  static const int kRandMovexFieldNumber = 20;
  inline float rand_movex() const;
  inline void set_rand_movex(float value);

  // optional float rand_movey = 21 [default = 0];
  inline bool has_rand_movey() const;
  inline void clear_rand_movey();
  static const int kRandMoveyFieldNumber = 21;
  inline float rand_movey() const;
  inline void set_rand_movey(float value);

  // @@protoc_insertion_point(class_scope:caffe.ImageDataTextLabelParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_use_disturb();
  inline void clear_has_use_disturb();
  inline void set_has_useflip();
  inline void clear_has_useflip();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_textlabeltype();
  inline void clear_has_textlabeltype();
  inline void set_has_textlabel_num_perpixel();
  inline void clear_has_textlabel_num_perpixel();
  inline void set_has_save_topdata();
  inline void clear_has_save_topdata();
  inline void set_has_textlabel_channels();
  inline void clear_has_textlabel_channels();
  inline void set_has_textlabel_height();
  inline void clear_has_textlabel_height();
  inline void set_has_textlabel_width();
  inline void clear_has_textlabel_width();
  inline void set_has_heatmap_radius();
  inline void clear_has_heatmap_radius();
  inline void set_has_rand_angle();
  inline void clear_has_rand_angle();
  inline void set_has_rand_scale();
  inline void clear_has_rand_scale();
  inline void set_has_rand_movex();
  inline void clear_has_rand_movex();
  inline void set_has_rand_movey();
  inline void clear_has_rand_movey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* source_;
  ::google::protobuf::uint32 batch_size_;
  bool use_disturb_;
  bool useflip_;
  bool shuffle_;
  bool mirror_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::uint32 crop_size_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > resize_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > data_height_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > data_width_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > data_channels_;
  ::google::protobuf::RepeatedField< float > data_scale_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mean_file_;
  int textlabeltype_;
  ::google::protobuf::uint32 textlabel_num_perpixel_;
  bool save_topdata_;
  ::google::protobuf::uint32 textlabel_channels_;
  ::google::protobuf::uint32 textlabel_height_;
  ::google::protobuf::uint32 textlabel_width_;
  float heatmap_radius_;
  float rand_angle_;
  float rand_scale_;
  float rand_movex_;
  float rand_movey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ImageDataTextLabelParameter* default_instance_;
};
// -------------------------------------------------------------------

class TransformationParameter : public ::google::protobuf::Message {
 public:
  TransformationParameter();
  virtual ~TransformationParameter();

  TransformationParameter(const TransformationParameter& from);

  inline TransformationParameter& operator=(const TransformationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformationParameter& default_instance();

  void Swap(TransformationParameter* other);

  // implements Message ----------------------------------------------

  TransformationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransformationParameter& from);
  void MergeFrom(const TransformationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float scale = 1 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 1;
  inline float scale() const;
  inline void set_scale(float value);

  // optional bool mirror = 2 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 2;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional uint32 crop_size = 3 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional string mean_file = 4;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 4;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // repeated float mean_value = 5;
  inline int mean_value_size() const;
  inline void clear_mean_value();
  static const int kMeanValueFieldNumber = 5;
  inline float mean_value(int index) const;
  inline void set_mean_value(int index, float value);
  inline void add_mean_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // optional bool force_color = 6 [default = false];
  inline bool has_force_color() const;
  inline void clear_force_color();
  static const int kForceColorFieldNumber = 6;
  inline bool force_color() const;
  inline void set_force_color(bool value);

  // optional bool force_gray = 7 [default = false];
  inline bool has_force_gray() const;
  inline void clear_force_gray();
  static const int kForceGrayFieldNumber = 7;
  inline bool force_gray() const;
  inline void set_force_gray(bool value);

  // @@protoc_insertion_point(class_scope:caffe.TransformationParameter)
 private:
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_force_color();
  inline void clear_has_force_color();
  inline void set_has_force_gray();
  inline void clear_has_force_gray();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float scale_;
  ::google::protobuf::uint32 crop_size_;
  ::std::string* mean_file_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  bool mirror_;
  bool force_color_;
  bool force_gray_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TransformationParameter* default_instance_;
};
// -------------------------------------------------------------------

class LossParameter : public ::google::protobuf::Message {
 public:
  LossParameter();
  virtual ~LossParameter();

  LossParameter(const LossParameter& from);

  inline LossParameter& operator=(const LossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LossParameter& default_instance();

  void Swap(LossParameter* other);

  // implements Message ----------------------------------------------

  LossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LossParameter& from);
  void MergeFrom(const LossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LossParameter_NormalizationMode NormalizationMode;
  static const NormalizationMode FULL = LossParameter_NormalizationMode_FULL;
  static const NormalizationMode VALID = LossParameter_NormalizationMode_VALID;
  static const NormalizationMode BATCH_SIZE = LossParameter_NormalizationMode_BATCH_SIZE;
  static const NormalizationMode NONE = LossParameter_NormalizationMode_NONE;
  static inline bool NormalizationMode_IsValid(int value) {
    return LossParameter_NormalizationMode_IsValid(value);
  }
  static const NormalizationMode NormalizationMode_MIN =
    LossParameter_NormalizationMode_NormalizationMode_MIN;
  static const NormalizationMode NormalizationMode_MAX =
    LossParameter_NormalizationMode_NormalizationMode_MAX;
  static const int NormalizationMode_ARRAYSIZE =
    LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormalizationMode_descriptor() {
    return LossParameter_NormalizationMode_descriptor();
  }
  static inline const ::std::string& NormalizationMode_Name(NormalizationMode value) {
    return LossParameter_NormalizationMode_Name(value);
  }
  static inline bool NormalizationMode_Parse(const ::std::string& name,
      NormalizationMode* value) {
    return LossParameter_NormalizationMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 ignore_label = 1;
  inline bool has_ignore_label() const;
  inline void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 1;
  inline ::google::protobuf::int32 ignore_label() const;
  inline void set_ignore_label(::google::protobuf::int32 value);

  // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  inline bool has_normalization() const;
  inline void clear_normalization();
  static const int kNormalizationFieldNumber = 3;
  inline ::caffe::LossParameter_NormalizationMode normalization() const;
  inline void set_normalization(::caffe::LossParameter_NormalizationMode value);

  // optional bool normalize = 2;
  inline bool has_normalize() const;
  inline void clear_normalize();
  static const int kNormalizeFieldNumber = 2;
  inline bool normalize() const;
  inline void set_normalize(bool value);

  // @@protoc_insertion_point(class_scope:caffe.LossParameter)
 private:
  inline void set_has_ignore_label();
  inline void clear_has_ignore_label();
  inline void set_has_normalization();
  inline void clear_has_normalization();
  inline void set_has_normalize();
  inline void clear_has_normalize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ignore_label_;
  int normalization_;
  bool normalize_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static LossParameter* default_instance_;
};
// -------------------------------------------------------------------

class AccuracyParameter : public ::google::protobuf::Message {
 public:
  AccuracyParameter();
  virtual ~AccuracyParameter();

  AccuracyParameter(const AccuracyParameter& from);

  inline AccuracyParameter& operator=(const AccuracyParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccuracyParameter& default_instance();

  void Swap(AccuracyParameter* other);

  // implements Message ----------------------------------------------

  AccuracyParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccuracyParameter& from);
  void MergeFrom(const AccuracyParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 top_k = 1 [default = 1];
  inline bool has_top_k() const;
  inline void clear_top_k();
  static const int kTopKFieldNumber = 1;
  inline ::google::protobuf::uint32 top_k() const;
  inline void set_top_k(::google::protobuf::uint32 value);

  // optional int32 axis = 2 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 ignore_label = 3;
  inline bool has_ignore_label() const;
  inline void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 3;
  inline ::google::protobuf::int32 ignore_label() const;
  inline void set_ignore_label(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.AccuracyParameter)
 private:
  inline void set_has_top_k();
  inline void clear_has_top_k();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_ignore_label();
  inline void clear_has_ignore_label();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 top_k_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 ignore_label_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static AccuracyParameter* default_instance_;
};
// -------------------------------------------------------------------

class ArgMaxParameter : public ::google::protobuf::Message {
 public:
  ArgMaxParameter();
  virtual ~ArgMaxParameter();

  ArgMaxParameter(const ArgMaxParameter& from);

  inline ArgMaxParameter& operator=(const ArgMaxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArgMaxParameter& default_instance();

  void Swap(ArgMaxParameter* other);

  // implements Message ----------------------------------------------

  ArgMaxParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArgMaxParameter& from);
  void MergeFrom(const ArgMaxParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool out_max_val = 1 [default = false];
  inline bool has_out_max_val() const;
  inline void clear_out_max_val();
  static const int kOutMaxValFieldNumber = 1;
  inline bool out_max_val() const;
  inline void set_out_max_val(bool value);

  // optional uint32 top_k = 2 [default = 1];
  inline bool has_top_k() const;
  inline void clear_top_k();
  static const int kTopKFieldNumber = 2;
  inline ::google::protobuf::uint32 top_k() const;
  inline void set_top_k(::google::protobuf::uint32 value);

  // optional int32 axis = 3;
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 3;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ArgMaxParameter)
 private:
  inline void set_has_out_max_val();
  inline void clear_has_out_max_val();
  inline void set_has_top_k();
  inline void clear_has_top_k();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool out_max_val_;
  ::google::protobuf::uint32 top_k_;
  ::google::protobuf::int32 axis_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ArgMaxParameter* default_instance_;
};
// -------------------------------------------------------------------

class ConcatParameter : public ::google::protobuf::Message {
 public:
  ConcatParameter();
  virtual ~ConcatParameter();

  ConcatParameter(const ConcatParameter& from);

  inline ConcatParameter& operator=(const ConcatParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcatParameter& default_instance();

  void Swap(ConcatParameter* other);

  // implements Message ----------------------------------------------

  ConcatParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConcatParameter& from);
  void MergeFrom(const ConcatParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 2 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional uint32 concat_dim = 1 [default = 1];
  inline bool has_concat_dim() const;
  inline void clear_concat_dim();
  static const int kConcatDimFieldNumber = 1;
  inline ::google::protobuf::uint32 concat_dim() const;
  inline void set_concat_dim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.ConcatParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_concat_dim();
  inline void clear_has_concat_dim();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 axis_;
  ::google::protobuf::uint32 concat_dim_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ConcatParameter* default_instance_;
};
// -------------------------------------------------------------------

class BatchNormParameter : public ::google::protobuf::Message {
 public:
  BatchNormParameter();
  virtual ~BatchNormParameter();

  BatchNormParameter(const BatchNormParameter& from);

  inline BatchNormParameter& operator=(const BatchNormParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchNormParameter& default_instance();

  void Swap(BatchNormParameter* other);

  // implements Message ----------------------------------------------

  BatchNormParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchNormParameter& from);
  void MergeFrom(const BatchNormParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_global_stats = 1;
  inline bool has_use_global_stats() const;
  inline void clear_use_global_stats();
  static const int kUseGlobalStatsFieldNumber = 1;
  inline bool use_global_stats() const;
  inline void set_use_global_stats(bool value);

  // optional float moving_average_fraction = 2 [default = 0.999];
  inline bool has_moving_average_fraction() const;
  inline void clear_moving_average_fraction();
  static const int kMovingAverageFractionFieldNumber = 2;
  inline float moving_average_fraction() const;
  inline void set_moving_average_fraction(float value);

  // optional float eps = 3 [default = 1e-05];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 3;
  inline float eps() const;
  inline void set_eps(float value);

  // @@protoc_insertion_point(class_scope:caffe.BatchNormParameter)
 private:
  inline void set_has_use_global_stats();
  inline void clear_has_use_global_stats();
  inline void set_has_moving_average_fraction();
  inline void clear_has_moving_average_fraction();
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool use_global_stats_;
  float moving_average_fraction_;
  float eps_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static BatchNormParameter* default_instance_;
};
// -------------------------------------------------------------------

class BiasParameter : public ::google::protobuf::Message {
 public:
  BiasParameter();
  virtual ~BiasParameter();

  BiasParameter(const BiasParameter& from);

  inline BiasParameter& operator=(const BiasParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BiasParameter& default_instance();

  void Swap(BiasParameter* other);

  // implements Message ----------------------------------------------

  BiasParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BiasParameter& from);
  void MergeFrom(const BiasParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 2 [default = 1];
  inline bool has_num_axes() const;
  inline void clear_num_axes();
  static const int kNumAxesFieldNumber = 2;
  inline ::google::protobuf::int32 num_axes() const;
  inline void set_num_axes(::google::protobuf::int32 value);

  // optional .caffe.FillerParameter filler = 3;
  inline bool has_filler() const;
  inline void clear_filler();
  static const int kFillerFieldNumber = 3;
  inline const ::caffe::FillerParameter& filler() const;
  inline ::caffe::FillerParameter* mutable_filler();
  inline ::caffe::FillerParameter* release_filler();
  inline void set_allocated_filler(::caffe::FillerParameter* filler);

  // @@protoc_insertion_point(class_scope:caffe.BiasParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_num_axes();
  inline void clear_has_num_axes();
  inline void set_has_filler();
  inline void clear_has_filler();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  ::caffe::FillerParameter* filler_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static BiasParameter* default_instance_;
};
// -------------------------------------------------------------------

class ContrastiveLossParameter : public ::google::protobuf::Message {
 public:
  ContrastiveLossParameter();
  virtual ~ContrastiveLossParameter();

  ContrastiveLossParameter(const ContrastiveLossParameter& from);

  inline ContrastiveLossParameter& operator=(const ContrastiveLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContrastiveLossParameter& default_instance();

  void Swap(ContrastiveLossParameter* other);

  // implements Message ----------------------------------------------

  ContrastiveLossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContrastiveLossParameter& from);
  void MergeFrom(const ContrastiveLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float margin = 1 [default = 1];
  inline bool has_margin() const;
  inline void clear_margin();
  static const int kMarginFieldNumber = 1;
  inline float margin() const;
  inline void set_margin(float value);

  // optional bool legacy_version = 2 [default = false];
  inline bool has_legacy_version() const;
  inline void clear_legacy_version();
  static const int kLegacyVersionFieldNumber = 2;
  inline bool legacy_version() const;
  inline void set_legacy_version(bool value);

  // @@protoc_insertion_point(class_scope:caffe.ContrastiveLossParameter)
 private:
  inline void set_has_margin();
  inline void clear_has_margin();
  inline void set_has_legacy_version();
  inline void clear_has_legacy_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float margin_;
  bool legacy_version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ContrastiveLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class ConvolutionParameter : public ::google::protobuf::Message {
 public:
  ConvolutionParameter();
  virtual ~ConvolutionParameter();

  ConvolutionParameter(const ConvolutionParameter& from);

  inline ConvolutionParameter& operator=(const ConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionParameter& default_instance();

  void Swap(ConvolutionParameter* other);

  // implements Message ----------------------------------------------

  ConvolutionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConvolutionParameter& from);
  void MergeFrom(const ConvolutionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ConvolutionParameter_Engine Engine;
  static const Engine DEFAULT = ConvolutionParameter_Engine_DEFAULT;
  static const Engine CAFFE = ConvolutionParameter_Engine_CAFFE;
  static const Engine CUDNN = ConvolutionParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ConvolutionParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ConvolutionParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ConvolutionParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ConvolutionParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ConvolutionParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ConvolutionParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ConvolutionParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // repeated uint32 pad = 3;
  inline int pad_size() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 3;
  inline ::google::protobuf::uint32 pad(int index) const;
  inline void set_pad(int index, ::google::protobuf::uint32 value);
  inline void add_pad(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pad() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pad();

  // repeated uint32 kernel_size = 4;
  inline int kernel_size_size() const;
  inline void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 kernel_size(int index) const;
  inline void set_kernel_size(int index, ::google::protobuf::uint32 value);
  inline void add_kernel_size(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kernel_size() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kernel_size();

  // repeated uint32 stride = 6;
  inline int stride_size() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 6;
  inline ::google::protobuf::uint32 stride(int index) const;
  inline void set_stride(int index, ::google::protobuf::uint32 value);
  inline void add_stride(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stride() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stride();

  // repeated uint32 dilation = 18;
  inline int dilation_size() const;
  inline void clear_dilation();
  static const int kDilationFieldNumber = 18;
  inline ::google::protobuf::uint32 dilation(int index) const;
  inline void set_dilation(int index, ::google::protobuf::uint32 value);
  inline void add_dilation(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dilation() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dilation();

  // optional uint32 pad_h = 9 [default = 0];
  inline bool has_pad_h() const;
  inline void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  inline ::google::protobuf::uint32 pad_h() const;
  inline void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  inline bool has_pad_w() const;
  inline void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  inline ::google::protobuf::uint32 pad_w() const;
  inline void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 11;
  inline bool has_kernel_h() const;
  inline void clear_kernel_h();
  static const int kKernelHFieldNumber = 11;
  inline ::google::protobuf::uint32 kernel_h() const;
  inline void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 12;
  inline bool has_kernel_w() const;
  inline void clear_kernel_w();
  static const int kKernelWFieldNumber = 12;
  inline ::google::protobuf::uint32 kernel_w() const;
  inline void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 13;
  inline bool has_stride_h() const;
  inline void clear_stride_h();
  static const int kStrideHFieldNumber = 13;
  inline ::google::protobuf::uint32 stride_h() const;
  inline void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 14;
  inline bool has_stride_w() const;
  inline void clear_stride_w();
  static const int kStrideWFieldNumber = 14;
  inline ::google::protobuf::uint32 stride_w() const;
  inline void set_stride_w(::google::protobuf::uint32 value);

  // optional uint32 group = 5 [default = 1];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 5;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // optional .caffe.FillerParameter weight_filler = 7;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 7;
  inline const ::caffe::FillerParameter& weight_filler() const;
  inline ::caffe::FillerParameter* mutable_weight_filler();
  inline ::caffe::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 8;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 8;
  inline const ::caffe::FillerParameter& bias_filler() const;
  inline ::caffe::FillerParameter* mutable_bias_filler();
  inline ::caffe::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 15;
  inline ::caffe::ConvolutionParameter_Engine engine() const;
  inline void set_engine(::caffe::ConvolutionParameter_Engine value);

  // optional int32 axis = 16 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 16;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional bool force_nd_im2col = 17 [default = false];
  inline bool has_force_nd_im2col() const;
  inline void clear_force_nd_im2col();
  static const int kForceNdIm2ColFieldNumber = 17;
  inline bool force_nd_im2col() const;
  inline void set_force_nd_im2col(bool value);

  // @@protoc_insertion_point(class_scope:caffe.ConvolutionParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_kernel_h();
  inline void clear_has_kernel_h();
  inline void set_has_kernel_w();
  inline void clear_has_kernel_w();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_force_nd_im2col();
  inline void clear_has_force_nd_im2col();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pad_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kernel_size_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stride_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dilation_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  bool bias_term_;
  bool force_nd_im2col_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  ::caffe::FillerParameter* weight_filler_;
  ::google::protobuf::uint32 group_;
  int engine_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::int32 axis_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ConvolutionParameter* default_instance_;
};
// -------------------------------------------------------------------

class CropParameter : public ::google::protobuf::Message {
 public:
  CropParameter();
  virtual ~CropParameter();

  CropParameter(const CropParameter& from);

  inline CropParameter& operator=(const CropParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CropParameter& default_instance();

  void Swap(CropParameter* other);

  // implements Message ----------------------------------------------

  CropParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CropParameter& from);
  void MergeFrom(const CropParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 2];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // repeated uint32 offset = 2;
  inline int offset_size() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::uint32 offset(int index) const;
  inline void set_offset(int index, ::google::protobuf::uint32 value);
  inline void add_offset(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      offset() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_offset();

  // @@protoc_insertion_point(class_scope:caffe.CropParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > offset_;
  ::google::protobuf::int32 axis_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static CropParameter* default_instance_;
};
// -------------------------------------------------------------------

class DataParameter : public ::google::protobuf::Message {
 public:
  DataParameter();
  virtual ~DataParameter();

  DataParameter(const DataParameter& from);

  inline DataParameter& operator=(const DataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataParameter& default_instance();

  void Swap(DataParameter* other);

  // implements Message ----------------------------------------------

  DataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataParameter& from);
  void MergeFrom(const DataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DataParameter_DB DB;
  static const DB LEVELDB = DataParameter_DB_LEVELDB;
  static const DB LMDB = DataParameter_DB_LMDB;
  static inline bool DB_IsValid(int value) {
    return DataParameter_DB_IsValid(value);
  }
  static const DB DB_MIN =
    DataParameter_DB_DB_MIN;
  static const DB DB_MAX =
    DataParameter_DB_DB_MAX;
  static const int DB_ARRAYSIZE =
    DataParameter_DB_DB_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DB_descriptor() {
    return DataParameter_DB_descriptor();
  }
  static inline const ::std::string& DB_Name(DB value) {
    return DataParameter_DB_Name(value);
  }
  static inline bool DB_Parse(const ::std::string& name,
      DB* value) {
    return DataParameter_DB_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 4;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  inline bool has_rand_skip() const;
  inline void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  inline ::google::protobuf::uint32 rand_skip() const;
  inline void set_rand_skip(::google::protobuf::uint32 value);

  // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  inline bool has_backend() const;
  inline void clear_backend();
  static const int kBackendFieldNumber = 8;
  inline ::caffe::DataParameter_DB backend() const;
  inline void set_backend(::caffe::DataParameter_DB value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional string mean_file = 3;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 crop_size = 5 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional bool force_encoded_color = 9 [default = false];
  inline bool has_force_encoded_color() const;
  inline void clear_force_encoded_color();
  static const int kForceEncodedColorFieldNumber = 9;
  inline bool force_encoded_color() const;
  inline void set_force_encoded_color(bool value);

  // optional uint32 prefetch = 10 [default = 4];
  inline bool has_prefetch() const;
  inline void clear_prefetch();
  static const int kPrefetchFieldNumber = 10;
  inline ::google::protobuf::uint32 prefetch() const;
  inline void set_prefetch(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.DataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_backend();
  inline void clear_has_backend();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_force_encoded_color();
  inline void clear_has_force_encoded_color();
  inline void set_has_prefetch();
  inline void clear_has_prefetch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* source_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 rand_skip_;
  int backend_;
  float scale_;
  ::std::string* mean_file_;
  ::google::protobuf::uint32 crop_size_;
  bool mirror_;
  bool force_encoded_color_;
  ::google::protobuf::uint32 prefetch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static DataParameter* default_instance_;
};
// -------------------------------------------------------------------

class DropoutParameter : public ::google::protobuf::Message {
 public:
  DropoutParameter();
  virtual ~DropoutParameter();

  DropoutParameter(const DropoutParameter& from);

  inline DropoutParameter& operator=(const DropoutParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropoutParameter& default_instance();

  void Swap(DropoutParameter* other);

  // implements Message ----------------------------------------------

  DropoutParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DropoutParameter& from);
  void MergeFrom(const DropoutParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float dropout_ratio = 1 [default = 0.5];
  inline bool has_dropout_ratio() const;
  inline void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 1;
  inline float dropout_ratio() const;
  inline void set_dropout_ratio(float value);

  // @@protoc_insertion_point(class_scope:caffe.DropoutParameter)
 private:
  inline void set_has_dropout_ratio();
  inline void clear_has_dropout_ratio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float dropout_ratio_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static DropoutParameter* default_instance_;
};
// -------------------------------------------------------------------

class DummyDataParameter : public ::google::protobuf::Message {
 public:
  DummyDataParameter();
  virtual ~DummyDataParameter();

  DummyDataParameter(const DummyDataParameter& from);

  inline DummyDataParameter& operator=(const DummyDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DummyDataParameter& default_instance();

  void Swap(DummyDataParameter* other);

  // implements Message ----------------------------------------------

  DummyDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DummyDataParameter& from);
  void MergeFrom(const DummyDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.FillerParameter data_filler = 1;
  inline int data_filler_size() const;
  inline void clear_data_filler();
  static const int kDataFillerFieldNumber = 1;
  inline const ::caffe::FillerParameter& data_filler(int index) const;
  inline ::caffe::FillerParameter* mutable_data_filler(int index);
  inline ::caffe::FillerParameter* add_data_filler();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >&
      data_filler() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >*
      mutable_data_filler();

  // repeated .caffe.BlobShape shape = 6;
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 6;
  inline const ::caffe::BlobShape& shape(int index) const;
  inline ::caffe::BlobShape* mutable_shape(int index);
  inline ::caffe::BlobShape* add_shape();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      shape() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_shape();

  // repeated uint32 num = 2;
  inline int num_size() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num(int index) const;
  inline void set_num(int index, ::google::protobuf::uint32 value);
  inline void add_num(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_num();

  // repeated uint32 channels = 3;
  inline int channels_size() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 3;
  inline ::google::protobuf::uint32 channels(int index) const;
  inline void set_channels(int index, ::google::protobuf::uint32 value);
  inline void add_channels(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      channels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_channels();

  // repeated uint32 height = 4;
  inline int height_size() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::uint32 height(int index) const;
  inline void set_height(int index, ::google::protobuf::uint32 value);
  inline void add_height(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      height() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_height();

  // repeated uint32 width = 5;
  inline int width_size() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 5;
  inline ::google::protobuf::uint32 width(int index) const;
  inline void set_width(int index, ::google::protobuf::uint32 value);
  inline void add_width(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      width() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_width();

  // @@protoc_insertion_point(class_scope:caffe.DummyDataParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter > data_filler_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > channels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > height_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > width_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static DummyDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class EltwiseParameter : public ::google::protobuf::Message {
 public:
  EltwiseParameter();
  virtual ~EltwiseParameter();

  EltwiseParameter(const EltwiseParameter& from);

  inline EltwiseParameter& operator=(const EltwiseParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EltwiseParameter& default_instance();

  void Swap(EltwiseParameter* other);

  // implements Message ----------------------------------------------

  EltwiseParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EltwiseParameter& from);
  void MergeFrom(const EltwiseParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EltwiseParameter_EltwiseOp EltwiseOp;
  static const EltwiseOp PROD = EltwiseParameter_EltwiseOp_PROD;
  static const EltwiseOp SUM = EltwiseParameter_EltwiseOp_SUM;
  static const EltwiseOp MAX = EltwiseParameter_EltwiseOp_MAX;
  static inline bool EltwiseOp_IsValid(int value) {
    return EltwiseParameter_EltwiseOp_IsValid(value);
  }
  static const EltwiseOp EltwiseOp_MIN =
    EltwiseParameter_EltwiseOp_EltwiseOp_MIN;
  static const EltwiseOp EltwiseOp_MAX =
    EltwiseParameter_EltwiseOp_EltwiseOp_MAX;
  static const int EltwiseOp_ARRAYSIZE =
    EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EltwiseOp_descriptor() {
    return EltwiseParameter_EltwiseOp_descriptor();
  }
  static inline const ::std::string& EltwiseOp_Name(EltwiseOp value) {
    return EltwiseParameter_EltwiseOp_Name(value);
  }
  static inline bool EltwiseOp_Parse(const ::std::string& name,
      EltwiseOp* value) {
    return EltwiseParameter_EltwiseOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 1;
  inline ::caffe::EltwiseParameter_EltwiseOp operation() const;
  inline void set_operation(::caffe::EltwiseParameter_EltwiseOp value);

  // repeated float coeff = 2;
  inline int coeff_size() const;
  inline void clear_coeff();
  static const int kCoeffFieldNumber = 2;
  inline float coeff(int index) const;
  inline void set_coeff(int index, float value);
  inline void add_coeff(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      coeff() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_coeff();

  // optional bool stable_prod_grad = 3 [default = true];
  inline bool has_stable_prod_grad() const;
  inline void clear_stable_prod_grad();
  static const int kStableProdGradFieldNumber = 3;
  inline bool stable_prod_grad() const;
  inline void set_stable_prod_grad(bool value);

  // @@protoc_insertion_point(class_scope:caffe.EltwiseParameter)
 private:
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_stable_prod_grad();
  inline void clear_has_stable_prod_grad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< float > coeff_;
  int operation_;
  bool stable_prod_grad_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static EltwiseParameter* default_instance_;
};
// -------------------------------------------------------------------

class ELUParameter : public ::google::protobuf::Message {
 public:
  ELUParameter();
  virtual ~ELUParameter();

  ELUParameter(const ELUParameter& from);

  inline ELUParameter& operator=(const ELUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ELUParameter& default_instance();

  void Swap(ELUParameter* other);

  // implements Message ----------------------------------------------

  ELUParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ELUParameter& from);
  void MergeFrom(const ELUParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float alpha = 1 [default = 1];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 1;
  inline float alpha() const;
  inline void set_alpha(float value);

  // @@protoc_insertion_point(class_scope:caffe.ELUParameter)
 private:
  inline void set_has_alpha();
  inline void clear_has_alpha();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float alpha_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ELUParameter* default_instance_;
};
// -------------------------------------------------------------------

class EmbedParameter : public ::google::protobuf::Message {
 public:
  EmbedParameter();
  virtual ~EmbedParameter();

  EmbedParameter(const EmbedParameter& from);

  inline EmbedParameter& operator=(const EmbedParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmbedParameter& default_instance();

  void Swap(EmbedParameter* other);

  // implements Message ----------------------------------------------

  EmbedParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmbedParameter& from);
  void MergeFrom(const EmbedParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional uint32 input_dim = 2;
  inline bool has_input_dim() const;
  inline void clear_input_dim();
  static const int kInputDimFieldNumber = 2;
  inline ::google::protobuf::uint32 input_dim() const;
  inline void set_input_dim(::google::protobuf::uint32 value);

  // optional bool bias_term = 3 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 3;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional .caffe.FillerParameter weight_filler = 4;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 4;
  inline const ::caffe::FillerParameter& weight_filler() const;
  inline ::caffe::FillerParameter* mutable_weight_filler();
  inline ::caffe::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 5;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 5;
  inline const ::caffe::FillerParameter& bias_filler() const;
  inline ::caffe::FillerParameter* mutable_bias_filler();
  inline ::caffe::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // @@protoc_insertion_point(class_scope:caffe.EmbedParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_input_dim();
  inline void clear_has_input_dim();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 input_dim_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  bool bias_term_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static EmbedParameter* default_instance_;
};
// -------------------------------------------------------------------

class ExpParameter : public ::google::protobuf::Message {
 public:
  ExpParameter();
  virtual ~ExpParameter();

  ExpParameter(const ExpParameter& from);

  inline ExpParameter& operator=(const ExpParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpParameter& default_instance();

  void Swap(ExpParameter* other);

  // implements Message ----------------------------------------------

  ExpParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExpParameter& from);
  void MergeFrom(const ExpParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float base = 1 [default = -1];
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline float base() const;
  inline void set_base(float value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float shift = 3 [default = 0];
  inline bool has_shift() const;
  inline void clear_shift();
  static const int kShiftFieldNumber = 3;
  inline float shift() const;
  inline void set_shift(float value);

  // @@protoc_insertion_point(class_scope:caffe.ExpParameter)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float base_;
  float scale_;
  float shift_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ExpParameter* default_instance_;
};
// -------------------------------------------------------------------

class FlattenParameter : public ::google::protobuf::Message {
 public:
  FlattenParameter();
  virtual ~FlattenParameter();

  FlattenParameter(const FlattenParameter& from);

  inline FlattenParameter& operator=(const FlattenParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlattenParameter& default_instance();

  void Swap(FlattenParameter* other);

  // implements Message ----------------------------------------------

  FlattenParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlattenParameter& from);
  void MergeFrom(const FlattenParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 end_axis = 2 [default = -1];
  inline bool has_end_axis() const;
  inline void clear_end_axis();
  static const int kEndAxisFieldNumber = 2;
  inline ::google::protobuf::int32 end_axis() const;
  inline void set_end_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.FlattenParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_end_axis();
  inline void clear_has_end_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 end_axis_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static FlattenParameter* default_instance_;
};
// -------------------------------------------------------------------

class HDF5DataParameter : public ::google::protobuf::Message {
 public:
  HDF5DataParameter();
  virtual ~HDF5DataParameter();

  HDF5DataParameter(const HDF5DataParameter& from);

  inline HDF5DataParameter& operator=(const HDF5DataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDF5DataParameter& default_instance();

  void Swap(HDF5DataParameter* other);

  // implements Message ----------------------------------------------

  HDF5DataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HDF5DataParameter& from);
  void MergeFrom(const HDF5DataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 2;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional bool shuffle = 3 [default = false];
  inline bool has_shuffle() const;
  inline void clear_shuffle();
  static const int kShuffleFieldNumber = 3;
  inline bool shuffle() const;
  inline void set_shuffle(bool value);

  // @@protoc_insertion_point(class_scope:caffe.HDF5DataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* source_;
  ::google::protobuf::uint32 batch_size_;
  bool shuffle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static HDF5DataParameter* default_instance_;
};
// -------------------------------------------------------------------

class HDF5OutputParameter : public ::google::protobuf::Message {
 public:
  HDF5OutputParameter();
  virtual ~HDF5OutputParameter();

  HDF5OutputParameter(const HDF5OutputParameter& from);

  inline HDF5OutputParameter& operator=(const HDF5OutputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDF5OutputParameter& default_instance();

  void Swap(HDF5OutputParameter* other);

  // implements Message ----------------------------------------------

  HDF5OutputParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HDF5OutputParameter& from);
  void MergeFrom(const HDF5OutputParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:caffe.HDF5OutputParameter)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* file_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static HDF5OutputParameter* default_instance_;
};
// -------------------------------------------------------------------

class HingeLossParameter : public ::google::protobuf::Message {
 public:
  HingeLossParameter();
  virtual ~HingeLossParameter();

  HingeLossParameter(const HingeLossParameter& from);

  inline HingeLossParameter& operator=(const HingeLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HingeLossParameter& default_instance();

  void Swap(HingeLossParameter* other);

  // implements Message ----------------------------------------------

  HingeLossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HingeLossParameter& from);
  void MergeFrom(const HingeLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef HingeLossParameter_Norm Norm;
  static const Norm L1 = HingeLossParameter_Norm_L1;
  static const Norm L2 = HingeLossParameter_Norm_L2;
  static inline bool Norm_IsValid(int value) {
    return HingeLossParameter_Norm_IsValid(value);
  }
  static const Norm Norm_MIN =
    HingeLossParameter_Norm_Norm_MIN;
  static const Norm Norm_MAX =
    HingeLossParameter_Norm_Norm_MAX;
  static const int Norm_ARRAYSIZE =
    HingeLossParameter_Norm_Norm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Norm_descriptor() {
    return HingeLossParameter_Norm_descriptor();
  }
  static inline const ::std::string& Norm_Name(Norm value) {
    return HingeLossParameter_Norm_Name(value);
  }
  static inline bool Norm_Parse(const ::std::string& name,
      Norm* value) {
    return HingeLossParameter_Norm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  inline bool has_norm() const;
  inline void clear_norm();
  static const int kNormFieldNumber = 1;
  inline ::caffe::HingeLossParameter_Norm norm() const;
  inline void set_norm(::caffe::HingeLossParameter_Norm value);

  // @@protoc_insertion_point(class_scope:caffe.HingeLossParameter)
 private:
  inline void set_has_norm();
  inline void clear_has_norm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int norm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static HingeLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class ImageDataParameter : public ::google::protobuf::Message {
 public:
  ImageDataParameter();
  virtual ~ImageDataParameter();

  ImageDataParameter(const ImageDataParameter& from);

  inline ImageDataParameter& operator=(const ImageDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageDataParameter& default_instance();

  void Swap(ImageDataParameter* other);

  // implements Message ----------------------------------------------

  ImageDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageDataParameter& from);
  void MergeFrom(const ImageDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 4 [default = 1];
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  inline bool has_rand_skip() const;
  inline void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  inline ::google::protobuf::uint32 rand_skip() const;
  inline void set_rand_skip(::google::protobuf::uint32 value);

  // optional bool shuffle = 8 [default = false];
  inline bool has_shuffle() const;
  inline void clear_shuffle();
  static const int kShuffleFieldNumber = 8;
  inline bool shuffle() const;
  inline void set_shuffle(bool value);

  // optional uint32 new_height = 9 [default = 0];
  inline bool has_new_height() const;
  inline void clear_new_height();
  static const int kNewHeightFieldNumber = 9;
  inline ::google::protobuf::uint32 new_height() const;
  inline void set_new_height(::google::protobuf::uint32 value);

  // optional uint32 new_width = 10 [default = 0];
  inline bool has_new_width() const;
  inline void clear_new_width();
  static const int kNewWidthFieldNumber = 10;
  inline ::google::protobuf::uint32 new_width() const;
  inline void set_new_width(::google::protobuf::uint32 value);

  // optional bool is_color = 11 [default = true];
  inline bool has_is_color() const;
  inline void clear_is_color();
  static const int kIsColorFieldNumber = 11;
  inline bool is_color() const;
  inline void set_is_color(bool value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional string mean_file = 3;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 crop_size = 5 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional string root_folder = 12 [default = ""];
  inline bool has_root_folder() const;
  inline void clear_root_folder();
  static const int kRootFolderFieldNumber = 12;
  inline const ::std::string& root_folder() const;
  inline void set_root_folder(const ::std::string& value);
  inline void set_root_folder(const char* value);
  inline void set_root_folder(const char* value, size_t size);
  inline ::std::string* mutable_root_folder();
  inline ::std::string* release_root_folder();
  inline void set_allocated_root_folder(::std::string* root_folder);

  // @@protoc_insertion_point(class_scope:caffe.ImageDataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();
  inline void set_has_new_height();
  inline void clear_has_new_height();
  inline void set_has_new_width();
  inline void clear_has_new_width();
  inline void set_has_is_color();
  inline void clear_has_is_color();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_root_folder();
  inline void clear_has_root_folder();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* source_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::uint32 new_height_;
  ::google::protobuf::uint32 new_width_;
  bool shuffle_;
  bool is_color_;
  bool mirror_;
  float scale_;
  ::std::string* mean_file_;
  ::std::string* root_folder_;
  ::google::protobuf::uint32 crop_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ImageDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class InfogainLossParameter : public ::google::protobuf::Message {
 public:
  InfogainLossParameter();
  virtual ~InfogainLossParameter();

  InfogainLossParameter(const InfogainLossParameter& from);

  inline InfogainLossParameter& operator=(const InfogainLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfogainLossParameter& default_instance();

  void Swap(InfogainLossParameter* other);

  // implements Message ----------------------------------------------

  InfogainLossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfogainLossParameter& from);
  void MergeFrom(const InfogainLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // @@protoc_insertion_point(class_scope:caffe.InfogainLossParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* source_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static InfogainLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class InnerProductParameter : public ::google::protobuf::Message {
 public:
  InnerProductParameter();
  virtual ~InnerProductParameter();

  InnerProductParameter(const InnerProductParameter& from);

  inline InnerProductParameter& operator=(const InnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerProductParameter& default_instance();

  void Swap(InnerProductParameter* other);

  // implements Message ----------------------------------------------

  InnerProductParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InnerProductParameter& from);
  void MergeFrom(const InnerProductParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional .caffe.FillerParameter weight_filler = 3;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  inline const ::caffe::FillerParameter& weight_filler() const;
  inline ::caffe::FillerParameter* mutable_weight_filler();
  inline ::caffe::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 4;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 4;
  inline const ::caffe::FillerParameter& bias_filler() const;
  inline ::caffe::FillerParameter* mutable_bias_filler();
  inline ::caffe::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional int32 axis = 5 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 5;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional bool transpose = 6 [default = false];
  inline bool has_transpose() const;
  inline void clear_transpose();
  static const int kTransposeFieldNumber = 6;
  inline bool transpose() const;
  inline void set_transpose(bool value);

  // @@protoc_insertion_point(class_scope:caffe.InnerProductParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_transpose();
  inline void clear_has_transpose();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::caffe::FillerParameter* weight_filler_;
  ::google::protobuf::uint32 num_output_;
  bool bias_term_;
  bool transpose_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::int32 axis_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static InnerProductParameter* default_instance_;
};
// -------------------------------------------------------------------

class InputParameter : public ::google::protobuf::Message {
 public:
  InputParameter();
  virtual ~InputParameter();

  InputParameter(const InputParameter& from);

  inline InputParameter& operator=(const InputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InputParameter& default_instance();

  void Swap(InputParameter* other);

  // implements Message ----------------------------------------------

  InputParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InputParameter& from);
  void MergeFrom(const InputParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobShape shape = 1;
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline const ::caffe::BlobShape& shape(int index) const;
  inline ::caffe::BlobShape* mutable_shape(int index);
  inline ::caffe::BlobShape* add_shape();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      shape() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_shape();

  // @@protoc_insertion_point(class_scope:caffe.InputParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > shape_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static InputParameter* default_instance_;
};
// -------------------------------------------------------------------

class LogParameter : public ::google::protobuf::Message {
 public:
  LogParameter();
  virtual ~LogParameter();

  LogParameter(const LogParameter& from);

  inline LogParameter& operator=(const LogParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogParameter& default_instance();

  void Swap(LogParameter* other);

  // implements Message ----------------------------------------------

  LogParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogParameter& from);
  void MergeFrom(const LogParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float base = 1 [default = -1];
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline float base() const;
  inline void set_base(float value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float shift = 3 [default = 0];
  inline bool has_shift() const;
  inline void clear_shift();
  static const int kShiftFieldNumber = 3;
  inline float shift() const;
  inline void set_shift(float value);

  // @@protoc_insertion_point(class_scope:caffe.LogParameter)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float base_;
  float scale_;
  float shift_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static LogParameter* default_instance_;
};
// -------------------------------------------------------------------

class LRNParameter : public ::google::protobuf::Message {
 public:
  LRNParameter();
  virtual ~LRNParameter();

  LRNParameter(const LRNParameter& from);

  inline LRNParameter& operator=(const LRNParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LRNParameter& default_instance();

  void Swap(LRNParameter* other);

  // implements Message ----------------------------------------------

  LRNParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LRNParameter& from);
  void MergeFrom(const LRNParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LRNParameter_NormRegion NormRegion;
  static const NormRegion ACROSS_CHANNELS = LRNParameter_NormRegion_ACROSS_CHANNELS;
  static const NormRegion WITHIN_CHANNEL = LRNParameter_NormRegion_WITHIN_CHANNEL;
  static inline bool NormRegion_IsValid(int value) {
    return LRNParameter_NormRegion_IsValid(value);
  }
  static const NormRegion NormRegion_MIN =
    LRNParameter_NormRegion_NormRegion_MIN;
  static const NormRegion NormRegion_MAX =
    LRNParameter_NormRegion_NormRegion_MAX;
  static const int NormRegion_ARRAYSIZE =
    LRNParameter_NormRegion_NormRegion_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormRegion_descriptor() {
    return LRNParameter_NormRegion_descriptor();
  }
  static inline const ::std::string& NormRegion_Name(NormRegion value) {
    return LRNParameter_NormRegion_Name(value);
  }
  static inline bool NormRegion_Parse(const ::std::string& name,
      NormRegion* value) {
    return LRNParameter_NormRegion_Parse(name, value);
  }

  typedef LRNParameter_Engine Engine;
  static const Engine DEFAULT = LRNParameter_Engine_DEFAULT;
  static const Engine CAFFE = LRNParameter_Engine_CAFFE;
  static const Engine CUDNN = LRNParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return LRNParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    LRNParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    LRNParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    LRNParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return LRNParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return LRNParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return LRNParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 local_size = 1 [default = 5];
  inline bool has_local_size() const;
  inline void clear_local_size();
  static const int kLocalSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 local_size() const;
  inline void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 2 [default = 1];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  inline float alpha() const;
  inline void set_alpha(float value);

  // optional float beta = 3 [default = 0.75];
  inline bool has_beta() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 3;
  inline float beta() const;
  inline void set_beta(float value);

  // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  inline bool has_norm_region() const;
  inline void clear_norm_region();
  static const int kNormRegionFieldNumber = 4;
  inline ::caffe::LRNParameter_NormRegion norm_region() const;
  inline void set_norm_region(::caffe::LRNParameter_NormRegion value);

  // optional float k = 5 [default = 1];
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 5;
  inline float k() const;
  inline void set_k(float value);

  // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 6;
  inline ::caffe::LRNParameter_Engine engine() const;
  inline void set_engine(::caffe::LRNParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.LRNParameter)
 private:
  inline void set_has_local_size();
  inline void clear_has_local_size();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_norm_region();
  inline void clear_has_norm_region();
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  int norm_region_;
  float k_;
  int engine_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static LRNParameter* default_instance_;
};
// -------------------------------------------------------------------

class MemoryDataParameter : public ::google::protobuf::Message {
 public:
  MemoryDataParameter();
  virtual ~MemoryDataParameter();

  MemoryDataParameter(const MemoryDataParameter& from);

  inline MemoryDataParameter& operator=(const MemoryDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryDataParameter& default_instance();

  void Swap(MemoryDataParameter* other);

  // implements Message ----------------------------------------------

  MemoryDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemoryDataParameter& from);
  void MergeFrom(const MemoryDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 batch_size = 1;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 channels = 2;
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 2;
  inline ::google::protobuf::uint32 channels() const;
  inline void set_channels(::google::protobuf::uint32 value);

  // optional uint32 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // optional uint32 width = 4;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.MemoryDataParameter)
 private:
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 channels_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static MemoryDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class MVNParameter : public ::google::protobuf::Message {
 public:
  MVNParameter();
  virtual ~MVNParameter();

  MVNParameter(const MVNParameter& from);

  inline MVNParameter& operator=(const MVNParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVNParameter& default_instance();

  void Swap(MVNParameter* other);

  // implements Message ----------------------------------------------

  MVNParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MVNParameter& from);
  void MergeFrom(const MVNParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool normalize_variance = 1 [default = true];
  inline bool has_normalize_variance() const;
  inline void clear_normalize_variance();
  static const int kNormalizeVarianceFieldNumber = 1;
  inline bool normalize_variance() const;
  inline void set_normalize_variance(bool value);

  // optional bool across_channels = 2 [default = false];
  inline bool has_across_channels() const;
  inline void clear_across_channels();
  static const int kAcrossChannelsFieldNumber = 2;
  inline bool across_channels() const;
  inline void set_across_channels(bool value);

  // optional float eps = 3 [default = 1e-09];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 3;
  inline float eps() const;
  inline void set_eps(float value);

  // @@protoc_insertion_point(class_scope:caffe.MVNParameter)
 private:
  inline void set_has_normalize_variance();
  inline void clear_has_normalize_variance();
  inline void set_has_across_channels();
  inline void clear_has_across_channels();
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool normalize_variance_;
  bool across_channels_;
  float eps_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static MVNParameter* default_instance_;
};
// -------------------------------------------------------------------

class PoolingParameter : public ::google::protobuf::Message {
 public:
  PoolingParameter();
  virtual ~PoolingParameter();

  PoolingParameter(const PoolingParameter& from);

  inline PoolingParameter& operator=(const PoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolingParameter& default_instance();

  void Swap(PoolingParameter* other);

  // implements Message ----------------------------------------------

  PoolingParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoolingParameter& from);
  void MergeFrom(const PoolingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PoolingParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX = PoolingParameter_PoolMethod_MAX;
  static const PoolMethod AVE = PoolingParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC = PoolingParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return PoolingParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    PoolingParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    PoolingParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return PoolingParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return PoolingParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return PoolingParameter_PoolMethod_Parse(name, value);
  }

  typedef PoolingParameter_Engine Engine;
  static const Engine DEFAULT = PoolingParameter_Engine_DEFAULT;
  static const Engine CAFFE = PoolingParameter_Engine_CAFFE;
  static const Engine CUDNN = PoolingParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return PoolingParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    PoolingParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    PoolingParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    PoolingParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return PoolingParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return PoolingParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return PoolingParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  inline bool has_pool() const;
  inline void clear_pool();
  static const int kPoolFieldNumber = 1;
  inline ::caffe::PoolingParameter_PoolMethod pool() const;
  inline void set_pool(::caffe::PoolingParameter_PoolMethod value);

  // optional uint32 pad = 4 [default = 0];
  inline bool has_pad() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 4;
  inline ::google::protobuf::uint32 pad() const;
  inline void set_pad(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 9 [default = 0];
  inline bool has_pad_h() const;
  inline void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  inline ::google::protobuf::uint32 pad_h() const;
  inline void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  inline bool has_pad_w() const;
  inline void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  inline ::google::protobuf::uint32 pad_w() const;
  inline void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_size = 2;
  inline bool has_kernel_size() const;
  inline void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 kernel_size() const;
  inline void set_kernel_size(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 5;
  inline bool has_kernel_h() const;
  inline void clear_kernel_h();
  static const int kKernelHFieldNumber = 5;
  inline ::google::protobuf::uint32 kernel_h() const;
  inline void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 6;
  inline bool has_kernel_w() const;
  inline void clear_kernel_w();
  static const int kKernelWFieldNumber = 6;
  inline ::google::protobuf::uint32 kernel_w() const;
  inline void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride = 3 [default = 1];
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 3;
  inline ::google::protobuf::uint32 stride() const;
  inline void set_stride(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 7;
  inline bool has_stride_h() const;
  inline void clear_stride_h();
  static const int kStrideHFieldNumber = 7;
  inline ::google::protobuf::uint32 stride_h() const;
  inline void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 8;
  inline bool has_stride_w() const;
  inline void clear_stride_w();
  static const int kStrideWFieldNumber = 8;
  inline ::google::protobuf::uint32 stride_w() const;
  inline void set_stride_w(::google::protobuf::uint32 value);

  // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 11;
  inline ::caffe::PoolingParameter_Engine engine() const;
  inline void set_engine(::caffe::PoolingParameter_Engine value);

  // optional bool global_pooling = 12 [default = false];
  inline bool has_global_pooling() const;
  inline void clear_global_pooling();
  static const int kGlobalPoolingFieldNumber = 12;
  inline bool global_pooling() const;
  inline void set_global_pooling(bool value);

  // @@protoc_insertion_point(class_scope:caffe.PoolingParameter)
 private:
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_pad();
  inline void clear_has_pad();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_kernel_size();
  inline void clear_has_kernel_size();
  inline void set_has_kernel_h();
  inline void clear_has_kernel_h();
  inline void set_has_kernel_w();
  inline void clear_has_kernel_w();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_global_pooling();
  inline void clear_has_global_pooling();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int pool_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_size_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  int engine_;
  bool global_pooling_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static PoolingParameter* default_instance_;
};
// -------------------------------------------------------------------

class PowerParameter : public ::google::protobuf::Message {
 public:
  PowerParameter();
  virtual ~PowerParameter();

  PowerParameter(const PowerParameter& from);

  inline PowerParameter& operator=(const PowerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PowerParameter& default_instance();

  void Swap(PowerParameter* other);

  // implements Message ----------------------------------------------

  PowerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PowerParameter& from);
  void MergeFrom(const PowerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float power = 1 [default = 1];
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 1;
  inline float power() const;
  inline void set_power(float value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float shift = 3 [default = 0];
  inline bool has_shift() const;
  inline void clear_shift();
  static const int kShiftFieldNumber = 3;
  inline float shift() const;
  inline void set_shift(float value);

  // @@protoc_insertion_point(class_scope:caffe.PowerParameter)
 private:
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float power_;
  float scale_;
  float shift_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static PowerParameter* default_instance_;
};
// -------------------------------------------------------------------

class PythonParameter : public ::google::protobuf::Message {
 public:
  PythonParameter();
  virtual ~PythonParameter();

  PythonParameter(const PythonParameter& from);

  inline PythonParameter& operator=(const PythonParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PythonParameter& default_instance();

  void Swap(PythonParameter* other);

  // implements Message ----------------------------------------------

  PythonParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PythonParameter& from);
  void MergeFrom(const PythonParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string module = 1;
  inline bool has_module() const;
  inline void clear_module();
  static const int kModuleFieldNumber = 1;
  inline const ::std::string& module() const;
  inline void set_module(const ::std::string& value);
  inline void set_module(const char* value);
  inline void set_module(const char* value, size_t size);
  inline ::std::string* mutable_module();
  inline ::std::string* release_module();
  inline void set_allocated_module(::std::string* module);

  // optional string layer = 2;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 2;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // optional string param_str = 3 [default = ""];
  inline bool has_param_str() const;
  inline void clear_param_str();
  static const int kParamStrFieldNumber = 3;
  inline const ::std::string& param_str() const;
  inline void set_param_str(const ::std::string& value);
  inline void set_param_str(const char* value);
  inline void set_param_str(const char* value, size_t size);
  inline ::std::string* mutable_param_str();
  inline ::std::string* release_param_str();
  inline void set_allocated_param_str(::std::string* param_str);

  // optional bool share_in_parallel = 4 [default = false];
  inline bool has_share_in_parallel() const;
  inline void clear_share_in_parallel();
  static const int kShareInParallelFieldNumber = 4;
  inline bool share_in_parallel() const;
  inline void set_share_in_parallel(bool value);

  // @@protoc_insertion_point(class_scope:caffe.PythonParameter)
 private:
  inline void set_has_module();
  inline void clear_has_module();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_param_str();
  inline void clear_has_param_str();
  inline void set_has_share_in_parallel();
  inline void clear_has_share_in_parallel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* module_;
  ::std::string* layer_;
  ::std::string* param_str_;
  bool share_in_parallel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static PythonParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReductionParameter : public ::google::protobuf::Message {
 public:
  ReductionParameter();
  virtual ~ReductionParameter();

  ReductionParameter(const ReductionParameter& from);

  inline ReductionParameter& operator=(const ReductionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReductionParameter& default_instance();

  void Swap(ReductionParameter* other);

  // implements Message ----------------------------------------------

  ReductionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReductionParameter& from);
  void MergeFrom(const ReductionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReductionParameter_ReductionOp ReductionOp;
  static const ReductionOp SUM = ReductionParameter_ReductionOp_SUM;
  static const ReductionOp ASUM = ReductionParameter_ReductionOp_ASUM;
  static const ReductionOp SUMSQ = ReductionParameter_ReductionOp_SUMSQ;
  static const ReductionOp MEAN = ReductionParameter_ReductionOp_MEAN;
  static inline bool ReductionOp_IsValid(int value) {
    return ReductionParameter_ReductionOp_IsValid(value);
  }
  static const ReductionOp ReductionOp_MIN =
    ReductionParameter_ReductionOp_ReductionOp_MIN;
  static const ReductionOp ReductionOp_MAX =
    ReductionParameter_ReductionOp_ReductionOp_MAX;
  static const int ReductionOp_ARRAYSIZE =
    ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReductionOp_descriptor() {
    return ReductionParameter_ReductionOp_descriptor();
  }
  static inline const ::std::string& ReductionOp_Name(ReductionOp value) {
    return ReductionParameter_ReductionOp_Name(value);
  }
  static inline bool ReductionOp_Parse(const ::std::string& name,
      ReductionOp* value) {
    return ReductionParameter_ReductionOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 1;
  inline ::caffe::ReductionParameter_ReductionOp operation() const;
  inline void set_operation(::caffe::ReductionParameter_ReductionOp value);

  // optional int32 axis = 2 [default = 0];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional float coeff = 3 [default = 1];
  inline bool has_coeff() const;
  inline void clear_coeff();
  static const int kCoeffFieldNumber = 3;
  inline float coeff() const;
  inline void set_coeff(float value);

  // @@protoc_insertion_point(class_scope:caffe.ReductionParameter)
 private:
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_coeff();
  inline void clear_has_coeff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int operation_;
  ::google::protobuf::int32 axis_;
  float coeff_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ReductionParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReLUParameter : public ::google::protobuf::Message {
 public:
  ReLUParameter();
  virtual ~ReLUParameter();

  ReLUParameter(const ReLUParameter& from);

  inline ReLUParameter& operator=(const ReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReLUParameter& default_instance();

  void Swap(ReLUParameter* other);

  // implements Message ----------------------------------------------

  ReLUParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReLUParameter& from);
  void MergeFrom(const ReLUParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReLUParameter_Engine Engine;
  static const Engine DEFAULT = ReLUParameter_Engine_DEFAULT;
  static const Engine CAFFE = ReLUParameter_Engine_CAFFE;
  static const Engine CUDNN = ReLUParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ReLUParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ReLUParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ReLUParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ReLUParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ReLUParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ReLUParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ReLUParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float negative_slope = 1 [default = 0];
  inline bool has_negative_slope() const;
  inline void clear_negative_slope();
  static const int kNegativeSlopeFieldNumber = 1;
  inline float negative_slope() const;
  inline void set_negative_slope(float value);

  // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 2;
  inline ::caffe::ReLUParameter_Engine engine() const;
  inline void set_engine(::caffe::ReLUParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.ReLUParameter)
 private:
  inline void set_has_negative_slope();
  inline void clear_has_negative_slope();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float negative_slope_;
  int engine_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ReLUParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReshapeParameter : public ::google::protobuf::Message {
 public:
  ReshapeParameter();
  virtual ~ReshapeParameter();

  ReshapeParameter(const ReshapeParameter& from);

  inline ReshapeParameter& operator=(const ReshapeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReshapeParameter& default_instance();

  void Swap(ReshapeParameter* other);

  // implements Message ----------------------------------------------

  ReshapeParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReshapeParameter& from);
  void MergeFrom(const ReshapeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.BlobShape shape = 1;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline const ::caffe::BlobShape& shape() const;
  inline ::caffe::BlobShape* mutable_shape();
  inline ::caffe::BlobShape* release_shape();
  inline void set_allocated_shape(::caffe::BlobShape* shape);

  // optional int32 axis = 2 [default = 0];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 3 [default = -1];
  inline bool has_num_axes() const;
  inline void clear_num_axes();
  static const int kNumAxesFieldNumber = 3;
  inline ::google::protobuf::int32 num_axes() const;
  inline void set_num_axes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ReshapeParameter)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_num_axes();
  inline void clear_has_num_axes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::caffe::BlobShape* shape_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ReshapeParameter* default_instance_;
};
// -------------------------------------------------------------------

class ScaleParameter : public ::google::protobuf::Message {
 public:
  ScaleParameter();
  virtual ~ScaleParameter();

  ScaleParameter(const ScaleParameter& from);

  inline ScaleParameter& operator=(const ScaleParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScaleParameter& default_instance();

  void Swap(ScaleParameter* other);

  // implements Message ----------------------------------------------

  ScaleParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScaleParameter& from);
  void MergeFrom(const ScaleParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 2 [default = 1];
  inline bool has_num_axes() const;
  inline void clear_num_axes();
  static const int kNumAxesFieldNumber = 2;
  inline ::google::protobuf::int32 num_axes() const;
  inline void set_num_axes(::google::protobuf::int32 value);

  // optional .caffe.FillerParameter filler = 3;
  inline bool has_filler() const;
  inline void clear_filler();
  static const int kFillerFieldNumber = 3;
  inline const ::caffe::FillerParameter& filler() const;
  inline ::caffe::FillerParameter* mutable_filler();
  inline ::caffe::FillerParameter* release_filler();
  inline void set_allocated_filler(::caffe::FillerParameter* filler);

  // optional bool bias_term = 4 [default = false];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 4;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional .caffe.FillerParameter bias_filler = 5;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 5;
  inline const ::caffe::FillerParameter& bias_filler() const;
  inline ::caffe::FillerParameter* mutable_bias_filler();
  inline ::caffe::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // @@protoc_insertion_point(class_scope:caffe.ScaleParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_num_axes();
  inline void clear_has_num_axes();
  inline void set_has_filler();
  inline void clear_has_filler();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  ::caffe::FillerParameter* filler_;
  ::caffe::FillerParameter* bias_filler_;
  bool bias_term_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ScaleParameter* default_instance_;
};
// -------------------------------------------------------------------

class SigmoidParameter : public ::google::protobuf::Message {
 public:
  SigmoidParameter();
  virtual ~SigmoidParameter();

  SigmoidParameter(const SigmoidParameter& from);

  inline SigmoidParameter& operator=(const SigmoidParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SigmoidParameter& default_instance();

  void Swap(SigmoidParameter* other);

  // implements Message ----------------------------------------------

  SigmoidParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SigmoidParameter& from);
  void MergeFrom(const SigmoidParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SigmoidParameter_Engine Engine;
  static const Engine DEFAULT = SigmoidParameter_Engine_DEFAULT;
  static const Engine CAFFE = SigmoidParameter_Engine_CAFFE;
  static const Engine CUDNN = SigmoidParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SigmoidParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SigmoidParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SigmoidParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SigmoidParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SigmoidParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SigmoidParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SigmoidParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 1;
  inline ::caffe::SigmoidParameter_Engine engine() const;
  inline void set_engine(::caffe::SigmoidParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.SigmoidParameter)
 private:
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int engine_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SigmoidParameter* default_instance_;
};
// -------------------------------------------------------------------

class SliceParameter : public ::google::protobuf::Message {
 public:
  SliceParameter();
  virtual ~SliceParameter();

  SliceParameter(const SliceParameter& from);

  inline SliceParameter& operator=(const SliceParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SliceParameter& default_instance();

  void Swap(SliceParameter* other);

  // implements Message ----------------------------------------------

  SliceParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SliceParameter& from);
  void MergeFrom(const SliceParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 3 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 3;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // repeated uint32 slice_point = 2;
  inline int slice_point_size() const;
  inline void clear_slice_point();
  static const int kSlicePointFieldNumber = 2;
  inline ::google::protobuf::uint32 slice_point(int index) const;
  inline void set_slice_point(int index, ::google::protobuf::uint32 value);
  inline void add_slice_point(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      slice_point() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_slice_point();

  // optional uint32 slice_dim = 1 [default = 1];
  inline bool has_slice_dim() const;
  inline void clear_slice_dim();
  static const int kSliceDimFieldNumber = 1;
  inline ::google::protobuf::uint32 slice_dim() const;
  inline void set_slice_dim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.SliceParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_slice_dim();
  inline void clear_has_slice_dim();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > slice_point_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::uint32 slice_dim_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SliceParameter* default_instance_;
};
// -------------------------------------------------------------------

class SoftmaxParameter : public ::google::protobuf::Message {
 public:
  SoftmaxParameter();
  virtual ~SoftmaxParameter();

  SoftmaxParameter(const SoftmaxParameter& from);

  inline SoftmaxParameter& operator=(const SoftmaxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftmaxParameter& default_instance();

  void Swap(SoftmaxParameter* other);

  // implements Message ----------------------------------------------

  SoftmaxParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoftmaxParameter& from);
  void MergeFrom(const SoftmaxParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SoftmaxParameter_Engine Engine;
  static const Engine DEFAULT = SoftmaxParameter_Engine_DEFAULT;
  static const Engine CAFFE = SoftmaxParameter_Engine_CAFFE;
  static const Engine CUDNN = SoftmaxParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SoftmaxParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SoftmaxParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SoftmaxParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SoftmaxParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SoftmaxParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SoftmaxParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SoftmaxParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 1;
  inline ::caffe::SoftmaxParameter_Engine engine() const;
  inline void set_engine(::caffe::SoftmaxParameter_Engine value);

  // optional int32 axis = 2 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.SoftmaxParameter)
 private:
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int engine_;
  ::google::protobuf::int32 axis_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SoftmaxParameter* default_instance_;
};
// -------------------------------------------------------------------

class TanHParameter : public ::google::protobuf::Message {
 public:
  TanHParameter();
  virtual ~TanHParameter();

  TanHParameter(const TanHParameter& from);

  inline TanHParameter& operator=(const TanHParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TanHParameter& default_instance();

  void Swap(TanHParameter* other);

  // implements Message ----------------------------------------------

  TanHParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TanHParameter& from);
  void MergeFrom(const TanHParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TanHParameter_Engine Engine;
  static const Engine DEFAULT = TanHParameter_Engine_DEFAULT;
  static const Engine CAFFE = TanHParameter_Engine_CAFFE;
  static const Engine CUDNN = TanHParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return TanHParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    TanHParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    TanHParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    TanHParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return TanHParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return TanHParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return TanHParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 1;
  inline ::caffe::TanHParameter_Engine engine() const;
  inline void set_engine(::caffe::TanHParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.TanHParameter)
 private:
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int engine_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TanHParameter* default_instance_;
};
// -------------------------------------------------------------------

class TileParameter : public ::google::protobuf::Message {
 public:
  TileParameter();
  virtual ~TileParameter();

  TileParameter(const TileParameter& from);

  inline TileParameter& operator=(const TileParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TileParameter& default_instance();

  void Swap(TileParameter* other);

  // implements Message ----------------------------------------------

  TileParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TileParameter& from);
  void MergeFrom(const TileParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 tiles = 2;
  inline bool has_tiles() const;
  inline void clear_tiles();
  static const int kTilesFieldNumber = 2;
  inline ::google::protobuf::int32 tiles() const;
  inline void set_tiles(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.TileParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_tiles();
  inline void clear_has_tiles();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 tiles_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TileParameter* default_instance_;
};
// -------------------------------------------------------------------

class ThresholdParameter : public ::google::protobuf::Message {
 public:
  ThresholdParameter();
  virtual ~ThresholdParameter();

  ThresholdParameter(const ThresholdParameter& from);

  inline ThresholdParameter& operator=(const ThresholdParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThresholdParameter& default_instance();

  void Swap(ThresholdParameter* other);

  // implements Message ----------------------------------------------

  ThresholdParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThresholdParameter& from);
  void MergeFrom(const ThresholdParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float threshold = 1 [default = 0];
  inline bool has_threshold() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 1;
  inline float threshold() const;
  inline void set_threshold(float value);

  // @@protoc_insertion_point(class_scope:caffe.ThresholdParameter)
 private:
  inline void set_has_threshold();
  inline void clear_has_threshold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float threshold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ThresholdParameter* default_instance_;
};
// -------------------------------------------------------------------

class WindowDataParameter : public ::google::protobuf::Message {
 public:
  WindowDataParameter();
  virtual ~WindowDataParameter();

  WindowDataParameter(const WindowDataParameter& from);

  inline WindowDataParameter& operator=(const WindowDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WindowDataParameter& default_instance();

  void Swap(WindowDataParameter* other);

  // implements Message ----------------------------------------------

  WindowDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WindowDataParameter& from);
  void MergeFrom(const WindowDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional string mean_file = 3;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 batch_size = 4;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 crop_size = 5 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional float fg_threshold = 7 [default = 0.5];
  inline bool has_fg_threshold() const;
  inline void clear_fg_threshold();
  static const int kFgThresholdFieldNumber = 7;
  inline float fg_threshold() const;
  inline void set_fg_threshold(float value);

  // optional float bg_threshold = 8 [default = 0.5];
  inline bool has_bg_threshold() const;
  inline void clear_bg_threshold();
  static const int kBgThresholdFieldNumber = 8;
  inline float bg_threshold() const;
  inline void set_bg_threshold(float value);

  // optional float fg_fraction = 9 [default = 0.25];
  inline bool has_fg_fraction() const;
  inline void clear_fg_fraction();
  static const int kFgFractionFieldNumber = 9;
  inline float fg_fraction() const;
  inline void set_fg_fraction(float value);

  // optional uint32 context_pad = 10 [default = 0];
  inline bool has_context_pad() const;
  inline void clear_context_pad();
  static const int kContextPadFieldNumber = 10;
  inline ::google::protobuf::uint32 context_pad() const;
  inline void set_context_pad(::google::protobuf::uint32 value);

  // optional string crop_mode = 11 [default = "warp"];
  inline bool has_crop_mode() const;
  inline void clear_crop_mode();
  static const int kCropModeFieldNumber = 11;
  inline const ::std::string& crop_mode() const;
  inline void set_crop_mode(const ::std::string& value);
  inline void set_crop_mode(const char* value);
  inline void set_crop_mode(const char* value, size_t size);
  inline ::std::string* mutable_crop_mode();
  inline ::std::string* release_crop_mode();
  inline void set_allocated_crop_mode(::std::string* crop_mode);

  // optional bool cache_images = 12 [default = false];
  inline bool has_cache_images() const;
  inline void clear_cache_images();
  static const int kCacheImagesFieldNumber = 12;
  inline bool cache_images() const;
  inline void set_cache_images(bool value);

  // optional string root_folder = 13 [default = ""];
  inline bool has_root_folder() const;
  inline void clear_root_folder();
  static const int kRootFolderFieldNumber = 13;
  inline const ::std::string& root_folder() const;
  inline void set_root_folder(const ::std::string& value);
  inline void set_root_folder(const char* value);
  inline void set_root_folder(const char* value, size_t size);
  inline ::std::string* mutable_root_folder();
  inline ::std::string* release_root_folder();
  inline void set_allocated_root_folder(::std::string* root_folder);

  // @@protoc_insertion_point(class_scope:caffe.WindowDataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_fg_threshold();
  inline void clear_has_fg_threshold();
  inline void set_has_bg_threshold();
  inline void clear_has_bg_threshold();
  inline void set_has_fg_fraction();
  inline void clear_has_fg_fraction();
  inline void set_has_context_pad();
  inline void clear_has_context_pad();
  inline void set_has_crop_mode();
  inline void clear_has_crop_mode();
  inline void set_has_cache_images();
  inline void clear_has_cache_images();
  inline void set_has_root_folder();
  inline void clear_has_root_folder();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* source_;
  ::std::string* mean_file_;
  float scale_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 crop_size_;
  float fg_threshold_;
  float bg_threshold_;
  float fg_fraction_;
  bool mirror_;
  bool cache_images_;
  ::google::protobuf::uint32 context_pad_;
  ::std::string* crop_mode_;
  static ::std::string* _default_crop_mode_;
  ::std::string* root_folder_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static WindowDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class SPPParameter : public ::google::protobuf::Message {
 public:
  SPPParameter();
  virtual ~SPPParameter();

  SPPParameter(const SPPParameter& from);

  inline SPPParameter& operator=(const SPPParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPPParameter& default_instance();

  void Swap(SPPParameter* other);

  // implements Message ----------------------------------------------

  SPPParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPPParameter& from);
  void MergeFrom(const SPPParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SPPParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX = SPPParameter_PoolMethod_MAX;
  static const PoolMethod AVE = SPPParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC = SPPParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return SPPParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    SPPParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    SPPParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return SPPParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return SPPParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return SPPParameter_PoolMethod_Parse(name, value);
  }

  typedef SPPParameter_Engine Engine;
  static const Engine DEFAULT = SPPParameter_Engine_DEFAULT;
  static const Engine CAFFE = SPPParameter_Engine_CAFFE;
  static const Engine CUDNN = SPPParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SPPParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SPPParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SPPParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SPPParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SPPParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SPPParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SPPParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 pyramid_height = 1;
  inline bool has_pyramid_height() const;
  inline void clear_pyramid_height();
  static const int kPyramidHeightFieldNumber = 1;
  inline ::google::protobuf::uint32 pyramid_height() const;
  inline void set_pyramid_height(::google::protobuf::uint32 value);

  // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  inline bool has_pool() const;
  inline void clear_pool();
  static const int kPoolFieldNumber = 2;
  inline ::caffe::SPPParameter_PoolMethod pool() const;
  inline void set_pool(::caffe::SPPParameter_PoolMethod value);

  // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 6;
  inline ::caffe::SPPParameter_Engine engine() const;
  inline void set_engine(::caffe::SPPParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.SPPParameter)
 private:
  inline void set_has_pyramid_height();
  inline void clear_has_pyramid_height();
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pyramid_height_;
  int pool_;
  int engine_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SPPParameter* default_instance_;
};
// -------------------------------------------------------------------

class V1LayerParameter : public ::google::protobuf::Message {
 public:
  V1LayerParameter();
  virtual ~V1LayerParameter();

  V1LayerParameter(const V1LayerParameter& from);

  inline V1LayerParameter& operator=(const V1LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const V1LayerParameter& default_instance();

  void Swap(V1LayerParameter* other);

  // implements Message ----------------------------------------------

  V1LayerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const V1LayerParameter& from);
  void MergeFrom(const V1LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef V1LayerParameter_LayerType LayerType;
  static const LayerType NONE = V1LayerParameter_LayerType_NONE;
  static const LayerType ABSVAL = V1LayerParameter_LayerType_ABSVAL;
  static const LayerType ACCURACY = V1LayerParameter_LayerType_ACCURACY;
  static const LayerType ARGMAX = V1LayerParameter_LayerType_ARGMAX;
  static const LayerType BNLL = V1LayerParameter_LayerType_BNLL;
  static const LayerType CONCAT = V1LayerParameter_LayerType_CONCAT;
  static const LayerType CONTRASTIVE_LOSS = V1LayerParameter_LayerType_CONTRASTIVE_LOSS;
  static const LayerType CONVOLUTION = V1LayerParameter_LayerType_CONVOLUTION;
  static const LayerType DATA = V1LayerParameter_LayerType_DATA;
  static const LayerType DECONVOLUTION = V1LayerParameter_LayerType_DECONVOLUTION;
  static const LayerType DROPOUT = V1LayerParameter_LayerType_DROPOUT;
  static const LayerType DUMMY_DATA = V1LayerParameter_LayerType_DUMMY_DATA;
  static const LayerType EUCLIDEAN_LOSS = V1LayerParameter_LayerType_EUCLIDEAN_LOSS;
  static const LayerType ELTWISE = V1LayerParameter_LayerType_ELTWISE;
  static const LayerType EXP = V1LayerParameter_LayerType_EXP;
  static const LayerType FLATTEN = V1LayerParameter_LayerType_FLATTEN;
  static const LayerType HDF5_DATA = V1LayerParameter_LayerType_HDF5_DATA;
  static const LayerType HDF5_OUTPUT = V1LayerParameter_LayerType_HDF5_OUTPUT;
  static const LayerType HINGE_LOSS = V1LayerParameter_LayerType_HINGE_LOSS;
  static const LayerType IM2COL = V1LayerParameter_LayerType_IM2COL;
  static const LayerType IMAGE_DATA = V1LayerParameter_LayerType_IMAGE_DATA;
  static const LayerType INFOGAIN_LOSS = V1LayerParameter_LayerType_INFOGAIN_LOSS;
  static const LayerType INNER_PRODUCT = V1LayerParameter_LayerType_INNER_PRODUCT;
  static const LayerType LRN = V1LayerParameter_LayerType_LRN;
  static const LayerType MEMORY_DATA = V1LayerParameter_LayerType_MEMORY_DATA;
  static const LayerType MULTINOMIAL_LOGISTIC_LOSS = V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS;
  static const LayerType MVN = V1LayerParameter_LayerType_MVN;
  static const LayerType POOLING = V1LayerParameter_LayerType_POOLING;
  static const LayerType POWER = V1LayerParameter_LayerType_POWER;
  static const LayerType RELU = V1LayerParameter_LayerType_RELU;
  static const LayerType SIGMOID = V1LayerParameter_LayerType_SIGMOID;
  static const LayerType SIGMOID_CROSS_ENTROPY_LOSS = V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS;
  static const LayerType SILENCE = V1LayerParameter_LayerType_SILENCE;
  static const LayerType SOFTMAX = V1LayerParameter_LayerType_SOFTMAX;
  static const LayerType SOFTMAX_LOSS = V1LayerParameter_LayerType_SOFTMAX_LOSS;
  static const LayerType SPLIT = V1LayerParameter_LayerType_SPLIT;
  static const LayerType SLICE = V1LayerParameter_LayerType_SLICE;
  static const LayerType TANH = V1LayerParameter_LayerType_TANH;
  static const LayerType WINDOW_DATA = V1LayerParameter_LayerType_WINDOW_DATA;
  static const LayerType THRESHOLD = V1LayerParameter_LayerType_THRESHOLD;
  static inline bool LayerType_IsValid(int value) {
    return V1LayerParameter_LayerType_IsValid(value);
  }
  static const LayerType LayerType_MIN =
    V1LayerParameter_LayerType_LayerType_MIN;
  static const LayerType LayerType_MAX =
    V1LayerParameter_LayerType_LayerType_MAX;
  static const int LayerType_ARRAYSIZE =
    V1LayerParameter_LayerType_LayerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LayerType_descriptor() {
    return V1LayerParameter_LayerType_descriptor();
  }
  static inline const ::std::string& LayerType_Name(LayerType value) {
    return V1LayerParameter_LayerType_Name(value);
  }
  static inline bool LayerType_Parse(const ::std::string& name,
      LayerType* value) {
    return V1LayerParameter_LayerType_Parse(name, value);
  }

  typedef V1LayerParameter_DimCheckMode DimCheckMode;
  static const DimCheckMode STRICT = V1LayerParameter_DimCheckMode_STRICT;
  static const DimCheckMode PERMISSIVE = V1LayerParameter_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return V1LayerParameter_DimCheckMode_IsValid(value);
  }
  static const DimCheckMode DimCheckMode_MIN =
    V1LayerParameter_DimCheckMode_DimCheckMode_MIN;
  static const DimCheckMode DimCheckMode_MAX =
    V1LayerParameter_DimCheckMode_DimCheckMode_MAX;
  static const int DimCheckMode_ARRAYSIZE =
    V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DimCheckMode_descriptor() {
    return V1LayerParameter_DimCheckMode_descriptor();
  }
  static inline const ::std::string& DimCheckMode_Name(DimCheckMode value) {
    return V1LayerParameter_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(const ::std::string& name,
      DimCheckMode* value) {
    return V1LayerParameter_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string bottom = 2;
  inline int bottom_size() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 2;
  inline const ::std::string& bottom(int index) const;
  inline ::std::string* mutable_bottom(int index);
  inline void set_bottom(int index, const ::std::string& value);
  inline void set_bottom(int index, const char* value);
  inline void set_bottom(int index, const char* value, size_t size);
  inline ::std::string* add_bottom();
  inline void add_bottom(const ::std::string& value);
  inline void add_bottom(const char* value);
  inline void add_bottom(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 3;
  inline int top_size() const;
  inline void clear_top();
  static const int kTopFieldNumber = 3;
  inline const ::std::string& top(int index) const;
  inline ::std::string* mutable_top(int index);
  inline void set_top(int index, const ::std::string& value);
  inline void set_top(int index, const char* value);
  inline void set_top(int index, const char* value, size_t size);
  inline ::std::string* add_top();
  inline void add_top(const ::std::string& value);
  inline void add_top(const char* value);
  inline void add_top(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .caffe.NetStateRule include = 32;
  inline int include_size() const;
  inline void clear_include();
  static const int kIncludeFieldNumber = 32;
  inline const ::caffe::NetStateRule& include(int index) const;
  inline ::caffe::NetStateRule* mutable_include(int index);
  inline ::caffe::NetStateRule* add_include();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      include() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_include();

  // repeated .caffe.NetStateRule exclude = 33;
  inline int exclude_size() const;
  inline void clear_exclude();
  static const int kExcludeFieldNumber = 33;
  inline const ::caffe::NetStateRule& exclude(int index) const;
  inline ::caffe::NetStateRule* mutable_exclude(int index);
  inline ::caffe::NetStateRule* add_exclude();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      exclude() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_exclude();

  // optional .caffe.V1LayerParameter.LayerType type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::caffe::V1LayerParameter_LayerType type() const;
  inline void set_type(::caffe::V1LayerParameter_LayerType value);

  // repeated .caffe.BlobProto blobs = 6;
  inline int blobs_size() const;
  inline void clear_blobs();
  static const int kBlobsFieldNumber = 6;
  inline const ::caffe::BlobProto& blobs(int index) const;
  inline ::caffe::BlobProto* mutable_blobs(int index);
  inline ::caffe::BlobProto* add_blobs();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();

  // repeated string param = 1001;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 1001;
  inline const ::std::string& param(int index) const;
  inline ::std::string* mutable_param(int index);
  inline void set_param(int index, const ::std::string& value);
  inline void set_param(int index, const char* value);
  inline void set_param(int index, const char* value, size_t size);
  inline ::std::string* add_param();
  inline void add_param(const ::std::string& value);
  inline void add_param(const char* value);
  inline void add_param(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& param() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_param();

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  inline int blob_share_mode_size() const;
  inline void clear_blob_share_mode();
  static const int kBlobShareModeFieldNumber = 1002;
  inline ::caffe::V1LayerParameter_DimCheckMode blob_share_mode(int index) const;
  inline void set_blob_share_mode(int index, ::caffe::V1LayerParameter_DimCheckMode value);
  inline void add_blob_share_mode(::caffe::V1LayerParameter_DimCheckMode value);
  inline const ::google::protobuf::RepeatedField<int>& blob_share_mode() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_blob_share_mode();

  // repeated float blobs_lr = 7;
  inline int blobs_lr_size() const;
  inline void clear_blobs_lr();
  static const int kBlobsLrFieldNumber = 7;
  inline float blobs_lr(int index) const;
  inline void set_blobs_lr(int index, float value);
  inline void add_blobs_lr(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      blobs_lr() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 8;
  inline int weight_decay_size() const;
  inline void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 8;
  inline float weight_decay(int index) const;
  inline void set_weight_decay(int index, float value);
  inline void add_weight_decay(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      weight_decay() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_weight_decay();

  // repeated float loss_weight = 35;
  inline int loss_weight_size() const;
  inline void clear_loss_weight();
  static const int kLossWeightFieldNumber = 35;
  inline float loss_weight(int index) const;
  inline void set_loss_weight(int index, float value);
  inline void add_loss_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      loss_weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_loss_weight();

  // optional .caffe.AccuracyParameter accuracy_param = 27;
  inline bool has_accuracy_param() const;
  inline void clear_accuracy_param();
  static const int kAccuracyParamFieldNumber = 27;
  inline const ::caffe::AccuracyParameter& accuracy_param() const;
  inline ::caffe::AccuracyParameter* mutable_accuracy_param();
  inline ::caffe::AccuracyParameter* release_accuracy_param();
  inline void set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param);

  // optional .caffe.ArgMaxParameter argmax_param = 23;
  inline bool has_argmax_param() const;
  inline void clear_argmax_param();
  static const int kArgmaxParamFieldNumber = 23;
  inline const ::caffe::ArgMaxParameter& argmax_param() const;
  inline ::caffe::ArgMaxParameter* mutable_argmax_param();
  inline ::caffe::ArgMaxParameter* release_argmax_param();
  inline void set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param);

  // optional .caffe.ConcatParameter concat_param = 9;
  inline bool has_concat_param() const;
  inline void clear_concat_param();
  static const int kConcatParamFieldNumber = 9;
  inline const ::caffe::ConcatParameter& concat_param() const;
  inline ::caffe::ConcatParameter* mutable_concat_param();
  inline ::caffe::ConcatParameter* release_concat_param();
  inline void set_allocated_concat_param(::caffe::ConcatParameter* concat_param);

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
  inline bool has_contrastive_loss_param() const;
  inline void clear_contrastive_loss_param();
  static const int kContrastiveLossParamFieldNumber = 40;
  inline const ::caffe::ContrastiveLossParameter& contrastive_loss_param() const;
  inline ::caffe::ContrastiveLossParameter* mutable_contrastive_loss_param();
  inline ::caffe::ContrastiveLossParameter* release_contrastive_loss_param();
  inline void set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param);

  // optional .caffe.ConvolutionParameter convolution_param = 10;
  inline bool has_convolution_param() const;
  inline void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 10;
  inline const ::caffe::ConvolutionParameter& convolution_param() const;
  inline ::caffe::ConvolutionParameter* mutable_convolution_param();
  inline ::caffe::ConvolutionParameter* release_convolution_param();
  inline void set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param);

  // optional .caffe.DataParameter data_param = 11;
  inline bool has_data_param() const;
  inline void clear_data_param();
  static const int kDataParamFieldNumber = 11;
  inline const ::caffe::DataParameter& data_param() const;
  inline ::caffe::DataParameter* mutable_data_param();
  inline ::caffe::DataParameter* release_data_param();
  inline void set_allocated_data_param(::caffe::DataParameter* data_param);

  // optional .caffe.DropoutParameter dropout_param = 12;
  inline bool has_dropout_param() const;
  inline void clear_dropout_param();
  static const int kDropoutParamFieldNumber = 12;
  inline const ::caffe::DropoutParameter& dropout_param() const;
  inline ::caffe::DropoutParameter* mutable_dropout_param();
  inline ::caffe::DropoutParameter* release_dropout_param();
  inline void set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param);

  // optional .caffe.DummyDataParameter dummy_data_param = 26;
  inline bool has_dummy_data_param() const;
  inline void clear_dummy_data_param();
  static const int kDummyDataParamFieldNumber = 26;
  inline const ::caffe::DummyDataParameter& dummy_data_param() const;
  inline ::caffe::DummyDataParameter* mutable_dummy_data_param();
  inline ::caffe::DummyDataParameter* release_dummy_data_param();
  inline void set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param);

  // optional .caffe.EltwiseParameter eltwise_param = 24;
  inline bool has_eltwise_param() const;
  inline void clear_eltwise_param();
  static const int kEltwiseParamFieldNumber = 24;
  inline const ::caffe::EltwiseParameter& eltwise_param() const;
  inline ::caffe::EltwiseParameter* mutable_eltwise_param();
  inline ::caffe::EltwiseParameter* release_eltwise_param();
  inline void set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param);

  // optional .caffe.ExpParameter exp_param = 41;
  inline bool has_exp_param() const;
  inline void clear_exp_param();
  static const int kExpParamFieldNumber = 41;
  inline const ::caffe::ExpParameter& exp_param() const;
  inline ::caffe::ExpParameter* mutable_exp_param();
  inline ::caffe::ExpParameter* release_exp_param();
  inline void set_allocated_exp_param(::caffe::ExpParameter* exp_param);

  // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
  inline bool has_hdf5_data_param() const;
  inline void clear_hdf5_data_param();
  static const int kHdf5DataParamFieldNumber = 13;
  inline const ::caffe::HDF5DataParameter& hdf5_data_param() const;
  inline ::caffe::HDF5DataParameter* mutable_hdf5_data_param();
  inline ::caffe::HDF5DataParameter* release_hdf5_data_param();
  inline void set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
  inline bool has_hdf5_output_param() const;
  inline void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 14;
  inline const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  inline ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  inline ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  inline void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // optional .caffe.HingeLossParameter hinge_loss_param = 29;
  inline bool has_hinge_loss_param() const;
  inline void clear_hinge_loss_param();
  static const int kHingeLossParamFieldNumber = 29;
  inline const ::caffe::HingeLossParameter& hinge_loss_param() const;
  inline ::caffe::HingeLossParameter* mutable_hinge_loss_param();
  inline ::caffe::HingeLossParameter* release_hinge_loss_param();
  inline void set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param);

  // optional .caffe.ImageDataParameter image_data_param = 15;
  inline bool has_image_data_param() const;
  inline void clear_image_data_param();
  static const int kImageDataParamFieldNumber = 15;
  inline const ::caffe::ImageDataParameter& image_data_param() const;
  inline ::caffe::ImageDataParameter* mutable_image_data_param();
  inline ::caffe::ImageDataParameter* release_image_data_param();
  inline void set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param);

  // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
  inline bool has_infogain_loss_param() const;
  inline void clear_infogain_loss_param();
  static const int kInfogainLossParamFieldNumber = 16;
  inline const ::caffe::InfogainLossParameter& infogain_loss_param() const;
  inline ::caffe::InfogainLossParameter* mutable_infogain_loss_param();
  inline ::caffe::InfogainLossParameter* release_infogain_loss_param();
  inline void set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param);

  // optional .caffe.InnerProductParameter inner_product_param = 17;
  inline bool has_inner_product_param() const;
  inline void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 17;
  inline const ::caffe::InnerProductParameter& inner_product_param() const;
  inline ::caffe::InnerProductParameter* mutable_inner_product_param();
  inline ::caffe::InnerProductParameter* release_inner_product_param();
  inline void set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param);

  // optional .caffe.LRNParameter lrn_param = 18;
  inline bool has_lrn_param() const;
  inline void clear_lrn_param();
  static const int kLrnParamFieldNumber = 18;
  inline const ::caffe::LRNParameter& lrn_param() const;
  inline ::caffe::LRNParameter* mutable_lrn_param();
  inline ::caffe::LRNParameter* release_lrn_param();
  inline void set_allocated_lrn_param(::caffe::LRNParameter* lrn_param);

  // optional .caffe.MemoryDataParameter memory_data_param = 22;
  inline bool has_memory_data_param() const;
  inline void clear_memory_data_param();
  static const int kMemoryDataParamFieldNumber = 22;
  inline const ::caffe::MemoryDataParameter& memory_data_param() const;
  inline ::caffe::MemoryDataParameter* mutable_memory_data_param();
  inline ::caffe::MemoryDataParameter* release_memory_data_param();
  inline void set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param);

  // optional .caffe.MVNParameter mvn_param = 34;
  inline bool has_mvn_param() const;
  inline void clear_mvn_param();
  static const int kMvnParamFieldNumber = 34;
  inline const ::caffe::MVNParameter& mvn_param() const;
  inline ::caffe::MVNParameter* mutable_mvn_param();
  inline ::caffe::MVNParameter* release_mvn_param();
  inline void set_allocated_mvn_param(::caffe::MVNParameter* mvn_param);

  // optional .caffe.PoolingParameter pooling_param = 19;
  inline bool has_pooling_param() const;
  inline void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 19;
  inline const ::caffe::PoolingParameter& pooling_param() const;
  inline ::caffe::PoolingParameter* mutable_pooling_param();
  inline ::caffe::PoolingParameter* release_pooling_param();
  inline void set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param);

  // optional .caffe.PowerParameter power_param = 21;
  inline bool has_power_param() const;
  inline void clear_power_param();
  static const int kPowerParamFieldNumber = 21;
  inline const ::caffe::PowerParameter& power_param() const;
  inline ::caffe::PowerParameter* mutable_power_param();
  inline ::caffe::PowerParameter* release_power_param();
  inline void set_allocated_power_param(::caffe::PowerParameter* power_param);

  // optional .caffe.ReLUParameter relu_param = 30;
  inline bool has_relu_param() const;
  inline void clear_relu_param();
  static const int kReluParamFieldNumber = 30;
  inline const ::caffe::ReLUParameter& relu_param() const;
  inline ::caffe::ReLUParameter* mutable_relu_param();
  inline ::caffe::ReLUParameter* release_relu_param();
  inline void set_allocated_relu_param(::caffe::ReLUParameter* relu_param);

  // optional .caffe.SigmoidParameter sigmoid_param = 38;
  inline bool has_sigmoid_param() const;
  inline void clear_sigmoid_param();
  static const int kSigmoidParamFieldNumber = 38;
  inline const ::caffe::SigmoidParameter& sigmoid_param() const;
  inline ::caffe::SigmoidParameter* mutable_sigmoid_param();
  inline ::caffe::SigmoidParameter* release_sigmoid_param();
  inline void set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param);

  // optional .caffe.SoftmaxParameter softmax_param = 39;
  inline bool has_softmax_param() const;
  inline void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 39;
  inline const ::caffe::SoftmaxParameter& softmax_param() const;
  inline ::caffe::SoftmaxParameter* mutable_softmax_param();
  inline ::caffe::SoftmaxParameter* release_softmax_param();
  inline void set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param);

  // optional .caffe.SliceParameter slice_param = 31;
  inline bool has_slice_param() const;
  inline void clear_slice_param();
  static const int kSliceParamFieldNumber = 31;
  inline const ::caffe::SliceParameter& slice_param() const;
  inline ::caffe::SliceParameter* mutable_slice_param();
  inline ::caffe::SliceParameter* release_slice_param();
  inline void set_allocated_slice_param(::caffe::SliceParameter* slice_param);

  // optional .caffe.TanHParameter tanh_param = 37;
  inline bool has_tanh_param() const;
  inline void clear_tanh_param();
  static const int kTanhParamFieldNumber = 37;
  inline const ::caffe::TanHParameter& tanh_param() const;
  inline ::caffe::TanHParameter* mutable_tanh_param();
  inline ::caffe::TanHParameter* release_tanh_param();
  inline void set_allocated_tanh_param(::caffe::TanHParameter* tanh_param);

  // optional .caffe.ThresholdParameter threshold_param = 25;
  inline bool has_threshold_param() const;
  inline void clear_threshold_param();
  static const int kThresholdParamFieldNumber = 25;
  inline const ::caffe::ThresholdParameter& threshold_param() const;
  inline ::caffe::ThresholdParameter* mutable_threshold_param();
  inline ::caffe::ThresholdParameter* release_threshold_param();
  inline void set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param);

  // optional .caffe.WindowDataParameter window_data_param = 20;
  inline bool has_window_data_param() const;
  inline void clear_window_data_param();
  static const int kWindowDataParamFieldNumber = 20;
  inline const ::caffe::WindowDataParameter& window_data_param() const;
  inline ::caffe::WindowDataParameter* mutable_window_data_param();
  inline ::caffe::WindowDataParameter* release_window_data_param();
  inline void set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param);

  // optional .caffe.TransformationParameter transform_param = 36;
  inline bool has_transform_param() const;
  inline void clear_transform_param();
  static const int kTransformParamFieldNumber = 36;
  inline const ::caffe::TransformationParameter& transform_param() const;
  inline ::caffe::TransformationParameter* mutable_transform_param();
  inline ::caffe::TransformationParameter* release_transform_param();
  inline void set_allocated_transform_param(::caffe::TransformationParameter* transform_param);

  // optional .caffe.LossParameter loss_param = 42;
  inline bool has_loss_param() const;
  inline void clear_loss_param();
  static const int kLossParamFieldNumber = 42;
  inline const ::caffe::LossParameter& loss_param() const;
  inline ::caffe::LossParameter* mutable_loss_param();
  inline ::caffe::LossParameter* release_loss_param();
  inline void set_allocated_loss_param(::caffe::LossParameter* loss_param);

  // optional .caffe.V0LayerParameter layer = 1;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 1;
  inline const ::caffe::V0LayerParameter& layer() const;
  inline ::caffe::V0LayerParameter* mutable_layer();
  inline ::caffe::V0LayerParameter* release_layer();
  inline void set_allocated_layer(::caffe::V0LayerParameter* layer);

  // @@protoc_insertion_point(class_scope:caffe.V1LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_accuracy_param();
  inline void clear_has_accuracy_param();
  inline void set_has_argmax_param();
  inline void clear_has_argmax_param();
  inline void set_has_concat_param();
  inline void clear_has_concat_param();
  inline void set_has_contrastive_loss_param();
  inline void clear_has_contrastive_loss_param();
  inline void set_has_convolution_param();
  inline void clear_has_convolution_param();
  inline void set_has_data_param();
  inline void clear_has_data_param();
  inline void set_has_dropout_param();
  inline void clear_has_dropout_param();
  inline void set_has_dummy_data_param();
  inline void clear_has_dummy_data_param();
  inline void set_has_eltwise_param();
  inline void clear_has_eltwise_param();
  inline void set_has_exp_param();
  inline void clear_has_exp_param();
  inline void set_has_hdf5_data_param();
  inline void clear_has_hdf5_data_param();
  inline void set_has_hdf5_output_param();
  inline void clear_has_hdf5_output_param();
  inline void set_has_hinge_loss_param();
  inline void clear_has_hinge_loss_param();
  inline void set_has_image_data_param();
  inline void clear_has_image_data_param();
  inline void set_has_infogain_loss_param();
  inline void clear_has_infogain_loss_param();
  inline void set_has_inner_product_param();
  inline void clear_has_inner_product_param();
  inline void set_has_lrn_param();
  inline void clear_has_lrn_param();
  inline void set_has_memory_data_param();
  inline void clear_has_memory_data_param();
  inline void set_has_mvn_param();
  inline void clear_has_mvn_param();
  inline void set_has_pooling_param();
  inline void clear_has_pooling_param();
  inline void set_has_power_param();
  inline void clear_has_power_param();
  inline void set_has_relu_param();
  inline void clear_has_relu_param();
  inline void set_has_sigmoid_param();
  inline void clear_has_sigmoid_param();
  inline void set_has_softmax_param();
  inline void clear_has_softmax_param();
  inline void set_has_slice_param();
  inline void clear_has_slice_param();
  inline void set_has_tanh_param();
  inline void clear_has_tanh_param();
  inline void set_has_threshold_param();
  inline void clear_has_threshold_param();
  inline void set_has_window_data_param();
  inline void clear_has_window_data_param();
  inline void set_has_transform_param();
  inline void clear_has_transform_param();
  inline void set_has_loss_param();
  inline void clear_has_loss_param();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > include_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > exclude_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::RepeatedPtrField< ::std::string> param_;
  ::google::protobuf::RepeatedField<int> blob_share_mode_;
  ::google::protobuf::RepeatedField< float > blobs_lr_;
  ::google::protobuf::RepeatedField< float > weight_decay_;
  ::google::protobuf::RepeatedField< float > loss_weight_;
  ::caffe::AccuracyParameter* accuracy_param_;
  ::caffe::ArgMaxParameter* argmax_param_;
  ::caffe::ConcatParameter* concat_param_;
  ::caffe::ContrastiveLossParameter* contrastive_loss_param_;
  ::caffe::ConvolutionParameter* convolution_param_;
  ::caffe::DataParameter* data_param_;
  ::caffe::DropoutParameter* dropout_param_;
  ::caffe::DummyDataParameter* dummy_data_param_;
  ::caffe::EltwiseParameter* eltwise_param_;
  ::caffe::ExpParameter* exp_param_;
  ::caffe::HDF5DataParameter* hdf5_data_param_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::caffe::HingeLossParameter* hinge_loss_param_;
  ::caffe::ImageDataParameter* image_data_param_;
  ::caffe::InfogainLossParameter* infogain_loss_param_;
  ::caffe::InnerProductParameter* inner_product_param_;
  ::caffe::LRNParameter* lrn_param_;
  ::caffe::MemoryDataParameter* memory_data_param_;
  ::caffe::MVNParameter* mvn_param_;
  ::caffe::PoolingParameter* pooling_param_;
  ::caffe::PowerParameter* power_param_;
  ::caffe::ReLUParameter* relu_param_;
  ::caffe::SigmoidParameter* sigmoid_param_;
  ::caffe::SoftmaxParameter* softmax_param_;
  ::caffe::SliceParameter* slice_param_;
  ::caffe::TanHParameter* tanh_param_;
  ::caffe::ThresholdParameter* threshold_param_;
  ::caffe::WindowDataParameter* window_data_param_;
  ::caffe::TransformationParameter* transform_param_;
  ::caffe::LossParameter* loss_param_;
  ::caffe::V0LayerParameter* layer_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(43 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static V1LayerParameter* default_instance_;
};
// -------------------------------------------------------------------

class V0LayerParameter : public ::google::protobuf::Message {
 public:
  V0LayerParameter();
  virtual ~V0LayerParameter();

  V0LayerParameter(const V0LayerParameter& from);

  inline V0LayerParameter& operator=(const V0LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const V0LayerParameter& default_instance();

  void Swap(V0LayerParameter* other);

  // implements Message ----------------------------------------------

  V0LayerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const V0LayerParameter& from);
  void MergeFrom(const V0LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef V0LayerParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX = V0LayerParameter_PoolMethod_MAX;
  static const PoolMethod AVE = V0LayerParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC = V0LayerParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return V0LayerParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    V0LayerParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    V0LayerParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return V0LayerParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return V0LayerParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return V0LayerParameter_PoolMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional uint32 num_output = 3;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 3;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool biasterm = 4 [default = true];
  inline bool has_biasterm() const;
  inline void clear_biasterm();
  static const int kBiastermFieldNumber = 4;
  inline bool biasterm() const;
  inline void set_biasterm(bool value);

  // optional .caffe.FillerParameter weight_filler = 5;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 5;
  inline const ::caffe::FillerParameter& weight_filler() const;
  inline ::caffe::FillerParameter* mutable_weight_filler();
  inline ::caffe::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 6;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 6;
  inline const ::caffe::FillerParameter& bias_filler() const;
  inline ::caffe::FillerParameter* mutable_bias_filler();
  inline ::caffe::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional uint32 pad = 7 [default = 0];
  inline bool has_pad() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 7;
  inline ::google::protobuf::uint32 pad() const;
  inline void set_pad(::google::protobuf::uint32 value);

  // optional uint32 kernelsize = 8;
  inline bool has_kernelsize() const;
  inline void clear_kernelsize();
  static const int kKernelsizeFieldNumber = 8;
  inline ::google::protobuf::uint32 kernelsize() const;
  inline void set_kernelsize(::google::protobuf::uint32 value);

  // optional uint32 group = 9 [default = 1];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 9;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // optional uint32 stride = 10 [default = 1];
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 10;
  inline ::google::protobuf::uint32 stride() const;
  inline void set_stride(::google::protobuf::uint32 value);

  // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  inline bool has_pool() const;
  inline void clear_pool();
  static const int kPoolFieldNumber = 11;
  inline ::caffe::V0LayerParameter_PoolMethod pool() const;
  inline void set_pool(::caffe::V0LayerParameter_PoolMethod value);

  // optional float dropout_ratio = 12 [default = 0.5];
  inline bool has_dropout_ratio() const;
  inline void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 12;
  inline float dropout_ratio() const;
  inline void set_dropout_ratio(float value);

  // optional uint32 local_size = 13 [default = 5];
  inline bool has_local_size() const;
  inline void clear_local_size();
  static const int kLocalSizeFieldNumber = 13;
  inline ::google::protobuf::uint32 local_size() const;
  inline void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 14 [default = 1];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 14;
  inline float alpha() const;
  inline void set_alpha(float value);

  // optional float beta = 15 [default = 0.75];
  inline bool has_beta() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 15;
  inline float beta() const;
  inline void set_beta(float value);

  // optional float k = 22 [default = 1];
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 22;
  inline float k() const;
  inline void set_k(float value);

  // optional string source = 16;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 16;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional float scale = 17 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 17;
  inline float scale() const;
  inline void set_scale(float value);

  // optional string meanfile = 18;
  inline bool has_meanfile() const;
  inline void clear_meanfile();
  static const int kMeanfileFieldNumber = 18;
  inline const ::std::string& meanfile() const;
  inline void set_meanfile(const ::std::string& value);
  inline void set_meanfile(const char* value);
  inline void set_meanfile(const char* value, size_t size);
  inline ::std::string* mutable_meanfile();
  inline ::std::string* release_meanfile();
  inline void set_allocated_meanfile(::std::string* meanfile);

  // optional uint32 batchsize = 19;
  inline bool has_batchsize() const;
  inline void clear_batchsize();
  static const int kBatchsizeFieldNumber = 19;
  inline ::google::protobuf::uint32 batchsize() const;
  inline void set_batchsize(::google::protobuf::uint32 value);

  // optional uint32 cropsize = 20 [default = 0];
  inline bool has_cropsize() const;
  inline void clear_cropsize();
  static const int kCropsizeFieldNumber = 20;
  inline ::google::protobuf::uint32 cropsize() const;
  inline void set_cropsize(::google::protobuf::uint32 value);

  // optional bool mirror = 21 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 21;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // repeated .caffe.BlobProto blobs = 50;
  inline int blobs_size() const;
  inline void clear_blobs();
  static const int kBlobsFieldNumber = 50;
  inline const ::caffe::BlobProto& blobs(int index) const;
  inline ::caffe::BlobProto* mutable_blobs(int index);
  inline ::caffe::BlobProto* add_blobs();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();

  // repeated float blobs_lr = 51;
  inline int blobs_lr_size() const;
  inline void clear_blobs_lr();
  static const int kBlobsLrFieldNumber = 51;
  inline float blobs_lr(int index) const;
  inline void set_blobs_lr(int index, float value);
  inline void add_blobs_lr(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      blobs_lr() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 52;
  inline int weight_decay_size() const;
  inline void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 52;
  inline float weight_decay(int index) const;
  inline void set_weight_decay(int index, float value);
  inline void add_weight_decay(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      weight_decay() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_weight_decay();

  // optional uint32 rand_skip = 53 [default = 0];
  inline bool has_rand_skip() const;
  inline void clear_rand_skip();
  static const int kRandSkipFieldNumber = 53;
  inline ::google::protobuf::uint32 rand_skip() const;
  inline void set_rand_skip(::google::protobuf::uint32 value);

  // optional float det_fg_threshold = 54 [default = 0.5];
  inline bool has_det_fg_threshold() const;
  inline void clear_det_fg_threshold();
  static const int kDetFgThresholdFieldNumber = 54;
  inline float det_fg_threshold() const;
  inline void set_det_fg_threshold(float value);

  // optional float det_bg_threshold = 55 [default = 0.5];
  inline bool has_det_bg_threshold() const;
  inline void clear_det_bg_threshold();
  static const int kDetBgThresholdFieldNumber = 55;
  inline float det_bg_threshold() const;
  inline void set_det_bg_threshold(float value);

  // optional float det_fg_fraction = 56 [default = 0.25];
  inline bool has_det_fg_fraction() const;
  inline void clear_det_fg_fraction();
  static const int kDetFgFractionFieldNumber = 56;
  inline float det_fg_fraction() const;
  inline void set_det_fg_fraction(float value);

  // optional uint32 det_context_pad = 58 [default = 0];
  inline bool has_det_context_pad() const;
  inline void clear_det_context_pad();
  static const int kDetContextPadFieldNumber = 58;
  inline ::google::protobuf::uint32 det_context_pad() const;
  inline void set_det_context_pad(::google::protobuf::uint32 value);

  // optional string det_crop_mode = 59 [default = "warp"];
  inline bool has_det_crop_mode() const;
  inline void clear_det_crop_mode();
  static const int kDetCropModeFieldNumber = 59;
  inline const ::std::string& det_crop_mode() const;
  inline void set_det_crop_mode(const ::std::string& value);
  inline void set_det_crop_mode(const char* value);
  inline void set_det_crop_mode(const char* value, size_t size);
  inline ::std::string* mutable_det_crop_mode();
  inline ::std::string* release_det_crop_mode();
  inline void set_allocated_det_crop_mode(::std::string* det_crop_mode);

  // optional int32 new_num = 60 [default = 0];
  inline bool has_new_num() const;
  inline void clear_new_num();
  static const int kNewNumFieldNumber = 60;
  inline ::google::protobuf::int32 new_num() const;
  inline void set_new_num(::google::protobuf::int32 value);

  // optional int32 new_channels = 61 [default = 0];
  inline bool has_new_channels() const;
  inline void clear_new_channels();
  static const int kNewChannelsFieldNumber = 61;
  inline ::google::protobuf::int32 new_channels() const;
  inline void set_new_channels(::google::protobuf::int32 value);

  // optional int32 new_height = 62 [default = 0];
  inline bool has_new_height() const;
  inline void clear_new_height();
  static const int kNewHeightFieldNumber = 62;
  inline ::google::protobuf::int32 new_height() const;
  inline void set_new_height(::google::protobuf::int32 value);

  // optional int32 new_width = 63 [default = 0];
  inline bool has_new_width() const;
  inline void clear_new_width();
  static const int kNewWidthFieldNumber = 63;
  inline ::google::protobuf::int32 new_width() const;
  inline void set_new_width(::google::protobuf::int32 value);

  // optional bool shuffle_images = 64 [default = false];
  inline bool has_shuffle_images() const;
  inline void clear_shuffle_images();
  static const int kShuffleImagesFieldNumber = 64;
  inline bool shuffle_images() const;
  inline void set_shuffle_images(bool value);

  // optional uint32 concat_dim = 65 [default = 1];
  inline bool has_concat_dim() const;
  inline void clear_concat_dim();
  static const int kConcatDimFieldNumber = 65;
  inline ::google::protobuf::uint32 concat_dim() const;
  inline void set_concat_dim(::google::protobuf::uint32 value);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
  inline bool has_hdf5_output_param() const;
  inline void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 1001;
  inline const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  inline ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  inline ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  inline void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // @@protoc_insertion_point(class_scope:caffe.V0LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_biasterm();
  inline void clear_has_biasterm();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_pad();
  inline void clear_has_pad();
  inline void set_has_kernelsize();
  inline void clear_has_kernelsize();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_dropout_ratio();
  inline void clear_has_dropout_ratio();
  inline void set_has_local_size();
  inline void clear_has_local_size();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_meanfile();
  inline void clear_has_meanfile();
  inline void set_has_batchsize();
  inline void clear_has_batchsize();
  inline void set_has_cropsize();
  inline void clear_has_cropsize();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_det_fg_threshold();
  inline void clear_has_det_fg_threshold();
  inline void set_has_det_bg_threshold();
  inline void clear_has_det_bg_threshold();
  inline void set_has_det_fg_fraction();
  inline void clear_has_det_fg_fraction();
  inline void set_has_det_context_pad();
  inline void clear_has_det_context_pad();
  inline void set_has_det_crop_mode();
  inline void clear_has_det_crop_mode();
  inline void set_has_new_num();
  inline void clear_has_new_num();
  inline void set_has_new_channels();
  inline void clear_has_new_channels();
  inline void set_has_new_height();
  inline void clear_has_new_height();
  inline void set_has_new_width();
  inline void clear_has_new_width();
  inline void set_has_shuffle_images();
  inline void clear_has_shuffle_images();
  inline void set_has_concat_dim();
  inline void clear_has_concat_dim();
  inline void set_has_hdf5_output_param();
  inline void clear_has_hdf5_output_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* type_;
  ::caffe::FillerParameter* weight_filler_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 kernelsize_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::uint32 stride_;
  int pool_;
  float dropout_ratio_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  float k_;
  float scale_;
  ::std::string* source_;
  ::std::string* meanfile_;
  ::google::protobuf::uint32 batchsize_;
  bool biasterm_;
  bool mirror_;
  bool shuffle_images_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::uint32 cropsize_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::RepeatedField< float > blobs_lr_;
  ::google::protobuf::RepeatedField< float > weight_decay_;
  float det_fg_threshold_;
  float det_bg_threshold_;
  float det_fg_fraction_;
  ::google::protobuf::uint32 det_context_pad_;
  ::std::string* det_crop_mode_;
  static ::std::string* _default_det_crop_mode_;
  ::google::protobuf::int32 new_num_;
  ::google::protobuf::int32 new_channels_;
  ::google::protobuf::int32 new_height_;
  ::google::protobuf::int32 new_width_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::google::protobuf::uint32 concat_dim_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(38 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static V0LayerParameter* default_instance_;
};
// -------------------------------------------------------------------

class PReLUParameter : public ::google::protobuf::Message {
 public:
  PReLUParameter();
  virtual ~PReLUParameter();

  PReLUParameter(const PReLUParameter& from);

  inline PReLUParameter& operator=(const PReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PReLUParameter& default_instance();

  void Swap(PReLUParameter* other);

  // implements Message ----------------------------------------------

  PReLUParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PReLUParameter& from);
  void MergeFrom(const PReLUParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter filler = 1;
  inline bool has_filler() const;
  inline void clear_filler();
  static const int kFillerFieldNumber = 1;
  inline const ::caffe::FillerParameter& filler() const;
  inline ::caffe::FillerParameter* mutable_filler();
  inline ::caffe::FillerParameter* release_filler();
  inline void set_allocated_filler(::caffe::FillerParameter* filler);

  // optional bool channel_shared = 2 [default = false];
  inline bool has_channel_shared() const;
  inline void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 2;
  inline bool channel_shared() const;
  inline void set_channel_shared(bool value);

  // @@protoc_insertion_point(class_scope:caffe.PReLUParameter)
 private:
  inline void set_has_filler();
  inline void clear_has_filler();
  inline void set_has_channel_shared();
  inline void clear_has_channel_shared();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::caffe::FillerParameter* filler_;
  bool channel_shared_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static PReLUParameter* default_instance_;
};
// -------------------------------------------------------------------

class UpsampleParameter : public ::google::protobuf::Message {
 public:
  UpsampleParameter();
  virtual ~UpsampleParameter();

  UpsampleParameter(const UpsampleParameter& from);

  inline UpsampleParameter& operator=(const UpsampleParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpsampleParameter& default_instance();

  void Swap(UpsampleParameter* other);

  // implements Message ----------------------------------------------

  UpsampleParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpsampleParameter& from);
  void MergeFrom(const UpsampleParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 scale = 1 [default = 2];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 1;
  inline ::google::protobuf::uint32 scale() const;
  inline void set_scale(::google::protobuf::uint32 value);

  // optional uint32 scale_h = 2;
  inline bool has_scale_h() const;
  inline void clear_scale_h();
  static const int kScaleHFieldNumber = 2;
  inline ::google::protobuf::uint32 scale_h() const;
  inline void set_scale_h(::google::protobuf::uint32 value);

  // optional uint32 scale_w = 3;
  inline bool has_scale_w() const;
  inline void clear_scale_w();
  static const int kScaleWFieldNumber = 3;
  inline ::google::protobuf::uint32 scale_w() const;
  inline void set_scale_w(::google::protobuf::uint32 value);

  // optional bool pad_out_h = 4 [default = false];
  inline bool has_pad_out_h() const;
  inline void clear_pad_out_h();
  static const int kPadOutHFieldNumber = 4;
  inline bool pad_out_h() const;
  inline void set_pad_out_h(bool value);

  // optional bool pad_out_w = 5 [default = false];
  inline bool has_pad_out_w() const;
  inline void clear_pad_out_w();
  static const int kPadOutWFieldNumber = 5;
  inline bool pad_out_w() const;
  inline void set_pad_out_w(bool value);

  // optional uint32 upsample_h = 6;
  inline bool has_upsample_h() const;
  inline void clear_upsample_h();
  static const int kUpsampleHFieldNumber = 6;
  inline ::google::protobuf::uint32 upsample_h() const;
  inline void set_upsample_h(::google::protobuf::uint32 value);

  // optional uint32 upsample_w = 7;
  inline bool has_upsample_w() const;
  inline void clear_upsample_w();
  static const int kUpsampleWFieldNumber = 7;
  inline ::google::protobuf::uint32 upsample_w() const;
  inline void set_upsample_w(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.UpsampleParameter)
 private:
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_scale_h();
  inline void clear_has_scale_h();
  inline void set_has_scale_w();
  inline void clear_has_scale_w();
  inline void set_has_pad_out_h();
  inline void clear_has_pad_out_h();
  inline void set_has_pad_out_w();
  inline void clear_has_pad_out_w();
  inline void set_has_upsample_h();
  inline void clear_has_upsample_h();
  inline void set_has_upsample_w();
  inline void clear_has_upsample_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 scale_;
  ::google::protobuf::uint32 scale_h_;
  ::google::protobuf::uint32 scale_w_;
  bool pad_out_h_;
  bool pad_out_w_;
  ::google::protobuf::uint32 upsample_h_;
  ::google::protobuf::uint32 upsample_w_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static UpsampleParameter* default_instance_;
};
// ===================================================================


// ===================================================================

// BlobShape

// repeated int64 dim = 1 [packed = true];
inline int BlobShape::dim_size() const {
  return dim_.size();
}
inline void BlobShape::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::int64 BlobShape::dim(int index) const {
  return dim_.Get(index);
}
inline void BlobShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
}
inline void BlobShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobShape::dim() const {
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobShape::mutable_dim() {
  return &dim_;
}

// -------------------------------------------------------------------

// BlobProto

// optional .caffe.BlobShape shape = 7;
inline bool BlobProto::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobProto::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobProto::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
inline const ::caffe::BlobShape& BlobProto::shape() const {
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::caffe::BlobShape* BlobProto::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::caffe::BlobShape;
  return shape_;
}
inline ::caffe::BlobShape* BlobProto::release_shape() {
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void BlobProto::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
}

// repeated float data = 5 [packed = true];
inline int BlobProto::data_size() const {
  return data_.size();
}
inline void BlobProto::clear_data() {
  data_.Clear();
}
inline float BlobProto::data(int index) const {
  return data_.Get(index);
}
inline void BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
}
inline void BlobProto::add_data(float value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_data() {
  return &data_;
}

// repeated float diff = 6 [packed = true];
inline int BlobProto::diff_size() const {
  return diff_.size();
}
inline void BlobProto::clear_diff() {
  diff_.Clear();
}
inline float BlobProto::diff(int index) const {
  return diff_.Get(index);
}
inline void BlobProto::set_diff(int index, float value) {
  diff_.Set(index, value);
}
inline void BlobProto::add_diff(float value) {
  diff_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::diff() const {
  return diff_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_diff() {
  return &diff_;
}

// repeated double double_data = 8 [packed = true];
inline int BlobProto::double_data_size() const {
  return double_data_.size();
}
inline void BlobProto::clear_double_data() {
  double_data_.Clear();
}
inline double BlobProto::double_data(int index) const {
  return double_data_.Get(index);
}
inline void BlobProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
}
inline void BlobProto::add_double_data(double value) {
  double_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_data() const {
  return double_data_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_data() {
  return &double_data_;
}

// repeated double double_diff = 9 [packed = true];
inline int BlobProto::double_diff_size() const {
  return double_diff_.size();
}
inline void BlobProto::clear_double_diff() {
  double_diff_.Clear();
}
inline double BlobProto::double_diff(int index) const {
  return double_diff_.Get(index);
}
inline void BlobProto::set_double_diff(int index, double value) {
  double_diff_.Set(index, value);
}
inline void BlobProto::add_double_diff(double value) {
  double_diff_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_diff() const {
  return double_diff_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_diff() {
  return &double_diff_;
}

// optional int32 num = 1 [default = 0];
inline bool BlobProto::has_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlobProto::set_has_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlobProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlobProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 BlobProto::num() const {
  return num_;
}
inline void BlobProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 channels = 2 [default = 0];
inline bool BlobProto::has_channels() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobProto::set_has_channels() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobProto::clear_has_channels() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobProto::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 BlobProto::channels() const {
  return channels_;
}
inline void BlobProto::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
}

// optional int32 height = 3 [default = 0];
inline bool BlobProto::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlobProto::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlobProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlobProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 BlobProto::height() const {
  return height_;
}
inline void BlobProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// optional int32 width = 4 [default = 0];
inline bool BlobProto::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlobProto::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlobProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlobProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 BlobProto::width() const {
  return width_;
}
inline void BlobProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// -------------------------------------------------------------------

// BlobProtoVector

// repeated .caffe.BlobProto blobs = 1;
inline int BlobProtoVector::blobs_size() const {
  return blobs_.size();
}
inline void BlobProtoVector::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& BlobProtoVector::blobs(int index) const {
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* BlobProtoVector::mutable_blobs(int index) {
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* BlobProtoVector::add_blobs() {
  return blobs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
BlobProtoVector::blobs() const {
  return blobs_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
BlobProtoVector::mutable_blobs() {
  return &blobs_;
}

// -------------------------------------------------------------------

// Datum

// optional int32 channels = 1;
inline bool Datum::has_channels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Datum::set_has_channels() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Datum::clear_has_channels() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Datum::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 Datum::channels() const {
  return channels_;
}
inline void Datum::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
}

// optional int32 height = 2;
inline bool Datum::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Datum::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Datum::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Datum::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 Datum::height() const {
  return height_;
}
inline void Datum::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// optional int32 width = 3;
inline bool Datum::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Datum::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Datum::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Datum::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Datum::width() const {
  return width_;
}
inline void Datum::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional bytes data = 4;
inline bool Datum::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Datum::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Datum::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Datum::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Datum::data() const {
  return *data_;
}
inline void Datum::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Datum::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Datum::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Datum::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Datum::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Datum::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 label = 5;
inline bool Datum::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Datum::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Datum::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Datum::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 Datum::label() const {
  return label_;
}
inline void Datum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
}

// repeated float float_data = 6;
inline int Datum::float_data_size() const {
  return float_data_.size();
}
inline void Datum::clear_float_data() {
  float_data_.Clear();
}
inline float Datum::float_data(int index) const {
  return float_data_.Get(index);
}
inline void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
}
inline void Datum::add_float_data(float value) {
  float_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
Datum::float_data() const {
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
Datum::mutable_float_data() {
  return &float_data_;
}

// optional bool encoded = 7 [default = false];
inline bool Datum::has_encoded() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Datum::set_has_encoded() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Datum::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Datum::clear_encoded() {
  encoded_ = false;
  clear_has_encoded();
}
inline bool Datum::encoded() const {
  return encoded_;
}
inline void Datum::set_encoded(bool value) {
  set_has_encoded();
  encoded_ = value;
}

// -------------------------------------------------------------------

// FillerParameter

// optional string type = 1 [default = "constant"];
inline bool FillerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FillerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FillerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FillerParameter::clear_type() {
  if (type_ != _default_type_) {
    type_->assign(*_default_type_);
  }
  clear_has_type();
}
inline const ::std::string& FillerParameter::type() const {
  return *type_;
}
inline void FillerParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void FillerParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void FillerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FillerParameter::mutable_type() {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string(*_default_type_);
  }
  return type_;
}
inline ::std::string* FillerParameter::release_type() {
  clear_has_type();
  if (type_ == _default_type_) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(_default_type_);
    return temp;
  }
}
inline void FillerParameter::set_allocated_type(::std::string* type) {
  if (type_ != _default_type_) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(_default_type_);
  }
}

// optional float value = 2 [default = 0];
inline bool FillerParameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FillerParameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FillerParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FillerParameter::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float FillerParameter::value() const {
  return value_;
}
inline void FillerParameter::set_value(float value) {
  set_has_value();
  value_ = value;
}

// optional float min = 3 [default = 0];
inline bool FillerParameter::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FillerParameter::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FillerParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FillerParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline float FillerParameter::min() const {
  return min_;
}
inline void FillerParameter::set_min(float value) {
  set_has_min();
  min_ = value;
}

// optional float max = 4 [default = 1];
inline bool FillerParameter::has_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FillerParameter::set_has_max() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FillerParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FillerParameter::clear_max() {
  max_ = 1;
  clear_has_max();
}
inline float FillerParameter::max() const {
  return max_;
}
inline void FillerParameter::set_max(float value) {
  set_has_max();
  max_ = value;
}

// optional float mean = 5 [default = 0];
inline bool FillerParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FillerParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FillerParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FillerParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float FillerParameter::mean() const {
  return mean_;
}
inline void FillerParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
}

// optional float std = 6 [default = 1];
inline bool FillerParameter::has_std() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FillerParameter::set_has_std() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FillerParameter::clear_has_std() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FillerParameter::clear_std() {
  std_ = 1;
  clear_has_std();
}
inline float FillerParameter::std() const {
  return std_;
}
inline void FillerParameter::set_std(float value) {
  set_has_std();
  std_ = value;
}

// optional int32 sparse = 7 [default = -1];
inline bool FillerParameter::has_sparse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FillerParameter::set_has_sparse() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FillerParameter::clear_has_sparse() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FillerParameter::clear_sparse() {
  sparse_ = -1;
  clear_has_sparse();
}
inline ::google::protobuf::int32 FillerParameter::sparse() const {
  return sparse_;
}
inline void FillerParameter::set_sparse(::google::protobuf::int32 value) {
  set_has_sparse();
  sparse_ = value;
}

// optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
inline bool FillerParameter::has_variance_norm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FillerParameter::set_has_variance_norm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FillerParameter::clear_has_variance_norm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FillerParameter::clear_variance_norm() {
  variance_norm_ = 0;
  clear_has_variance_norm();
}
inline ::caffe::FillerParameter_VarianceNorm FillerParameter::variance_norm() const {
  return static_cast< ::caffe::FillerParameter_VarianceNorm >(variance_norm_);
}
inline void FillerParameter::set_variance_norm(::caffe::FillerParameter_VarianceNorm value) {
  assert(::caffe::FillerParameter_VarianceNorm_IsValid(value));
  set_has_variance_norm();
  variance_norm_ = value;
}

// -------------------------------------------------------------------

// NetParameter

// optional string name = 1;
inline bool NetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetParameter::name() const {
  return *name_;
}
inline void NetParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NetParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string input = 3;
inline int NetParameter::input_size() const {
  return input_.size();
}
inline void NetParameter::clear_input() {
  input_.Clear();
}
inline const ::std::string& NetParameter::input(int index) const {
  return input_.Get(index);
}
inline ::std::string* NetParameter::mutable_input(int index) {
  return input_.Mutable(index);
}
inline void NetParameter::set_input(int index, const ::std::string& value) {
  input_.Mutable(index)->assign(value);
}
inline void NetParameter::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
}
inline void NetParameter::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetParameter::add_input() {
  return input_.Add();
}
inline void NetParameter::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
}
inline void NetParameter::add_input(const char* value) {
  input_.Add()->assign(value);
}
inline void NetParameter::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetParameter::input() const {
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetParameter::mutable_input() {
  return &input_;
}

// repeated .caffe.BlobShape input_shape = 8;
inline int NetParameter::input_shape_size() const {
  return input_shape_.size();
}
inline void NetParameter::clear_input_shape() {
  input_shape_.Clear();
}
inline const ::caffe::BlobShape& NetParameter::input_shape(int index) const {
  return input_shape_.Get(index);
}
inline ::caffe::BlobShape* NetParameter::mutable_input_shape(int index) {
  return input_shape_.Mutable(index);
}
inline ::caffe::BlobShape* NetParameter::add_input_shape() {
  return input_shape_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
NetParameter::input_shape() const {
  return input_shape_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
NetParameter::mutable_input_shape() {
  return &input_shape_;
}

// repeated int32 input_dim = 4;
inline int NetParameter::input_dim_size() const {
  return input_dim_.size();
}
inline void NetParameter::clear_input_dim() {
  input_dim_.Clear();
}
inline ::google::protobuf::int32 NetParameter::input_dim(int index) const {
  return input_dim_.Get(index);
}
inline void NetParameter::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
}
inline void NetParameter::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetParameter::input_dim() const {
  return input_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetParameter::mutable_input_dim() {
  return &input_dim_;
}

// optional bool force_backward = 5 [default = false];
inline bool NetParameter::has_force_backward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetParameter::set_has_force_backward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetParameter::clear_has_force_backward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetParameter::clear_force_backward() {
  force_backward_ = false;
  clear_has_force_backward();
}
inline bool NetParameter::force_backward() const {
  return force_backward_;
}
inline void NetParameter::set_force_backward(bool value) {
  set_has_force_backward();
  force_backward_ = value;
}

// optional .caffe.NetState state = 6;
inline bool NetParameter::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetParameter::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetParameter::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetParameter::clear_state() {
  if (state_ != NULL) state_->::caffe::NetState::Clear();
  clear_has_state();
}
inline const ::caffe::NetState& NetParameter::state() const {
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::caffe::NetState* NetParameter::mutable_state() {
  set_has_state();
  if (state_ == NULL) state_ = new ::caffe::NetState;
  return state_;
}
inline ::caffe::NetState* NetParameter::release_state() {
  clear_has_state();
  ::caffe::NetState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void NetParameter::set_allocated_state(::caffe::NetState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
}

// optional bool debug_info = 7 [default = false];
inline bool NetParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool NetParameter::debug_info() const {
  return debug_info_;
}
inline void NetParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
}

// repeated .caffe.LayerParameter layer = 100;
inline int NetParameter::layer_size() const {
  return layer_.size();
}
inline void NetParameter::clear_layer() {
  layer_.Clear();
}
inline const ::caffe::LayerParameter& NetParameter::layer(int index) const {
  return layer_.Get(index);
}
inline ::caffe::LayerParameter* NetParameter::mutable_layer(int index) {
  return layer_.Mutable(index);
}
inline ::caffe::LayerParameter* NetParameter::add_layer() {
  return layer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
NetParameter::layer() const {
  return layer_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
NetParameter::mutable_layer() {
  return &layer_;
}

// repeated .caffe.V1LayerParameter layers = 2;
inline int NetParameter::layers_size() const {
  return layers_.size();
}
inline void NetParameter::clear_layers() {
  layers_.Clear();
}
inline const ::caffe::V1LayerParameter& NetParameter::layers(int index) const {
  return layers_.Get(index);
}
inline ::caffe::V1LayerParameter* NetParameter::mutable_layers(int index) {
  return layers_.Mutable(index);
}
inline ::caffe::V1LayerParameter* NetParameter::add_layers() {
  return layers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >&
NetParameter::layers() const {
  return layers_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >*
NetParameter::mutable_layers() {
  return &layers_;
}

// -------------------------------------------------------------------

// TestProto

// optional .caffe.TestProto.TestType test_type = 1;
inline bool TestProto::has_test_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestProto::set_has_test_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestProto::clear_has_test_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestProto::clear_test_type() {
  test_type_ = 0;
  clear_has_test_type();
}
inline ::caffe::TestProto_TestType TestProto::test_type() const {
  return static_cast< ::caffe::TestProto_TestType >(test_type_);
}
inline void TestProto::set_test_type(::caffe::TestProto_TestType value) {
  assert(::caffe::TestProto_TestType_IsValid(value));
  set_has_test_type();
  test_type_ = value;
}

// optional string test_file = 2;
inline bool TestProto::has_test_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestProto::set_has_test_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestProto::clear_has_test_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestProto::clear_test_file() {
  if (test_file_ != &::google::protobuf::internal::kEmptyString) {
    test_file_->clear();
  }
  clear_has_test_file();
}
inline const ::std::string& TestProto::test_file() const {
  return *test_file_;
}
inline void TestProto::set_test_file(const ::std::string& value) {
  set_has_test_file();
  if (test_file_ == &::google::protobuf::internal::kEmptyString) {
    test_file_ = new ::std::string;
  }
  test_file_->assign(value);
}
inline void TestProto::set_test_file(const char* value) {
  set_has_test_file();
  if (test_file_ == &::google::protobuf::internal::kEmptyString) {
    test_file_ = new ::std::string;
  }
  test_file_->assign(value);
}
inline void TestProto::set_test_file(const char* value, size_t size) {
  set_has_test_file();
  if (test_file_ == &::google::protobuf::internal::kEmptyString) {
    test_file_ = new ::std::string;
  }
  test_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestProto::mutable_test_file() {
  set_has_test_file();
  if (test_file_ == &::google::protobuf::internal::kEmptyString) {
    test_file_ = new ::std::string;
  }
  return test_file_;
}
inline ::std::string* TestProto::release_test_file() {
  clear_has_test_file();
  if (test_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_file_;
    test_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TestProto::set_allocated_test_file(::std::string* test_file) {
  if (test_file_ != &::google::protobuf::internal::kEmptyString) {
    delete test_file_;
  }
  if (test_file) {
    set_has_test_file();
    test_file_ = test_file;
  } else {
    clear_has_test_file();
    test_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string map_file = 6;
inline bool TestProto::has_map_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TestProto::set_has_map_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TestProto::clear_has_map_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TestProto::clear_map_file() {
  if (map_file_ != &::google::protobuf::internal::kEmptyString) {
    map_file_->clear();
  }
  clear_has_map_file();
}
inline const ::std::string& TestProto::map_file() const {
  return *map_file_;
}
inline void TestProto::set_map_file(const ::std::string& value) {
  set_has_map_file();
  if (map_file_ == &::google::protobuf::internal::kEmptyString) {
    map_file_ = new ::std::string;
  }
  map_file_->assign(value);
}
inline void TestProto::set_map_file(const char* value) {
  set_has_map_file();
  if (map_file_ == &::google::protobuf::internal::kEmptyString) {
    map_file_ = new ::std::string;
  }
  map_file_->assign(value);
}
inline void TestProto::set_map_file(const char* value, size_t size) {
  set_has_map_file();
  if (map_file_ == &::google::protobuf::internal::kEmptyString) {
    map_file_ = new ::std::string;
  }
  map_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestProto::mutable_map_file() {
  set_has_map_file();
  if (map_file_ == &::google::protobuf::internal::kEmptyString) {
    map_file_ = new ::std::string;
  }
  return map_file_;
}
inline ::std::string* TestProto::release_map_file() {
  clear_has_map_file();
  if (map_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = map_file_;
    map_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TestProto::set_allocated_map_file(::std::string* map_file) {
  if (map_file_ != &::google::protobuf::internal::kEmptyString) {
    delete map_file_;
  }
  if (map_file) {
    set_has_map_file();
    map_file_ = map_file;
  } else {
    clear_has_map_file();
    map_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .caffe.AffineImageParameter affine_image_param = 3;
inline int TestProto::affine_image_param_size() const {
  return affine_image_param_.size();
}
inline void TestProto::clear_affine_image_param() {
  affine_image_param_.Clear();
}
inline const ::caffe::AffineImageParameter& TestProto::affine_image_param(int index) const {
  return affine_image_param_.Get(index);
}
inline ::caffe::AffineImageParameter* TestProto::mutable_affine_image_param(int index) {
  return affine_image_param_.Mutable(index);
}
inline ::caffe::AffineImageParameter* TestProto::add_affine_image_param() {
  return affine_image_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter >&
TestProto::affine_image_param() const {
  return affine_image_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter >*
TestProto::mutable_affine_image_param() {
  return &affine_image_param_;
}

// optional string deploy_net = 4;
inline bool TestProto::has_deploy_net() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TestProto::set_has_deploy_net() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TestProto::clear_has_deploy_net() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TestProto::clear_deploy_net() {
  if (deploy_net_ != &::google::protobuf::internal::kEmptyString) {
    deploy_net_->clear();
  }
  clear_has_deploy_net();
}
inline const ::std::string& TestProto::deploy_net() const {
  return *deploy_net_;
}
inline void TestProto::set_deploy_net(const ::std::string& value) {
  set_has_deploy_net();
  if (deploy_net_ == &::google::protobuf::internal::kEmptyString) {
    deploy_net_ = new ::std::string;
  }
  deploy_net_->assign(value);
}
inline void TestProto::set_deploy_net(const char* value) {
  set_has_deploy_net();
  if (deploy_net_ == &::google::protobuf::internal::kEmptyString) {
    deploy_net_ = new ::std::string;
  }
  deploy_net_->assign(value);
}
inline void TestProto::set_deploy_net(const char* value, size_t size) {
  set_has_deploy_net();
  if (deploy_net_ == &::google::protobuf::internal::kEmptyString) {
    deploy_net_ = new ::std::string;
  }
  deploy_net_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestProto::mutable_deploy_net() {
  set_has_deploy_net();
  if (deploy_net_ == &::google::protobuf::internal::kEmptyString) {
    deploy_net_ = new ::std::string;
  }
  return deploy_net_;
}
inline ::std::string* TestProto::release_deploy_net() {
  clear_has_deploy_net();
  if (deploy_net_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deploy_net_;
    deploy_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TestProto::set_allocated_deploy_net(::std::string* deploy_net) {
  if (deploy_net_ != &::google::protobuf::internal::kEmptyString) {
    delete deploy_net_;
  }
  if (deploy_net) {
    set_has_deploy_net();
    deploy_net_ = deploy_net;
  } else {
    clear_has_deploy_net();
    deploy_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 key_points_count = 5;
inline bool TestProto::has_key_points_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TestProto::set_has_key_points_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TestProto::clear_has_key_points_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TestProto::clear_key_points_count() {
  key_points_count_ = 0;
  clear_has_key_points_count();
}
inline ::google::protobuf::int32 TestProto::key_points_count() const {
  return key_points_count_;
}
inline void TestProto::set_key_points_count(::google::protobuf::int32 value) {
  set_has_key_points_count();
  key_points_count_ = value;
}

// optional string data_folder = 7;
inline bool TestProto::has_data_folder() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TestProto::set_has_data_folder() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TestProto::clear_has_data_folder() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TestProto::clear_data_folder() {
  if (data_folder_ != &::google::protobuf::internal::kEmptyString) {
    data_folder_->clear();
  }
  clear_has_data_folder();
}
inline const ::std::string& TestProto::data_folder() const {
  return *data_folder_;
}
inline void TestProto::set_data_folder(const ::std::string& value) {
  set_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    data_folder_ = new ::std::string;
  }
  data_folder_->assign(value);
}
inline void TestProto::set_data_folder(const char* value) {
  set_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    data_folder_ = new ::std::string;
  }
  data_folder_->assign(value);
}
inline void TestProto::set_data_folder(const char* value, size_t size) {
  set_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    data_folder_ = new ::std::string;
  }
  data_folder_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestProto::mutable_data_folder() {
  set_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    data_folder_ = new ::std::string;
  }
  return data_folder_;
}
inline ::std::string* TestProto::release_data_folder() {
  clear_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_folder_;
    data_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TestProto::set_allocated_data_folder(::std::string* data_folder) {
  if (data_folder_ != &::google::protobuf::internal::kEmptyString) {
    delete data_folder_;
  }
  if (data_folder) {
    set_has_data_folder();
    data_folder_ = data_folder;
  } else {
    clear_has_data_folder();
    data_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string output_layername = 8;
inline bool TestProto::has_output_layername() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TestProto::set_has_output_layername() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TestProto::clear_has_output_layername() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TestProto::clear_output_layername() {
  if (output_layername_ != &::google::protobuf::internal::kEmptyString) {
    output_layername_->clear();
  }
  clear_has_output_layername();
}
inline const ::std::string& TestProto::output_layername() const {
  return *output_layername_;
}
inline void TestProto::set_output_layername(const ::std::string& value) {
  set_has_output_layername();
  if (output_layername_ == &::google::protobuf::internal::kEmptyString) {
    output_layername_ = new ::std::string;
  }
  output_layername_->assign(value);
}
inline void TestProto::set_output_layername(const char* value) {
  set_has_output_layername();
  if (output_layername_ == &::google::protobuf::internal::kEmptyString) {
    output_layername_ = new ::std::string;
  }
  output_layername_->assign(value);
}
inline void TestProto::set_output_layername(const char* value, size_t size) {
  set_has_output_layername();
  if (output_layername_ == &::google::protobuf::internal::kEmptyString) {
    output_layername_ = new ::std::string;
  }
  output_layername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestProto::mutable_output_layername() {
  set_has_output_layername();
  if (output_layername_ == &::google::protobuf::internal::kEmptyString) {
    output_layername_ = new ::std::string;
  }
  return output_layername_;
}
inline ::std::string* TestProto::release_output_layername() {
  clear_has_output_layername();
  if (output_layername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = output_layername_;
    output_layername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TestProto::set_allocated_output_layername(::std::string* output_layername) {
  if (output_layername_ != &::google::protobuf::internal::kEmptyString) {
    delete output_layername_;
  }
  if (output_layername) {
    set_has_output_layername();
    output_layername_ = output_layername;
  } else {
    clear_has_output_layername();
    output_layername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float datascale = 9 [default = 1];
inline bool TestProto::has_datascale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TestProto::set_has_datascale() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TestProto::clear_has_datascale() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TestProto::clear_datascale() {
  datascale_ = 1;
  clear_has_datascale();
}
inline float TestProto::datascale() const {
  return datascale_;
}
inline void TestProto::set_datascale(float value) {
  set_has_datascale();
  datascale_ = value;
}

// optional float meanvalue = 10 [default = 0];
inline bool TestProto::has_meanvalue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TestProto::set_has_meanvalue() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TestProto::clear_has_meanvalue() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TestProto::clear_meanvalue() {
  meanvalue_ = 0;
  clear_has_meanvalue();
}
inline float TestProto::meanvalue() const {
  return meanvalue_;
}
inline void TestProto::set_meanvalue(float value) {
  set_has_meanvalue();
  meanvalue_ = value;
}

// repeated int32 topn = 11;
inline int TestProto::topn_size() const {
  return topn_.size();
}
inline void TestProto::clear_topn() {
  topn_.Clear();
}
inline ::google::protobuf::int32 TestProto::topn(int index) const {
  return topn_.Get(index);
}
inline void TestProto::set_topn(int index, ::google::protobuf::int32 value) {
  topn_.Set(index, value);
}
inline void TestProto::add_topn(::google::protobuf::int32 value) {
  topn_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TestProto::topn() const {
  return topn_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TestProto::mutable_topn() {
  return &topn_;
}

// optional string save_feature_filename = 12 [default = ""];
inline bool TestProto::has_save_feature_filename() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TestProto::set_has_save_feature_filename() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TestProto::clear_has_save_feature_filename() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TestProto::clear_save_feature_filename() {
  if (save_feature_filename_ != &::google::protobuf::internal::kEmptyString) {
    save_feature_filename_->clear();
  }
  clear_has_save_feature_filename();
}
inline const ::std::string& TestProto::save_feature_filename() const {
  return *save_feature_filename_;
}
inline void TestProto::set_save_feature_filename(const ::std::string& value) {
  set_has_save_feature_filename();
  if (save_feature_filename_ == &::google::protobuf::internal::kEmptyString) {
    save_feature_filename_ = new ::std::string;
  }
  save_feature_filename_->assign(value);
}
inline void TestProto::set_save_feature_filename(const char* value) {
  set_has_save_feature_filename();
  if (save_feature_filename_ == &::google::protobuf::internal::kEmptyString) {
    save_feature_filename_ = new ::std::string;
  }
  save_feature_filename_->assign(value);
}
inline void TestProto::set_save_feature_filename(const char* value, size_t size) {
  set_has_save_feature_filename();
  if (save_feature_filename_ == &::google::protobuf::internal::kEmptyString) {
    save_feature_filename_ = new ::std::string;
  }
  save_feature_filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestProto::mutable_save_feature_filename() {
  set_has_save_feature_filename();
  if (save_feature_filename_ == &::google::protobuf::internal::kEmptyString) {
    save_feature_filename_ = new ::std::string;
  }
  return save_feature_filename_;
}
inline ::std::string* TestProto::release_save_feature_filename() {
  clear_has_save_feature_filename();
  if (save_feature_filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = save_feature_filename_;
    save_feature_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TestProto::set_allocated_save_feature_filename(::std::string* save_feature_filename) {
  if (save_feature_filename_ != &::google::protobuf::internal::kEmptyString) {
    delete save_feature_filename_;
  }
  if (save_feature_filename) {
    set_has_save_feature_filename();
    save_feature_filename_ = save_feature_filename;
  } else {
    clear_has_save_feature_filename();
    save_feature_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string source_splitflag = 13 [default = "||"];
inline bool TestProto::has_source_splitflag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TestProto::set_has_source_splitflag() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TestProto::clear_has_source_splitflag() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TestProto::clear_source_splitflag() {
  if (source_splitflag_ != _default_source_splitflag_) {
    source_splitflag_->assign(*_default_source_splitflag_);
  }
  clear_has_source_splitflag();
}
inline const ::std::string& TestProto::source_splitflag() const {
  return *source_splitflag_;
}
inline void TestProto::set_source_splitflag(const ::std::string& value) {
  set_has_source_splitflag();
  if (source_splitflag_ == _default_source_splitflag_) {
    source_splitflag_ = new ::std::string;
  }
  source_splitflag_->assign(value);
}
inline void TestProto::set_source_splitflag(const char* value) {
  set_has_source_splitflag();
  if (source_splitflag_ == _default_source_splitflag_) {
    source_splitflag_ = new ::std::string;
  }
  source_splitflag_->assign(value);
}
inline void TestProto::set_source_splitflag(const char* value, size_t size) {
  set_has_source_splitflag();
  if (source_splitflag_ == _default_source_splitflag_) {
    source_splitflag_ = new ::std::string;
  }
  source_splitflag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestProto::mutable_source_splitflag() {
  set_has_source_splitflag();
  if (source_splitflag_ == _default_source_splitflag_) {
    source_splitflag_ = new ::std::string(*_default_source_splitflag_);
  }
  return source_splitflag_;
}
inline ::std::string* TestProto::release_source_splitflag() {
  clear_has_source_splitflag();
  if (source_splitflag_ == _default_source_splitflag_) {
    return NULL;
  } else {
    ::std::string* temp = source_splitflag_;
    source_splitflag_ = const_cast< ::std::string*>(_default_source_splitflag_);
    return temp;
  }
}
inline void TestProto::set_allocated_source_splitflag(::std::string* source_splitflag) {
  if (source_splitflag_ != _default_source_splitflag_) {
    delete source_splitflag_;
  }
  if (source_splitflag) {
    set_has_source_splitflag();
    source_splitflag_ = source_splitflag;
  } else {
    clear_has_source_splitflag();
    source_splitflag_ = const_cast< ::std::string*>(_default_source_splitflag_);
  }
}

// optional int32 data_channels = 14;
inline bool TestProto::has_data_channels() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TestProto::set_has_data_channels() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TestProto::clear_has_data_channels() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TestProto::clear_data_channels() {
  data_channels_ = 0;
  clear_has_data_channels();
}
inline ::google::protobuf::int32 TestProto::data_channels() const {
  return data_channels_;
}
inline void TestProto::set_data_channels(::google::protobuf::int32 value) {
  set_has_data_channels();
  data_channels_ = value;
}

// optional int32 width = 15;
inline bool TestProto::has_width() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TestProto::set_has_width() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TestProto::clear_has_width() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TestProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 TestProto::width() const {
  return width_;
}
inline void TestProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 height = 16;
inline bool TestProto::has_height() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TestProto::set_has_height() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TestProto::clear_has_height() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TestProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 TestProto::height() const {
  return height_;
}
inline void TestProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// optional int32 out_height = 17;
inline bool TestProto::has_out_height() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TestProto::set_has_out_height() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TestProto::clear_has_out_height() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TestProto::clear_out_height() {
  out_height_ = 0;
  clear_has_out_height();
}
inline ::google::protobuf::int32 TestProto::out_height() const {
  return out_height_;
}
inline void TestProto::set_out_height(::google::protobuf::int32 value) {
  set_has_out_height();
  out_height_ = value;
}

// optional int32 out_width = 18;
inline bool TestProto::has_out_width() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TestProto::set_has_out_width() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TestProto::clear_has_out_width() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TestProto::clear_out_width() {
  out_width_ = 0;
  clear_has_out_width();
}
inline ::google::protobuf::int32 TestProto::out_width() const {
  return out_width_;
}
inline void TestProto::set_out_width(::google::protobuf::int32 value) {
  set_has_out_width();
  out_width_ = value;
}

// optional int32 out_channels = 19;
inline bool TestProto::has_out_channels() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TestProto::set_has_out_channels() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TestProto::clear_has_out_channels() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TestProto::clear_out_channels() {
  out_channels_ = 0;
  clear_has_out_channels();
}
inline ::google::protobuf::int32 TestProto::out_channels() const {
  return out_channels_;
}
inline void TestProto::set_out_channels(::google::protobuf::int32 value) {
  set_has_out_channels();
  out_channels_ = value;
}

// -------------------------------------------------------------------

// TestProtos

// repeated .caffe.TestProto test_proto = 1;
inline int TestProtos::test_proto_size() const {
  return test_proto_.size();
}
inline void TestProtos::clear_test_proto() {
  test_proto_.Clear();
}
inline const ::caffe::TestProto& TestProtos::test_proto(int index) const {
  return test_proto_.Get(index);
}
inline ::caffe::TestProto* TestProtos::mutable_test_proto(int index) {
  return test_proto_.Mutable(index);
}
inline ::caffe::TestProto* TestProtos::add_test_proto() {
  return test_proto_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::TestProto >&
TestProtos::test_proto() const {
  return test_proto_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::TestProto >*
TestProtos::mutable_test_proto() {
  return &test_proto_;
}

// -------------------------------------------------------------------

// SolverParameter

// optional string net = 24;
inline bool SolverParameter::has_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverParameter::set_has_net() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverParameter::clear_has_net() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverParameter::clear_net() {
  if (net_ != &::google::protobuf::internal::kEmptyString) {
    net_->clear();
  }
  clear_has_net();
}
inline const ::std::string& SolverParameter::net() const {
  return *net_;
}
inline void SolverParameter::set_net(const ::std::string& value) {
  set_has_net();
  if (net_ == &::google::protobuf::internal::kEmptyString) {
    net_ = new ::std::string;
  }
  net_->assign(value);
}
inline void SolverParameter::set_net(const char* value) {
  set_has_net();
  if (net_ == &::google::protobuf::internal::kEmptyString) {
    net_ = new ::std::string;
  }
  net_->assign(value);
}
inline void SolverParameter::set_net(const char* value, size_t size) {
  set_has_net();
  if (net_ == &::google::protobuf::internal::kEmptyString) {
    net_ = new ::std::string;
  }
  net_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SolverParameter::mutable_net() {
  set_has_net();
  if (net_ == &::google::protobuf::internal::kEmptyString) {
    net_ = new ::std::string;
  }
  return net_;
}
inline ::std::string* SolverParameter::release_net() {
  clear_has_net();
  if (net_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = net_;
    net_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SolverParameter::set_allocated_net(::std::string* net) {
  if (net_ != &::google::protobuf::internal::kEmptyString) {
    delete net_;
  }
  if (net) {
    set_has_net();
    net_ = net;
  } else {
    clear_has_net();
    net_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .caffe.NetParameter net_param = 25;
inline bool SolverParameter::has_net_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverParameter::set_has_net_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverParameter::clear_has_net_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverParameter::clear_net_param() {
  if (net_param_ != NULL) net_param_->::caffe::NetParameter::Clear();
  clear_has_net_param();
}
inline const ::caffe::NetParameter& SolverParameter::net_param() const {
  return net_param_ != NULL ? *net_param_ : *default_instance_->net_param_;
}
inline ::caffe::NetParameter* SolverParameter::mutable_net_param() {
  set_has_net_param();
  if (net_param_ == NULL) net_param_ = new ::caffe::NetParameter;
  return net_param_;
}
inline ::caffe::NetParameter* SolverParameter::release_net_param() {
  clear_has_net_param();
  ::caffe::NetParameter* temp = net_param_;
  net_param_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_net_param(::caffe::NetParameter* net_param) {
  delete net_param_;
  net_param_ = net_param;
  if (net_param) {
    set_has_net_param();
  } else {
    clear_has_net_param();
  }
}

// optional string train_net = 1;
inline bool SolverParameter::has_train_net() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverParameter::set_has_train_net() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverParameter::clear_has_train_net() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverParameter::clear_train_net() {
  if (train_net_ != &::google::protobuf::internal::kEmptyString) {
    train_net_->clear();
  }
  clear_has_train_net();
}
inline const ::std::string& SolverParameter::train_net() const {
  return *train_net_;
}
inline void SolverParameter::set_train_net(const ::std::string& value) {
  set_has_train_net();
  if (train_net_ == &::google::protobuf::internal::kEmptyString) {
    train_net_ = new ::std::string;
  }
  train_net_->assign(value);
}
inline void SolverParameter::set_train_net(const char* value) {
  set_has_train_net();
  if (train_net_ == &::google::protobuf::internal::kEmptyString) {
    train_net_ = new ::std::string;
  }
  train_net_->assign(value);
}
inline void SolverParameter::set_train_net(const char* value, size_t size) {
  set_has_train_net();
  if (train_net_ == &::google::protobuf::internal::kEmptyString) {
    train_net_ = new ::std::string;
  }
  train_net_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SolverParameter::mutable_train_net() {
  set_has_train_net();
  if (train_net_ == &::google::protobuf::internal::kEmptyString) {
    train_net_ = new ::std::string;
  }
  return train_net_;
}
inline ::std::string* SolverParameter::release_train_net() {
  clear_has_train_net();
  if (train_net_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = train_net_;
    train_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SolverParameter::set_allocated_train_net(::std::string* train_net) {
  if (train_net_ != &::google::protobuf::internal::kEmptyString) {
    delete train_net_;
  }
  if (train_net) {
    set_has_train_net();
    train_net_ = train_net;
  } else {
    clear_has_train_net();
    train_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string test_net = 2;
inline int SolverParameter::test_net_size() const {
  return test_net_.size();
}
inline void SolverParameter::clear_test_net() {
  test_net_.Clear();
}
inline const ::std::string& SolverParameter::test_net(int index) const {
  return test_net_.Get(index);
}
inline ::std::string* SolverParameter::mutable_test_net(int index) {
  return test_net_.Mutable(index);
}
inline void SolverParameter::set_test_net(int index, const ::std::string& value) {
  test_net_.Mutable(index)->assign(value);
}
inline void SolverParameter::set_test_net(int index, const char* value) {
  test_net_.Mutable(index)->assign(value);
}
inline void SolverParameter::set_test_net(int index, const char* value, size_t size) {
  test_net_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SolverParameter::add_test_net() {
  return test_net_.Add();
}
inline void SolverParameter::add_test_net(const ::std::string& value) {
  test_net_.Add()->assign(value);
}
inline void SolverParameter::add_test_net(const char* value) {
  test_net_.Add()->assign(value);
}
inline void SolverParameter::add_test_net(const char* value, size_t size) {
  test_net_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolverParameter::test_net() const {
  return test_net_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SolverParameter::mutable_test_net() {
  return &test_net_;
}

// optional .caffe.NetParameter train_net_param = 21;
inline bool SolverParameter::has_train_net_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolverParameter::set_has_train_net_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolverParameter::clear_has_train_net_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolverParameter::clear_train_net_param() {
  if (train_net_param_ != NULL) train_net_param_->::caffe::NetParameter::Clear();
  clear_has_train_net_param();
}
inline const ::caffe::NetParameter& SolverParameter::train_net_param() const {
  return train_net_param_ != NULL ? *train_net_param_ : *default_instance_->train_net_param_;
}
inline ::caffe::NetParameter* SolverParameter::mutable_train_net_param() {
  set_has_train_net_param();
  if (train_net_param_ == NULL) train_net_param_ = new ::caffe::NetParameter;
  return train_net_param_;
}
inline ::caffe::NetParameter* SolverParameter::release_train_net_param() {
  clear_has_train_net_param();
  ::caffe::NetParameter* temp = train_net_param_;
  train_net_param_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_train_net_param(::caffe::NetParameter* train_net_param) {
  delete train_net_param_;
  train_net_param_ = train_net_param;
  if (train_net_param) {
    set_has_train_net_param();
  } else {
    clear_has_train_net_param();
  }
}

// repeated .caffe.NetParameter test_net_param = 22;
inline int SolverParameter::test_net_param_size() const {
  return test_net_param_.size();
}
inline void SolverParameter::clear_test_net_param() {
  test_net_param_.Clear();
}
inline const ::caffe::NetParameter& SolverParameter::test_net_param(int index) const {
  return test_net_param_.Get(index);
}
inline ::caffe::NetParameter* SolverParameter::mutable_test_net_param(int index) {
  return test_net_param_.Mutable(index);
}
inline ::caffe::NetParameter* SolverParameter::add_test_net_param() {
  return test_net_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >&
SolverParameter::test_net_param() const {
  return test_net_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >*
SolverParameter::mutable_test_net_param() {
  return &test_net_param_;
}

// optional .caffe.NetState train_state = 26;
inline bool SolverParameter::has_train_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SolverParameter::set_has_train_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SolverParameter::clear_has_train_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SolverParameter::clear_train_state() {
  if (train_state_ != NULL) train_state_->::caffe::NetState::Clear();
  clear_has_train_state();
}
inline const ::caffe::NetState& SolverParameter::train_state() const {
  return train_state_ != NULL ? *train_state_ : *default_instance_->train_state_;
}
inline ::caffe::NetState* SolverParameter::mutable_train_state() {
  set_has_train_state();
  if (train_state_ == NULL) train_state_ = new ::caffe::NetState;
  return train_state_;
}
inline ::caffe::NetState* SolverParameter::release_train_state() {
  clear_has_train_state();
  ::caffe::NetState* temp = train_state_;
  train_state_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_train_state(::caffe::NetState* train_state) {
  delete train_state_;
  train_state_ = train_state;
  if (train_state) {
    set_has_train_state();
  } else {
    clear_has_train_state();
  }
}

// repeated .caffe.NetState test_state = 27;
inline int SolverParameter::test_state_size() const {
  return test_state_.size();
}
inline void SolverParameter::clear_test_state() {
  test_state_.Clear();
}
inline const ::caffe::NetState& SolverParameter::test_state(int index) const {
  return test_state_.Get(index);
}
inline ::caffe::NetState* SolverParameter::mutable_test_state(int index) {
  return test_state_.Mutable(index);
}
inline ::caffe::NetState* SolverParameter::add_test_state() {
  return test_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
SolverParameter::test_state() const {
  return test_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
SolverParameter::mutable_test_state() {
  return &test_state_;
}

// repeated int32 test_iter = 3;
inline int SolverParameter::test_iter_size() const {
  return test_iter_.size();
}
inline void SolverParameter::clear_test_iter() {
  test_iter_.Clear();
}
inline ::google::protobuf::int32 SolverParameter::test_iter(int index) const {
  return test_iter_.Get(index);
}
inline void SolverParameter::set_test_iter(int index, ::google::protobuf::int32 value) {
  test_iter_.Set(index, value);
}
inline void SolverParameter::add_test_iter(::google::protobuf::int32 value) {
  test_iter_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::test_iter() const {
  return test_iter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_test_iter() {
  return &test_iter_;
}

// optional int32 test_interval = 4 [default = 0];
inline bool SolverParameter::has_test_interval() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SolverParameter::set_has_test_interval() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SolverParameter::clear_has_test_interval() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SolverParameter::clear_test_interval() {
  test_interval_ = 0;
  clear_has_test_interval();
}
inline ::google::protobuf::int32 SolverParameter::test_interval() const {
  return test_interval_;
}
inline void SolverParameter::set_test_interval(::google::protobuf::int32 value) {
  set_has_test_interval();
  test_interval_ = value;
}

// optional bool test_compute_loss = 19 [default = false];
inline bool SolverParameter::has_test_compute_loss() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SolverParameter::set_has_test_compute_loss() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SolverParameter::clear_has_test_compute_loss() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SolverParameter::clear_test_compute_loss() {
  test_compute_loss_ = false;
  clear_has_test_compute_loss();
}
inline bool SolverParameter::test_compute_loss() const {
  return test_compute_loss_;
}
inline void SolverParameter::set_test_compute_loss(bool value) {
  set_has_test_compute_loss();
  test_compute_loss_ = value;
}

// optional bool test_initialization = 32 [default = true];
inline bool SolverParameter::has_test_initialization() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SolverParameter::set_has_test_initialization() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SolverParameter::clear_has_test_initialization() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SolverParameter::clear_test_initialization() {
  test_initialization_ = true;
  clear_has_test_initialization();
}
inline bool SolverParameter::test_initialization() const {
  return test_initialization_;
}
inline void SolverParameter::set_test_initialization(bool value) {
  set_has_test_initialization();
  test_initialization_ = value;
}

// optional float base_lr = 5;
inline bool SolverParameter::has_base_lr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SolverParameter::set_has_base_lr() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SolverParameter::clear_has_base_lr() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SolverParameter::clear_base_lr() {
  base_lr_ = 0;
  clear_has_base_lr();
}
inline float SolverParameter::base_lr() const {
  return base_lr_;
}
inline void SolverParameter::set_base_lr(float value) {
  set_has_base_lr();
  base_lr_ = value;
}

// optional int32 display = 6;
inline bool SolverParameter::has_display() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SolverParameter::set_has_display() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SolverParameter::clear_has_display() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SolverParameter::clear_display() {
  display_ = 0;
  clear_has_display();
}
inline ::google::protobuf::int32 SolverParameter::display() const {
  return display_;
}
inline void SolverParameter::set_display(::google::protobuf::int32 value) {
  set_has_display();
  display_ = value;
}

// optional int32 average_loss = 33 [default = 1];
inline bool SolverParameter::has_average_loss() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SolverParameter::set_has_average_loss() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SolverParameter::clear_has_average_loss() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SolverParameter::clear_average_loss() {
  average_loss_ = 1;
  clear_has_average_loss();
}
inline ::google::protobuf::int32 SolverParameter::average_loss() const {
  return average_loss_;
}
inline void SolverParameter::set_average_loss(::google::protobuf::int32 value) {
  set_has_average_loss();
  average_loss_ = value;
}

// optional int32 max_iter = 7;
inline bool SolverParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SolverParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SolverParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SolverParameter::clear_max_iter() {
  max_iter_ = 0;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 SolverParameter::max_iter() const {
  return max_iter_;
}
inline void SolverParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
}

// optional int32 iter_size = 36 [default = 1];
inline bool SolverParameter::has_iter_size() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SolverParameter::set_has_iter_size() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SolverParameter::clear_has_iter_size() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SolverParameter::clear_iter_size() {
  iter_size_ = 1;
  clear_has_iter_size();
}
inline ::google::protobuf::int32 SolverParameter::iter_size() const {
  return iter_size_;
}
inline void SolverParameter::set_iter_size(::google::protobuf::int32 value) {
  set_has_iter_size();
  iter_size_ = value;
}

// optional string lr_policy = 8;
inline bool SolverParameter::has_lr_policy() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SolverParameter::set_has_lr_policy() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SolverParameter::clear_has_lr_policy() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SolverParameter::clear_lr_policy() {
  if (lr_policy_ != &::google::protobuf::internal::kEmptyString) {
    lr_policy_->clear();
  }
  clear_has_lr_policy();
}
inline const ::std::string& SolverParameter::lr_policy() const {
  return *lr_policy_;
}
inline void SolverParameter::set_lr_policy(const ::std::string& value) {
  set_has_lr_policy();
  if (lr_policy_ == &::google::protobuf::internal::kEmptyString) {
    lr_policy_ = new ::std::string;
  }
  lr_policy_->assign(value);
}
inline void SolverParameter::set_lr_policy(const char* value) {
  set_has_lr_policy();
  if (lr_policy_ == &::google::protobuf::internal::kEmptyString) {
    lr_policy_ = new ::std::string;
  }
  lr_policy_->assign(value);
}
inline void SolverParameter::set_lr_policy(const char* value, size_t size) {
  set_has_lr_policy();
  if (lr_policy_ == &::google::protobuf::internal::kEmptyString) {
    lr_policy_ = new ::std::string;
  }
  lr_policy_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SolverParameter::mutable_lr_policy() {
  set_has_lr_policy();
  if (lr_policy_ == &::google::protobuf::internal::kEmptyString) {
    lr_policy_ = new ::std::string;
  }
  return lr_policy_;
}
inline ::std::string* SolverParameter::release_lr_policy() {
  clear_has_lr_policy();
  if (lr_policy_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lr_policy_;
    lr_policy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SolverParameter::set_allocated_lr_policy(::std::string* lr_policy) {
  if (lr_policy_ != &::google::protobuf::internal::kEmptyString) {
    delete lr_policy_;
  }
  if (lr_policy) {
    set_has_lr_policy();
    lr_policy_ = lr_policy;
  } else {
    clear_has_lr_policy();
    lr_policy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float gamma = 9;
inline bool SolverParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SolverParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SolverParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SolverParameter::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline float SolverParameter::gamma() const {
  return gamma_;
}
inline void SolverParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
}

// optional float power = 10;
inline bool SolverParameter::has_power() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SolverParameter::set_has_power() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SolverParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SolverParameter::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline float SolverParameter::power() const {
  return power_;
}
inline void SolverParameter::set_power(float value) {
  set_has_power();
  power_ = value;
}

// optional float momentum = 11;
inline bool SolverParameter::has_momentum() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SolverParameter::set_has_momentum() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SolverParameter::clear_has_momentum() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SolverParameter::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
inline float SolverParameter::momentum() const {
  return momentum_;
}
inline void SolverParameter::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
}

// optional float weight_decay = 12;
inline bool SolverParameter::has_weight_decay() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SolverParameter::set_has_weight_decay() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SolverParameter::clear_has_weight_decay() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SolverParameter::clear_weight_decay() {
  weight_decay_ = 0;
  clear_has_weight_decay();
}
inline float SolverParameter::weight_decay() const {
  return weight_decay_;
}
inline void SolverParameter::set_weight_decay(float value) {
  set_has_weight_decay();
  weight_decay_ = value;
}

// optional string regularization_type = 29 [default = "L2"];
inline bool SolverParameter::has_regularization_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SolverParameter::set_has_regularization_type() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SolverParameter::clear_has_regularization_type() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SolverParameter::clear_regularization_type() {
  if (regularization_type_ != _default_regularization_type_) {
    regularization_type_->assign(*_default_regularization_type_);
  }
  clear_has_regularization_type();
}
inline const ::std::string& SolverParameter::regularization_type() const {
  return *regularization_type_;
}
inline void SolverParameter::set_regularization_type(const ::std::string& value) {
  set_has_regularization_type();
  if (regularization_type_ == _default_regularization_type_) {
    regularization_type_ = new ::std::string;
  }
  regularization_type_->assign(value);
}
inline void SolverParameter::set_regularization_type(const char* value) {
  set_has_regularization_type();
  if (regularization_type_ == _default_regularization_type_) {
    regularization_type_ = new ::std::string;
  }
  regularization_type_->assign(value);
}
inline void SolverParameter::set_regularization_type(const char* value, size_t size) {
  set_has_regularization_type();
  if (regularization_type_ == _default_regularization_type_) {
    regularization_type_ = new ::std::string;
  }
  regularization_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SolverParameter::mutable_regularization_type() {
  set_has_regularization_type();
  if (regularization_type_ == _default_regularization_type_) {
    regularization_type_ = new ::std::string(*_default_regularization_type_);
  }
  return regularization_type_;
}
inline ::std::string* SolverParameter::release_regularization_type() {
  clear_has_regularization_type();
  if (regularization_type_ == _default_regularization_type_) {
    return NULL;
  } else {
    ::std::string* temp = regularization_type_;
    regularization_type_ = const_cast< ::std::string*>(_default_regularization_type_);
    return temp;
  }
}
inline void SolverParameter::set_allocated_regularization_type(::std::string* regularization_type) {
  if (regularization_type_ != _default_regularization_type_) {
    delete regularization_type_;
  }
  if (regularization_type) {
    set_has_regularization_type();
    regularization_type_ = regularization_type;
  } else {
    clear_has_regularization_type();
    regularization_type_ = const_cast< ::std::string*>(_default_regularization_type_);
  }
}

// optional int32 stepsize = 13;
inline bool SolverParameter::has_stepsize() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SolverParameter::set_has_stepsize() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SolverParameter::clear_has_stepsize() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SolverParameter::clear_stepsize() {
  stepsize_ = 0;
  clear_has_stepsize();
}
inline ::google::protobuf::int32 SolverParameter::stepsize() const {
  return stepsize_;
}
inline void SolverParameter::set_stepsize(::google::protobuf::int32 value) {
  set_has_stepsize();
  stepsize_ = value;
}

// repeated int32 stepvalue = 34;
inline int SolverParameter::stepvalue_size() const {
  return stepvalue_.size();
}
inline void SolverParameter::clear_stepvalue() {
  stepvalue_.Clear();
}
inline ::google::protobuf::int32 SolverParameter::stepvalue(int index) const {
  return stepvalue_.Get(index);
}
inline void SolverParameter::set_stepvalue(int index, ::google::protobuf::int32 value) {
  stepvalue_.Set(index, value);
}
inline void SolverParameter::add_stepvalue(::google::protobuf::int32 value) {
  stepvalue_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::stepvalue() const {
  return stepvalue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_stepvalue() {
  return &stepvalue_;
}

// optional float clip_gradients = 35 [default = -1];
inline bool SolverParameter::has_clip_gradients() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SolverParameter::set_has_clip_gradients() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SolverParameter::clear_has_clip_gradients() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SolverParameter::clear_clip_gradients() {
  clip_gradients_ = -1;
  clear_has_clip_gradients();
}
inline float SolverParameter::clip_gradients() const {
  return clip_gradients_;
}
inline void SolverParameter::set_clip_gradients(float value) {
  set_has_clip_gradients();
  clip_gradients_ = value;
}

// optional int32 snapshot = 14 [default = 0];
inline bool SolverParameter::has_snapshot() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SolverParameter::set_has_snapshot() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SolverParameter::clear_has_snapshot() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SolverParameter::clear_snapshot() {
  snapshot_ = 0;
  clear_has_snapshot();
}
inline ::google::protobuf::int32 SolverParameter::snapshot() const {
  return snapshot_;
}
inline void SolverParameter::set_snapshot(::google::protobuf::int32 value) {
  set_has_snapshot();
  snapshot_ = value;
}

// optional string snapshot_prefix = 15;
inline bool SolverParameter::has_snapshot_prefix() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SolverParameter::set_has_snapshot_prefix() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SolverParameter::clear_has_snapshot_prefix() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SolverParameter::clear_snapshot_prefix() {
  if (snapshot_prefix_ != &::google::protobuf::internal::kEmptyString) {
    snapshot_prefix_->clear();
  }
  clear_has_snapshot_prefix();
}
inline const ::std::string& SolverParameter::snapshot_prefix() const {
  return *snapshot_prefix_;
}
inline void SolverParameter::set_snapshot_prefix(const ::std::string& value) {
  set_has_snapshot_prefix();
  if (snapshot_prefix_ == &::google::protobuf::internal::kEmptyString) {
    snapshot_prefix_ = new ::std::string;
  }
  snapshot_prefix_->assign(value);
}
inline void SolverParameter::set_snapshot_prefix(const char* value) {
  set_has_snapshot_prefix();
  if (snapshot_prefix_ == &::google::protobuf::internal::kEmptyString) {
    snapshot_prefix_ = new ::std::string;
  }
  snapshot_prefix_->assign(value);
}
inline void SolverParameter::set_snapshot_prefix(const char* value, size_t size) {
  set_has_snapshot_prefix();
  if (snapshot_prefix_ == &::google::protobuf::internal::kEmptyString) {
    snapshot_prefix_ = new ::std::string;
  }
  snapshot_prefix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SolverParameter::mutable_snapshot_prefix() {
  set_has_snapshot_prefix();
  if (snapshot_prefix_ == &::google::protobuf::internal::kEmptyString) {
    snapshot_prefix_ = new ::std::string;
  }
  return snapshot_prefix_;
}
inline ::std::string* SolverParameter::release_snapshot_prefix() {
  clear_has_snapshot_prefix();
  if (snapshot_prefix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snapshot_prefix_;
    snapshot_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SolverParameter::set_allocated_snapshot_prefix(::std::string* snapshot_prefix) {
  if (snapshot_prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshot_prefix_;
  }
  if (snapshot_prefix) {
    set_has_snapshot_prefix();
    snapshot_prefix_ = snapshot_prefix;
  } else {
    clear_has_snapshot_prefix();
    snapshot_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool snapshot_diff = 16 [default = false];
inline bool SolverParameter::has_snapshot_diff() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SolverParameter::set_has_snapshot_diff() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SolverParameter::clear_has_snapshot_diff() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SolverParameter::clear_snapshot_diff() {
  snapshot_diff_ = false;
  clear_has_snapshot_diff();
}
inline bool SolverParameter::snapshot_diff() const {
  return snapshot_diff_;
}
inline void SolverParameter::set_snapshot_diff(bool value) {
  set_has_snapshot_diff();
  snapshot_diff_ = value;
}

// optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
inline bool SolverParameter::has_snapshot_format() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SolverParameter::set_has_snapshot_format() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SolverParameter::clear_has_snapshot_format() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SolverParameter::clear_snapshot_format() {
  snapshot_format_ = 1;
  clear_has_snapshot_format();
}
inline ::caffe::SolverParameter_SnapshotFormat SolverParameter::snapshot_format() const {
  return static_cast< ::caffe::SolverParameter_SnapshotFormat >(snapshot_format_);
}
inline void SolverParameter::set_snapshot_format(::caffe::SolverParameter_SnapshotFormat value) {
  assert(::caffe::SolverParameter_SnapshotFormat_IsValid(value));
  set_has_snapshot_format();
  snapshot_format_ = value;
}

// optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
inline bool SolverParameter::has_solver_mode() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SolverParameter::set_has_solver_mode() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SolverParameter::clear_has_solver_mode() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SolverParameter::clear_solver_mode() {
  solver_mode_ = 1;
  clear_has_solver_mode();
}
inline ::caffe::SolverParameter_SolverMode SolverParameter::solver_mode() const {
  return static_cast< ::caffe::SolverParameter_SolverMode >(solver_mode_);
}
inline void SolverParameter::set_solver_mode(::caffe::SolverParameter_SolverMode value) {
  assert(::caffe::SolverParameter_SolverMode_IsValid(value));
  set_has_solver_mode();
  solver_mode_ = value;
}

// optional int32 device_id = 18 [default = 0];
inline bool SolverParameter::has_device_id() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SolverParameter::set_has_device_id() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SolverParameter::clear_has_device_id() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SolverParameter::clear_device_id() {
  device_id_ = 0;
  clear_has_device_id();
}
inline ::google::protobuf::int32 SolverParameter::device_id() const {
  return device_id_;
}
inline void SolverParameter::set_device_id(::google::protobuf::int32 value) {
  set_has_device_id();
  device_id_ = value;
}

// optional int64 random_seed = 20 [default = -1];
inline bool SolverParameter::has_random_seed() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SolverParameter::set_has_random_seed() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SolverParameter::clear_has_random_seed() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SolverParameter::clear_random_seed() {
  random_seed_ = GOOGLE_LONGLONG(-1);
  clear_has_random_seed();
}
inline ::google::protobuf::int64 SolverParameter::random_seed() const {
  return random_seed_;
}
inline void SolverParameter::set_random_seed(::google::protobuf::int64 value) {
  set_has_random_seed();
  random_seed_ = value;
}

// optional string type = 40 [default = "SGD"];
inline bool SolverParameter::has_type() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SolverParameter::set_has_type() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SolverParameter::clear_has_type() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SolverParameter::clear_type() {
  if (type_ != _default_type_) {
    type_->assign(*_default_type_);
  }
  clear_has_type();
}
inline const ::std::string& SolverParameter::type() const {
  return *type_;
}
inline void SolverParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void SolverParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void SolverParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SolverParameter::mutable_type() {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string(*_default_type_);
  }
  return type_;
}
inline ::std::string* SolverParameter::release_type() {
  clear_has_type();
  if (type_ == _default_type_) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(_default_type_);
    return temp;
  }
}
inline void SolverParameter::set_allocated_type(::std::string* type) {
  if (type_ != _default_type_) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(_default_type_);
  }
}

// optional float delta = 31 [default = 1e-08];
inline bool SolverParameter::has_delta() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SolverParameter::set_has_delta() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SolverParameter::clear_has_delta() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SolverParameter::clear_delta() {
  delta_ = 1e-08f;
  clear_has_delta();
}
inline float SolverParameter::delta() const {
  return delta_;
}
inline void SolverParameter::set_delta(float value) {
  set_has_delta();
  delta_ = value;
}

// optional float momentum2 = 39 [default = 0.999];
inline bool SolverParameter::has_momentum2() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SolverParameter::set_has_momentum2() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SolverParameter::clear_has_momentum2() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SolverParameter::clear_momentum2() {
  momentum2_ = 0.999f;
  clear_has_momentum2();
}
inline float SolverParameter::momentum2() const {
  return momentum2_;
}
inline void SolverParameter::set_momentum2(float value) {
  set_has_momentum2();
  momentum2_ = value;
}

// optional float rms_decay = 38;
inline bool SolverParameter::has_rms_decay() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SolverParameter::set_has_rms_decay() {
  _has_bits_[1] |= 0x00000010u;
}
inline void SolverParameter::clear_has_rms_decay() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void SolverParameter::clear_rms_decay() {
  rms_decay_ = 0;
  clear_has_rms_decay();
}
inline float SolverParameter::rms_decay() const {
  return rms_decay_;
}
inline void SolverParameter::set_rms_decay(float value) {
  set_has_rms_decay();
  rms_decay_ = value;
}

// optional bool debug_info = 23 [default = false];
inline bool SolverParameter::has_debug_info() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void SolverParameter::set_has_debug_info() {
  _has_bits_[1] |= 0x00000020u;
}
inline void SolverParameter::clear_has_debug_info() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void SolverParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool SolverParameter::debug_info() const {
  return debug_info_;
}
inline void SolverParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
}

// optional bool snapshot_after_train = 28 [default = true];
inline bool SolverParameter::has_snapshot_after_train() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void SolverParameter::set_has_snapshot_after_train() {
  _has_bits_[1] |= 0x00000040u;
}
inline void SolverParameter::clear_has_snapshot_after_train() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void SolverParameter::clear_snapshot_after_train() {
  snapshot_after_train_ = true;
  clear_has_snapshot_after_train();
}
inline bool SolverParameter::snapshot_after_train() const {
  return snapshot_after_train_;
}
inline void SolverParameter::set_snapshot_after_train(bool value) {
  set_has_snapshot_after_train();
  snapshot_after_train_ = value;
}

// optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
inline bool SolverParameter::has_solver_type() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void SolverParameter::set_has_solver_type() {
  _has_bits_[1] |= 0x00000080u;
}
inline void SolverParameter::clear_has_solver_type() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void SolverParameter::clear_solver_type() {
  solver_type_ = 0;
  clear_has_solver_type();
}
inline ::caffe::SolverParameter_SolverType SolverParameter::solver_type() const {
  return static_cast< ::caffe::SolverParameter_SolverType >(solver_type_);
}
inline void SolverParameter::set_solver_type(::caffe::SolverParameter_SolverType value) {
  assert(::caffe::SolverParameter_SolverType_IsValid(value));
  set_has_solver_type();
  solver_type_ = value;
}

// optional int32 print_datadiff = 42 [default = 0];
inline bool SolverParameter::has_print_datadiff() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void SolverParameter::set_has_print_datadiff() {
  _has_bits_[1] |= 0x00000100u;
}
inline void SolverParameter::clear_has_print_datadiff() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void SolverParameter::clear_print_datadiff() {
  print_datadiff_ = 0;
  clear_has_print_datadiff();
}
inline ::google::protobuf::int32 SolverParameter::print_datadiff() const {
  return print_datadiff_;
}
inline void SolverParameter::set_print_datadiff(::google::protobuf::int32 value) {
  set_has_print_datadiff();
  print_datadiff_ = value;
}

// optional int32 print_param = 43 [default = 0];
inline bool SolverParameter::has_print_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void SolverParameter::set_has_print_param() {
  _has_bits_[1] |= 0x00000200u;
}
inline void SolverParameter::clear_has_print_param() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void SolverParameter::clear_print_param() {
  print_param_ = 0;
  clear_has_print_param();
}
inline ::google::protobuf::int32 SolverParameter::print_param() const {
  return print_param_;
}
inline void SolverParameter::set_print_param(::google::protobuf::int32 value) {
  set_has_print_param();
  print_param_ = value;
}

// optional int32 save_blob = 44 [default = 0];
inline bool SolverParameter::has_save_blob() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void SolverParameter::set_has_save_blob() {
  _has_bits_[1] |= 0x00000400u;
}
inline void SolverParameter::clear_has_save_blob() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void SolverParameter::clear_save_blob() {
  save_blob_ = 0;
  clear_has_save_blob();
}
inline ::google::protobuf::int32 SolverParameter::save_blob() const {
  return save_blob_;
}
inline void SolverParameter::set_save_blob(::google::protobuf::int32 value) {
  set_has_save_blob();
  save_blob_ = value;
}

// optional string save_blob_path = 45 [default = ""];
inline bool SolverParameter::has_save_blob_path() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void SolverParameter::set_has_save_blob_path() {
  _has_bits_[1] |= 0x00000800u;
}
inline void SolverParameter::clear_has_save_blob_path() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void SolverParameter::clear_save_blob_path() {
  if (save_blob_path_ != &::google::protobuf::internal::kEmptyString) {
    save_blob_path_->clear();
  }
  clear_has_save_blob_path();
}
inline const ::std::string& SolverParameter::save_blob_path() const {
  return *save_blob_path_;
}
inline void SolverParameter::set_save_blob_path(const ::std::string& value) {
  set_has_save_blob_path();
  if (save_blob_path_ == &::google::protobuf::internal::kEmptyString) {
    save_blob_path_ = new ::std::string;
  }
  save_blob_path_->assign(value);
}
inline void SolverParameter::set_save_blob_path(const char* value) {
  set_has_save_blob_path();
  if (save_blob_path_ == &::google::protobuf::internal::kEmptyString) {
    save_blob_path_ = new ::std::string;
  }
  save_blob_path_->assign(value);
}
inline void SolverParameter::set_save_blob_path(const char* value, size_t size) {
  set_has_save_blob_path();
  if (save_blob_path_ == &::google::protobuf::internal::kEmptyString) {
    save_blob_path_ = new ::std::string;
  }
  save_blob_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SolverParameter::mutable_save_blob_path() {
  set_has_save_blob_path();
  if (save_blob_path_ == &::google::protobuf::internal::kEmptyString) {
    save_blob_path_ = new ::std::string;
  }
  return save_blob_path_;
}
inline ::std::string* SolverParameter::release_save_blob_path() {
  clear_has_save_blob_path();
  if (save_blob_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = save_blob_path_;
    save_blob_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SolverParameter::set_allocated_save_blob_path(::std::string* save_blob_path) {
  if (save_blob_path_ != &::google::protobuf::internal::kEmptyString) {
    delete save_blob_path_;
  }
  if (save_blob_path) {
    set_has_save_blob_path();
    save_blob_path_ = save_blob_path;
  } else {
    clear_has_save_blob_path();
    save_blob_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool save_test_blobs = 46 [default = false];
inline bool SolverParameter::has_save_test_blobs() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void SolverParameter::set_has_save_test_blobs() {
  _has_bits_[1] |= 0x00001000u;
}
inline void SolverParameter::clear_has_save_test_blobs() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void SolverParameter::clear_save_test_blobs() {
  save_test_blobs_ = false;
  clear_has_save_test_blobs();
}
inline bool SolverParameter::save_test_blobs() const {
  return save_test_blobs_;
}
inline void SolverParameter::set_save_test_blobs(bool value) {
  set_has_save_test_blobs();
  save_test_blobs_ = value;
}

// optional .caffe.TestProtos test_protos = 47;
inline bool SolverParameter::has_test_protos() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void SolverParameter::set_has_test_protos() {
  _has_bits_[1] |= 0x00002000u;
}
inline void SolverParameter::clear_has_test_protos() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void SolverParameter::clear_test_protos() {
  if (test_protos_ != NULL) test_protos_->::caffe::TestProtos::Clear();
  clear_has_test_protos();
}
inline const ::caffe::TestProtos& SolverParameter::test_protos() const {
  return test_protos_ != NULL ? *test_protos_ : *default_instance_->test_protos_;
}
inline ::caffe::TestProtos* SolverParameter::mutable_test_protos() {
  set_has_test_protos();
  if (test_protos_ == NULL) test_protos_ = new ::caffe::TestProtos;
  return test_protos_;
}
inline ::caffe::TestProtos* SolverParameter::release_test_protos() {
  clear_has_test_protos();
  ::caffe::TestProtos* temp = test_protos_;
  test_protos_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_test_protos(::caffe::TestProtos* test_protos) {
  delete test_protos_;
  test_protos_ = test_protos;
  if (test_protos) {
    set_has_test_protos();
  } else {
    clear_has_test_protos();
  }
}

// -------------------------------------------------------------------

// SolverState

// optional int32 iter = 1;
inline bool SolverState::has_iter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverState::set_has_iter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverState::clear_has_iter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverState::clear_iter() {
  iter_ = 0;
  clear_has_iter();
}
inline ::google::protobuf::int32 SolverState::iter() const {
  return iter_;
}
inline void SolverState::set_iter(::google::protobuf::int32 value) {
  set_has_iter();
  iter_ = value;
}

// optional string learned_net = 2;
inline bool SolverState::has_learned_net() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverState::set_has_learned_net() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverState::clear_has_learned_net() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverState::clear_learned_net() {
  if (learned_net_ != &::google::protobuf::internal::kEmptyString) {
    learned_net_->clear();
  }
  clear_has_learned_net();
}
inline const ::std::string& SolverState::learned_net() const {
  return *learned_net_;
}
inline void SolverState::set_learned_net(const ::std::string& value) {
  set_has_learned_net();
  if (learned_net_ == &::google::protobuf::internal::kEmptyString) {
    learned_net_ = new ::std::string;
  }
  learned_net_->assign(value);
}
inline void SolverState::set_learned_net(const char* value) {
  set_has_learned_net();
  if (learned_net_ == &::google::protobuf::internal::kEmptyString) {
    learned_net_ = new ::std::string;
  }
  learned_net_->assign(value);
}
inline void SolverState::set_learned_net(const char* value, size_t size) {
  set_has_learned_net();
  if (learned_net_ == &::google::protobuf::internal::kEmptyString) {
    learned_net_ = new ::std::string;
  }
  learned_net_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SolverState::mutable_learned_net() {
  set_has_learned_net();
  if (learned_net_ == &::google::protobuf::internal::kEmptyString) {
    learned_net_ = new ::std::string;
  }
  return learned_net_;
}
inline ::std::string* SolverState::release_learned_net() {
  clear_has_learned_net();
  if (learned_net_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = learned_net_;
    learned_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SolverState::set_allocated_learned_net(::std::string* learned_net) {
  if (learned_net_ != &::google::protobuf::internal::kEmptyString) {
    delete learned_net_;
  }
  if (learned_net) {
    set_has_learned_net();
    learned_net_ = learned_net;
  } else {
    clear_has_learned_net();
    learned_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .caffe.BlobProto history = 3;
inline int SolverState::history_size() const {
  return history_.size();
}
inline void SolverState::clear_history() {
  history_.Clear();
}
inline const ::caffe::BlobProto& SolverState::history(int index) const {
  return history_.Get(index);
}
inline ::caffe::BlobProto* SolverState::mutable_history(int index) {
  return history_.Mutable(index);
}
inline ::caffe::BlobProto* SolverState::add_history() {
  return history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
SolverState::history() const {
  return history_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
SolverState::mutable_history() {
  return &history_;
}

// optional int32 current_step = 4 [default = 0];
inline bool SolverState::has_current_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolverState::set_has_current_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolverState::clear_has_current_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolverState::clear_current_step() {
  current_step_ = 0;
  clear_has_current_step();
}
inline ::google::protobuf::int32 SolverState::current_step() const {
  return current_step_;
}
inline void SolverState::set_current_step(::google::protobuf::int32 value) {
  set_has_current_step();
  current_step_ = value;
}

// -------------------------------------------------------------------

// NetState

// optional .caffe.Phase phase = 1 [default = TEST];
inline bool NetState::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetState::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetState::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetState::clear_phase() {
  phase_ = 1;
  clear_has_phase();
}
inline ::caffe::Phase NetState::phase() const {
  return static_cast< ::caffe::Phase >(phase_);
}
inline void NetState::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
}

// optional int32 level = 2 [default = 0];
inline bool NetState::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetState::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetState::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetState::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NetState::level() const {
  return level_;
}
inline void NetState::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated string stage = 3;
inline int NetState::stage_size() const {
  return stage_.size();
}
inline void NetState::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetState::stage(int index) const {
  return stage_.Get(index);
}
inline ::std::string* NetState::mutable_stage(int index) {
  return stage_.Mutable(index);
}
inline void NetState::set_stage(int index, const ::std::string& value) {
  stage_.Mutable(index)->assign(value);
}
inline void NetState::set_stage(int index, const char* value) {
  stage_.Mutable(index)->assign(value);
}
inline void NetState::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetState::add_stage() {
  return stage_.Add();
}
inline void NetState::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
}
inline void NetState::add_stage(const char* value) {
  stage_.Add()->assign(value);
}
inline void NetState::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetState::stage() const {
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetState::mutable_stage() {
  return &stage_;
}

// -------------------------------------------------------------------

// NetStateRule

// optional .caffe.Phase phase = 1;
inline bool NetStateRule::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetStateRule::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetStateRule::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetStateRule::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::caffe::Phase NetStateRule::phase() const {
  return static_cast< ::caffe::Phase >(phase_);
}
inline void NetStateRule::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
}

// optional int32 min_level = 2;
inline bool NetStateRule::has_min_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetStateRule::set_has_min_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetStateRule::clear_has_min_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetStateRule::clear_min_level() {
  min_level_ = 0;
  clear_has_min_level();
}
inline ::google::protobuf::int32 NetStateRule::min_level() const {
  return min_level_;
}
inline void NetStateRule::set_min_level(::google::protobuf::int32 value) {
  set_has_min_level();
  min_level_ = value;
}

// optional int32 max_level = 3;
inline bool NetStateRule::has_max_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetStateRule::set_has_max_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetStateRule::clear_has_max_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetStateRule::clear_max_level() {
  max_level_ = 0;
  clear_has_max_level();
}
inline ::google::protobuf::int32 NetStateRule::max_level() const {
  return max_level_;
}
inline void NetStateRule::set_max_level(::google::protobuf::int32 value) {
  set_has_max_level();
  max_level_ = value;
}

// repeated string stage = 4;
inline int NetStateRule::stage_size() const {
  return stage_.size();
}
inline void NetStateRule::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetStateRule::stage(int index) const {
  return stage_.Get(index);
}
inline ::std::string* NetStateRule::mutable_stage(int index) {
  return stage_.Mutable(index);
}
inline void NetStateRule::set_stage(int index, const ::std::string& value) {
  stage_.Mutable(index)->assign(value);
}
inline void NetStateRule::set_stage(int index, const char* value) {
  stage_.Mutable(index)->assign(value);
}
inline void NetStateRule::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetStateRule::add_stage() {
  return stage_.Add();
}
inline void NetStateRule::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
}
inline void NetStateRule::add_stage(const char* value) {
  stage_.Add()->assign(value);
}
inline void NetStateRule::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::stage() const {
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_stage() {
  return &stage_;
}

// repeated string not_stage = 5;
inline int NetStateRule::not_stage_size() const {
  return not_stage_.size();
}
inline void NetStateRule::clear_not_stage() {
  not_stage_.Clear();
}
inline const ::std::string& NetStateRule::not_stage(int index) const {
  return not_stage_.Get(index);
}
inline ::std::string* NetStateRule::mutable_not_stage(int index) {
  return not_stage_.Mutable(index);
}
inline void NetStateRule::set_not_stage(int index, const ::std::string& value) {
  not_stage_.Mutable(index)->assign(value);
}
inline void NetStateRule::set_not_stage(int index, const char* value) {
  not_stage_.Mutable(index)->assign(value);
}
inline void NetStateRule::set_not_stage(int index, const char* value, size_t size) {
  not_stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetStateRule::add_not_stage() {
  return not_stage_.Add();
}
inline void NetStateRule::add_not_stage(const ::std::string& value) {
  not_stage_.Add()->assign(value);
}
inline void NetStateRule::add_not_stage(const char* value) {
  not_stage_.Add()->assign(value);
}
inline void NetStateRule::add_not_stage(const char* value, size_t size) {
  not_stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::not_stage() const {
  return not_stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_not_stage() {
  return &not_stage_;
}

// -------------------------------------------------------------------

// ParamSpec

// optional string name = 1;
inline bool ParamSpec::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamSpec::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamSpec::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamSpec::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ParamSpec::name() const {
  return *name_;
}
inline void ParamSpec::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ParamSpec::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ParamSpec::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ParamSpec::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ParamSpec::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ParamSpec::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
inline bool ParamSpec::has_share_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamSpec::set_has_share_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamSpec::clear_has_share_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamSpec::clear_share_mode() {
  share_mode_ = 0;
  clear_has_share_mode();
}
inline ::caffe::ParamSpec_DimCheckMode ParamSpec::share_mode() const {
  return static_cast< ::caffe::ParamSpec_DimCheckMode >(share_mode_);
}
inline void ParamSpec::set_share_mode(::caffe::ParamSpec_DimCheckMode value) {
  assert(::caffe::ParamSpec_DimCheckMode_IsValid(value));
  set_has_share_mode();
  share_mode_ = value;
}

// optional float lr_mult = 3 [default = 1];
inline bool ParamSpec::has_lr_mult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParamSpec::set_has_lr_mult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParamSpec::clear_has_lr_mult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParamSpec::clear_lr_mult() {
  lr_mult_ = 1;
  clear_has_lr_mult();
}
inline float ParamSpec::lr_mult() const {
  return lr_mult_;
}
inline void ParamSpec::set_lr_mult(float value) {
  set_has_lr_mult();
  lr_mult_ = value;
}

// optional float decay_mult = 4 [default = 1];
inline bool ParamSpec::has_decay_mult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParamSpec::set_has_decay_mult() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParamSpec::clear_has_decay_mult() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParamSpec::clear_decay_mult() {
  decay_mult_ = 1;
  clear_has_decay_mult();
}
inline float ParamSpec::decay_mult() const {
  return decay_mult_;
}
inline void ParamSpec::set_decay_mult(float value) {
  set_has_decay_mult();
  decay_mult_ = value;
}

// -------------------------------------------------------------------

// LayerParameter

// optional string name = 1;
inline bool LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LayerParameter::name() const {
  return *name_;
}
inline void LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LayerParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LayerParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LayerParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LayerParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string type = 2;
inline bool LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerParameter::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& LayerParameter::type() const {
  return *type_;
}
inline void LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void LayerParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LayerParameter::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* LayerParameter::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LayerParameter::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string bottom = 3;
inline int LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& LayerParameter::bottom(int index) const {
  return bottom_.Get(index);
}
inline ::std::string* LayerParameter::mutable_bottom(int index) {
  return bottom_.Mutable(index);
}
inline void LayerParameter::set_bottom(int index, const ::std::string& value) {
  bottom_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LayerParameter::add_bottom() {
  return bottom_.Add();
}
inline void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
}
inline void LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
}
inline void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  return &bottom_;
}

// repeated string top = 4;
inline int LayerParameter::top_size() const {
  return top_.size();
}
inline void LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& LayerParameter::top(int index) const {
  return top_.Get(index);
}
inline ::std::string* LayerParameter::mutable_top(int index) {
  return top_.Mutable(index);
}
inline void LayerParameter::set_top(int index, const ::std::string& value) {
  top_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LayerParameter::add_top() {
  return top_.Add();
}
inline void LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
}
inline void LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
}
inline void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::top() const {
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_top() {
  return &top_;
}

// optional .caffe.Phase phase = 10;
inline bool LayerParameter::has_phase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_phase() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayerParameter::clear_has_phase() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayerParameter::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::caffe::Phase LayerParameter::phase() const {
  return static_cast< ::caffe::Phase >(phase_);
}
inline void LayerParameter::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
}

// repeated float loss_weight = 5;
inline int LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
inline void LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float LayerParameter::loss_weight(int index) const {
  return loss_weight_.Get(index);
}
inline void LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
}
inline void LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
LayerParameter::loss_weight() const {
  return loss_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_loss_weight() {
  return &loss_weight_;
}

// repeated .caffe.ParamSpec param = 6;
inline int LayerParameter::param_size() const {
  return param_.size();
}
inline void LayerParameter::clear_param() {
  param_.Clear();
}
inline const ::caffe::ParamSpec& LayerParameter::param(int index) const {
  return param_.Get(index);
}
inline ::caffe::ParamSpec* LayerParameter::mutable_param(int index) {
  return param_.Mutable(index);
}
inline ::caffe::ParamSpec* LayerParameter::add_param() {
  return param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
LayerParameter::param() const {
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
LayerParameter::mutable_param() {
  return &param_;
}

// repeated .caffe.BlobProto blobs = 7;
inline int LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& LayerParameter::blobs(int index) const {
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* LayerParameter::mutable_blobs(int index) {
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* LayerParameter::add_blobs() {
  return blobs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
LayerParameter::blobs() const {
  return blobs_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
LayerParameter::mutable_blobs() {
  return &blobs_;
}

// repeated bool propagate_down = 11;
inline int LayerParameter::propagate_down_size() const {
  return propagate_down_.size();
}
inline void LayerParameter::clear_propagate_down() {
  propagate_down_.Clear();
}
inline bool LayerParameter::propagate_down(int index) const {
  return propagate_down_.Get(index);
}
inline void LayerParameter::set_propagate_down(int index, bool value) {
  propagate_down_.Set(index, value);
}
inline void LayerParameter::add_propagate_down(bool value) {
  propagate_down_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
LayerParameter::propagate_down() const {
  return propagate_down_;
}
inline ::google::protobuf::RepeatedField< bool >*
LayerParameter::mutable_propagate_down() {
  return &propagate_down_;
}

// repeated .caffe.NetStateRule include = 8;
inline int LayerParameter::include_size() const {
  return include_.size();
}
inline void LayerParameter::clear_include() {
  include_.Clear();
}
inline const ::caffe::NetStateRule& LayerParameter::include(int index) const {
  return include_.Get(index);
}
inline ::caffe::NetStateRule* LayerParameter::mutable_include(int index) {
  return include_.Mutable(index);
}
inline ::caffe::NetStateRule* LayerParameter::add_include() {
  return include_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::include() const {
  return include_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_include() {
  return &include_;
}

// repeated .caffe.NetStateRule exclude = 9;
inline int LayerParameter::exclude_size() const {
  return exclude_.size();
}
inline void LayerParameter::clear_exclude() {
  exclude_.Clear();
}
inline const ::caffe::NetStateRule& LayerParameter::exclude(int index) const {
  return exclude_.Get(index);
}
inline ::caffe::NetStateRule* LayerParameter::mutable_exclude(int index) {
  return exclude_.Mutable(index);
}
inline ::caffe::NetStateRule* LayerParameter::add_exclude() {
  return exclude_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::exclude() const {
  return exclude_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_exclude() {
  return &exclude_;
}

// optional .caffe.TransformationParameter transform_param = 100;
inline bool LayerParameter::has_transform_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_transform_param() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LayerParameter::clear_has_transform_param() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
  clear_has_transform_param();
}
inline const ::caffe::TransformationParameter& LayerParameter::transform_param() const {
  return transform_param_ != NULL ? *transform_param_ : *default_instance_->transform_param_;
}
inline ::caffe::TransformationParameter* LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) transform_param_ = new ::caffe::TransformationParameter;
  return transform_param_;
}
inline ::caffe::TransformationParameter* LayerParameter::release_transform_param() {
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
}

// optional .caffe.LossParameter loss_param = 101;
inline bool LayerParameter::has_loss_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_loss_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LayerParameter::clear_has_loss_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
  clear_has_loss_param();
}
inline const ::caffe::LossParameter& LayerParameter::loss_param() const {
  return loss_param_ != NULL ? *loss_param_ : *default_instance_->loss_param_;
}
inline ::caffe::LossParameter* LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) loss_param_ = new ::caffe::LossParameter;
  return loss_param_;
}
inline ::caffe::LossParameter* LayerParameter::release_loss_param() {
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
}

// optional .caffe.AccuracyParameter accuracy_param = 102;
inline bool LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
inline const ::caffe::AccuracyParameter& LayerParameter::accuracy_param() const {
  return accuracy_param_ != NULL ? *accuracy_param_ : *default_instance_->accuracy_param_;
}
inline ::caffe::AccuracyParameter* LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) accuracy_param_ = new ::caffe::AccuracyParameter;
  return accuracy_param_;
}
inline ::caffe::AccuracyParameter* LayerParameter::release_accuracy_param() {
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
}

// optional .caffe.ArgMaxParameter argmax_param = 103;
inline bool LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
inline const ::caffe::ArgMaxParameter& LayerParameter::argmax_param() const {
  return argmax_param_ != NULL ? *argmax_param_ : *default_instance_->argmax_param_;
}
inline ::caffe::ArgMaxParameter* LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) argmax_param_ = new ::caffe::ArgMaxParameter;
  return argmax_param_;
}
inline ::caffe::ArgMaxParameter* LayerParameter::release_argmax_param() {
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
}

// optional .caffe.BatchNormParameter batch_norm_param = 139;
inline bool LayerParameter::has_batch_norm_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_batch_norm_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LayerParameter::clear_has_batch_norm_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LayerParameter::clear_batch_norm_param() {
  if (batch_norm_param_ != NULL) batch_norm_param_->::caffe::BatchNormParameter::Clear();
  clear_has_batch_norm_param();
}
inline const ::caffe::BatchNormParameter& LayerParameter::batch_norm_param() const {
  return batch_norm_param_ != NULL ? *batch_norm_param_ : *default_instance_->batch_norm_param_;
}
inline ::caffe::BatchNormParameter* LayerParameter::mutable_batch_norm_param() {
  set_has_batch_norm_param();
  if (batch_norm_param_ == NULL) batch_norm_param_ = new ::caffe::BatchNormParameter;
  return batch_norm_param_;
}
inline ::caffe::BatchNormParameter* LayerParameter::release_batch_norm_param() {
  clear_has_batch_norm_param();
  ::caffe::BatchNormParameter* temp = batch_norm_param_;
  batch_norm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_batch_norm_param(::caffe::BatchNormParameter* batch_norm_param) {
  delete batch_norm_param_;
  batch_norm_param_ = batch_norm_param;
  if (batch_norm_param) {
    set_has_batch_norm_param();
  } else {
    clear_has_batch_norm_param();
  }
}

// optional .caffe.BiasParameter bias_param = 141;
inline bool LayerParameter::has_bias_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_bias_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LayerParameter::clear_has_bias_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LayerParameter::clear_bias_param() {
  if (bias_param_ != NULL) bias_param_->::caffe::BiasParameter::Clear();
  clear_has_bias_param();
}
inline const ::caffe::BiasParameter& LayerParameter::bias_param() const {
  return bias_param_ != NULL ? *bias_param_ : *default_instance_->bias_param_;
}
inline ::caffe::BiasParameter* LayerParameter::mutable_bias_param() {
  set_has_bias_param();
  if (bias_param_ == NULL) bias_param_ = new ::caffe::BiasParameter;
  return bias_param_;
}
inline ::caffe::BiasParameter* LayerParameter::release_bias_param() {
  clear_has_bias_param();
  ::caffe::BiasParameter* temp = bias_param_;
  bias_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_bias_param(::caffe::BiasParameter* bias_param) {
  delete bias_param_;
  bias_param_ = bias_param;
  if (bias_param) {
    set_has_bias_param();
  } else {
    clear_has_bias_param();
  }
}

// optional .caffe.ConcatParameter concat_param = 104;
inline bool LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
  clear_has_concat_param();
}
inline const ::caffe::ConcatParameter& LayerParameter::concat_param() const {
  return concat_param_ != NULL ? *concat_param_ : *default_instance_->concat_param_;
}
inline ::caffe::ConcatParameter* LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) concat_param_ = new ::caffe::ConcatParameter;
  return concat_param_;
}
inline ::caffe::ConcatParameter* LayerParameter::release_concat_param() {
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
inline bool LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
inline const ::caffe::ContrastiveLossParameter& LayerParameter::contrastive_loss_param() const {
  return contrastive_loss_param_ != NULL ? *contrastive_loss_param_ : *default_instance_->contrastive_loss_param_;
}
inline ::caffe::ContrastiveLossParameter* LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  return contrastive_loss_param_;
}
inline ::caffe::ContrastiveLossParameter* LayerParameter::release_contrastive_loss_param() {
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
}

// optional .caffe.ConvolutionParameter convolution_param = 106;
inline bool LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
inline const ::caffe::ConvolutionParameter& LayerParameter::convolution_param() const {
  return convolution_param_ != NULL ? *convolution_param_ : *default_instance_->convolution_param_;
}
inline ::caffe::ConvolutionParameter* LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) convolution_param_ = new ::caffe::ConvolutionParameter;
  return convolution_param_;
}
inline ::caffe::ConvolutionParameter* LayerParameter::release_convolution_param() {
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
}

// optional .caffe.CropParameter crop_param = 144;
inline bool LayerParameter::has_crop_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_crop_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LayerParameter::clear_has_crop_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LayerParameter::clear_crop_param() {
  if (crop_param_ != NULL) crop_param_->::caffe::CropParameter::Clear();
  clear_has_crop_param();
}
inline const ::caffe::CropParameter& LayerParameter::crop_param() const {
  return crop_param_ != NULL ? *crop_param_ : *default_instance_->crop_param_;
}
inline ::caffe::CropParameter* LayerParameter::mutable_crop_param() {
  set_has_crop_param();
  if (crop_param_ == NULL) crop_param_ = new ::caffe::CropParameter;
  return crop_param_;
}
inline ::caffe::CropParameter* LayerParameter::release_crop_param() {
  clear_has_crop_param();
  ::caffe::CropParameter* temp = crop_param_;
  crop_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_crop_param(::caffe::CropParameter* crop_param) {
  delete crop_param_;
  crop_param_ = crop_param;
  if (crop_param) {
    set_has_crop_param();
  } else {
    clear_has_crop_param();
  }
}

// optional .caffe.DataParameter data_param = 107;
inline bool LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
  clear_has_data_param();
}
inline const ::caffe::DataParameter& LayerParameter::data_param() const {
  return data_param_ != NULL ? *data_param_ : *default_instance_->data_param_;
}
inline ::caffe::DataParameter* LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) data_param_ = new ::caffe::DataParameter;
  return data_param_;
}
inline ::caffe::DataParameter* LayerParameter::release_data_param() {
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
}

// optional .caffe.DropoutParameter dropout_param = 108;
inline bool LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
  clear_has_dropout_param();
}
inline const ::caffe::DropoutParameter& LayerParameter::dropout_param() const {
  return dropout_param_ != NULL ? *dropout_param_ : *default_instance_->dropout_param_;
}
inline ::caffe::DropoutParameter* LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) dropout_param_ = new ::caffe::DropoutParameter;
  return dropout_param_;
}
inline ::caffe::DropoutParameter* LayerParameter::release_dropout_param() {
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
}

// optional .caffe.DummyDataParameter dummy_data_param = 109;
inline bool LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
inline const ::caffe::DummyDataParameter& LayerParameter::dummy_data_param() const {
  return dummy_data_param_ != NULL ? *dummy_data_param_ : *default_instance_->dummy_data_param_;
}
inline ::caffe::DummyDataParameter* LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) dummy_data_param_ = new ::caffe::DummyDataParameter;
  return dummy_data_param_;
}
inline ::caffe::DummyDataParameter* LayerParameter::release_dummy_data_param() {
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
}

// optional .caffe.EltwiseParameter eltwise_param = 110;
inline bool LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
inline const ::caffe::EltwiseParameter& LayerParameter::eltwise_param() const {
  return eltwise_param_ != NULL ? *eltwise_param_ : *default_instance_->eltwise_param_;
}
inline ::caffe::EltwiseParameter* LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) eltwise_param_ = new ::caffe::EltwiseParameter;
  return eltwise_param_;
}
inline ::caffe::EltwiseParameter* LayerParameter::release_eltwise_param() {
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
}

// optional .caffe.ELUParameter elu_param = 140;
inline bool LayerParameter::has_elu_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_elu_param() {
  _has_bits_[0] |= 0x02000000u;
}
inline void LayerParameter::clear_has_elu_param() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void LayerParameter::clear_elu_param() {
  if (elu_param_ != NULL) elu_param_->::caffe::ELUParameter::Clear();
  clear_has_elu_param();
}
inline const ::caffe::ELUParameter& LayerParameter::elu_param() const {
  return elu_param_ != NULL ? *elu_param_ : *default_instance_->elu_param_;
}
inline ::caffe::ELUParameter* LayerParameter::mutable_elu_param() {
  set_has_elu_param();
  if (elu_param_ == NULL) elu_param_ = new ::caffe::ELUParameter;
  return elu_param_;
}
inline ::caffe::ELUParameter* LayerParameter::release_elu_param() {
  clear_has_elu_param();
  ::caffe::ELUParameter* temp = elu_param_;
  elu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_elu_param(::caffe::ELUParameter* elu_param) {
  delete elu_param_;
  elu_param_ = elu_param;
  if (elu_param) {
    set_has_elu_param();
  } else {
    clear_has_elu_param();
  }
}

// optional .caffe.EmbedParameter embed_param = 137;
inline bool LayerParameter::has_embed_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_embed_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void LayerParameter::clear_has_embed_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void LayerParameter::clear_embed_param() {
  if (embed_param_ != NULL) embed_param_->::caffe::EmbedParameter::Clear();
  clear_has_embed_param();
}
inline const ::caffe::EmbedParameter& LayerParameter::embed_param() const {
  return embed_param_ != NULL ? *embed_param_ : *default_instance_->embed_param_;
}
inline ::caffe::EmbedParameter* LayerParameter::mutable_embed_param() {
  set_has_embed_param();
  if (embed_param_ == NULL) embed_param_ = new ::caffe::EmbedParameter;
  return embed_param_;
}
inline ::caffe::EmbedParameter* LayerParameter::release_embed_param() {
  clear_has_embed_param();
  ::caffe::EmbedParameter* temp = embed_param_;
  embed_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_embed_param(::caffe::EmbedParameter* embed_param) {
  delete embed_param_;
  embed_param_ = embed_param;
  if (embed_param) {
    set_has_embed_param();
  } else {
    clear_has_embed_param();
  }
}

// optional .caffe.ExpParameter exp_param = 111;
inline bool LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x08000000u;
}
inline void LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
  clear_has_exp_param();
}
inline const ::caffe::ExpParameter& LayerParameter::exp_param() const {
  return exp_param_ != NULL ? *exp_param_ : *default_instance_->exp_param_;
}
inline ::caffe::ExpParameter* LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) exp_param_ = new ::caffe::ExpParameter;
  return exp_param_;
}
inline ::caffe::ExpParameter* LayerParameter::release_exp_param() {
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
}

// optional .caffe.FlattenParameter flatten_param = 135;
inline bool LayerParameter::has_flatten_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_flatten_param() {
  _has_bits_[0] |= 0x10000000u;
}
inline void LayerParameter::clear_has_flatten_param() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void LayerParameter::clear_flatten_param() {
  if (flatten_param_ != NULL) flatten_param_->::caffe::FlattenParameter::Clear();
  clear_has_flatten_param();
}
inline const ::caffe::FlattenParameter& LayerParameter::flatten_param() const {
  return flatten_param_ != NULL ? *flatten_param_ : *default_instance_->flatten_param_;
}
inline ::caffe::FlattenParameter* LayerParameter::mutable_flatten_param() {
  set_has_flatten_param();
  if (flatten_param_ == NULL) flatten_param_ = new ::caffe::FlattenParameter;
  return flatten_param_;
}
inline ::caffe::FlattenParameter* LayerParameter::release_flatten_param() {
  clear_has_flatten_param();
  ::caffe::FlattenParameter* temp = flatten_param_;
  flatten_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_flatten_param(::caffe::FlattenParameter* flatten_param) {
  delete flatten_param_;
  flatten_param_ = flatten_param;
  if (flatten_param) {
    set_has_flatten_param();
  } else {
    clear_has_flatten_param();
  }
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 112;
inline bool LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x20000000u;
}
inline void LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
inline const ::caffe::HDF5DataParameter& LayerParameter::hdf5_data_param() const {
  return hdf5_data_param_ != NULL ? *hdf5_data_param_ : *default_instance_->hdf5_data_param_;
}
inline ::caffe::HDF5DataParameter* LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  return hdf5_data_param_;
}
inline ::caffe::HDF5DataParameter* LayerParameter::release_hdf5_data_param() {
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
inline bool LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x40000000u;
}
inline void LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& LayerParameter::hdf5_output_param() const {
  return hdf5_output_param_ != NULL ? *hdf5_output_param_ : *default_instance_->hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  return hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* LayerParameter::release_hdf5_output_param() {
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
}

// optional .caffe.HingeLossParameter hinge_loss_param = 114;
inline bool LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x80000000u;
}
inline void LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
inline const ::caffe::HingeLossParameter& LayerParameter::hinge_loss_param() const {
  return hinge_loss_param_ != NULL ? *hinge_loss_param_ : *default_instance_->hinge_loss_param_;
}
inline ::caffe::HingeLossParameter* LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) hinge_loss_param_ = new ::caffe::HingeLossParameter;
  return hinge_loss_param_;
}
inline ::caffe::HingeLossParameter* LayerParameter::release_hinge_loss_param() {
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
}

// optional .caffe.ImageDataParameter image_data_param = 115;
inline bool LayerParameter::has_image_data_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_image_data_param() {
  _has_bits_[1] |= 0x00000001u;
}
inline void LayerParameter::clear_has_image_data_param() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
inline const ::caffe::ImageDataParameter& LayerParameter::image_data_param() const {
  return image_data_param_ != NULL ? *image_data_param_ : *default_instance_->image_data_param_;
}
inline ::caffe::ImageDataParameter* LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) image_data_param_ = new ::caffe::ImageDataParameter;
  return image_data_param_;
}
inline ::caffe::ImageDataParameter* LayerParameter::release_image_data_param() {
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 116;
inline bool LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[1] |= 0x00000002u;
}
inline void LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
inline const ::caffe::InfogainLossParameter& LayerParameter::infogain_loss_param() const {
  return infogain_loss_param_ != NULL ? *infogain_loss_param_ : *default_instance_->infogain_loss_param_;
}
inline ::caffe::InfogainLossParameter* LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  return infogain_loss_param_;
}
inline ::caffe::InfogainLossParameter* LayerParameter::release_infogain_loss_param() {
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
}

// optional .caffe.InnerProductParameter inner_product_param = 117;
inline bool LayerParameter::has_inner_product_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_inner_product_param() {
  _has_bits_[1] |= 0x00000004u;
}
inline void LayerParameter::clear_has_inner_product_param() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
inline const ::caffe::InnerProductParameter& LayerParameter::inner_product_param() const {
  return inner_product_param_ != NULL ? *inner_product_param_ : *default_instance_->inner_product_param_;
}
inline ::caffe::InnerProductParameter* LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) inner_product_param_ = new ::caffe::InnerProductParameter;
  return inner_product_param_;
}
inline ::caffe::InnerProductParameter* LayerParameter::release_inner_product_param() {
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
}

// optional .caffe.InputParameter input_param = 143;
inline bool LayerParameter::has_input_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_input_param() {
  _has_bits_[1] |= 0x00000008u;
}
inline void LayerParameter::clear_has_input_param() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void LayerParameter::clear_input_param() {
  if (input_param_ != NULL) input_param_->::caffe::InputParameter::Clear();
  clear_has_input_param();
}
inline const ::caffe::InputParameter& LayerParameter::input_param() const {
  return input_param_ != NULL ? *input_param_ : *default_instance_->input_param_;
}
inline ::caffe::InputParameter* LayerParameter::mutable_input_param() {
  set_has_input_param();
  if (input_param_ == NULL) input_param_ = new ::caffe::InputParameter;
  return input_param_;
}
inline ::caffe::InputParameter* LayerParameter::release_input_param() {
  clear_has_input_param();
  ::caffe::InputParameter* temp = input_param_;
  input_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_input_param(::caffe::InputParameter* input_param) {
  delete input_param_;
  input_param_ = input_param;
  if (input_param) {
    set_has_input_param();
  } else {
    clear_has_input_param();
  }
}

// optional .caffe.LogParameter log_param = 134;
inline bool LayerParameter::has_log_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_log_param() {
  _has_bits_[1] |= 0x00000010u;
}
inline void LayerParameter::clear_has_log_param() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void LayerParameter::clear_log_param() {
  if (log_param_ != NULL) log_param_->::caffe::LogParameter::Clear();
  clear_has_log_param();
}
inline const ::caffe::LogParameter& LayerParameter::log_param() const {
  return log_param_ != NULL ? *log_param_ : *default_instance_->log_param_;
}
inline ::caffe::LogParameter* LayerParameter::mutable_log_param() {
  set_has_log_param();
  if (log_param_ == NULL) log_param_ = new ::caffe::LogParameter;
  return log_param_;
}
inline ::caffe::LogParameter* LayerParameter::release_log_param() {
  clear_has_log_param();
  ::caffe::LogParameter* temp = log_param_;
  log_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_log_param(::caffe::LogParameter* log_param) {
  delete log_param_;
  log_param_ = log_param;
  if (log_param) {
    set_has_log_param();
  } else {
    clear_has_log_param();
  }
}

// optional .caffe.LRNParameter lrn_param = 118;
inline bool LayerParameter::has_lrn_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_lrn_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void LayerParameter::clear_has_lrn_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
  clear_has_lrn_param();
}
inline const ::caffe::LRNParameter& LayerParameter::lrn_param() const {
  return lrn_param_ != NULL ? *lrn_param_ : *default_instance_->lrn_param_;
}
inline ::caffe::LRNParameter* LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) lrn_param_ = new ::caffe::LRNParameter;
  return lrn_param_;
}
inline ::caffe::LRNParameter* LayerParameter::release_lrn_param() {
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
}

// optional .caffe.MemoryDataParameter memory_data_param = 119;
inline bool LayerParameter::has_memory_data_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_memory_data_param() {
  _has_bits_[1] |= 0x00000040u;
}
inline void LayerParameter::clear_has_memory_data_param() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
inline const ::caffe::MemoryDataParameter& LayerParameter::memory_data_param() const {
  return memory_data_param_ != NULL ? *memory_data_param_ : *default_instance_->memory_data_param_;
}
inline ::caffe::MemoryDataParameter* LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) memory_data_param_ = new ::caffe::MemoryDataParameter;
  return memory_data_param_;
}
inline ::caffe::MemoryDataParameter* LayerParameter::release_memory_data_param() {
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
}

// optional .caffe.MVNParameter mvn_param = 120;
inline bool LayerParameter::has_mvn_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_mvn_param() {
  _has_bits_[1] |= 0x00000080u;
}
inline void LayerParameter::clear_has_mvn_param() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
  clear_has_mvn_param();
}
inline const ::caffe::MVNParameter& LayerParameter::mvn_param() const {
  return mvn_param_ != NULL ? *mvn_param_ : *default_instance_->mvn_param_;
}
inline ::caffe::MVNParameter* LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) mvn_param_ = new ::caffe::MVNParameter;
  return mvn_param_;
}
inline ::caffe::MVNParameter* LayerParameter::release_mvn_param() {
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
}

// optional .caffe.PoolingParameter pooling_param = 121;
inline bool LayerParameter::has_pooling_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_pooling_param() {
  _has_bits_[1] |= 0x00000100u;
}
inline void LayerParameter::clear_has_pooling_param() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
inline const ::caffe::PoolingParameter& LayerParameter::pooling_param() const {
  return pooling_param_ != NULL ? *pooling_param_ : *default_instance_->pooling_param_;
}
inline ::caffe::PoolingParameter* LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) pooling_param_ = new ::caffe::PoolingParameter;
  return pooling_param_;
}
inline ::caffe::PoolingParameter* LayerParameter::release_pooling_param() {
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
}

// optional .caffe.PowerParameter power_param = 122;
inline bool LayerParameter::has_power_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_power_param() {
  _has_bits_[1] |= 0x00000200u;
}
inline void LayerParameter::clear_has_power_param() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
  clear_has_power_param();
}
inline const ::caffe::PowerParameter& LayerParameter::power_param() const {
  return power_param_ != NULL ? *power_param_ : *default_instance_->power_param_;
}
inline ::caffe::PowerParameter* LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) power_param_ = new ::caffe::PowerParameter;
  return power_param_;
}
inline ::caffe::PowerParameter* LayerParameter::release_power_param() {
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
}

// optional .caffe.PReLUParameter prelu_param = 131;
inline bool LayerParameter::has_prelu_param() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_prelu_param() {
  _has_bits_[1] |= 0x00000400u;
}
inline void LayerParameter::clear_has_prelu_param() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void LayerParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->::caffe::PReLUParameter::Clear();
  clear_has_prelu_param();
}
inline const ::caffe::PReLUParameter& LayerParameter::prelu_param() const {
  return prelu_param_ != NULL ? *prelu_param_ : *default_instance_->prelu_param_;
}
inline ::caffe::PReLUParameter* LayerParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) prelu_param_ = new ::caffe::PReLUParameter;
  return prelu_param_;
}
inline ::caffe::PReLUParameter* LayerParameter::release_prelu_param() {
  clear_has_prelu_param();
  ::caffe::PReLUParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param) {
  delete prelu_param_;
  prelu_param_ = prelu_param;
  if (prelu_param) {
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
}

// optional .caffe.PythonParameter python_param = 130;
inline bool LayerParameter::has_python_param() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_python_param() {
  _has_bits_[1] |= 0x00000800u;
}
inline void LayerParameter::clear_has_python_param() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void LayerParameter::clear_python_param() {
  if (python_param_ != NULL) python_param_->::caffe::PythonParameter::Clear();
  clear_has_python_param();
}
inline const ::caffe::PythonParameter& LayerParameter::python_param() const {
  return python_param_ != NULL ? *python_param_ : *default_instance_->python_param_;
}
inline ::caffe::PythonParameter* LayerParameter::mutable_python_param() {
  set_has_python_param();
  if (python_param_ == NULL) python_param_ = new ::caffe::PythonParameter;
  return python_param_;
}
inline ::caffe::PythonParameter* LayerParameter::release_python_param() {
  clear_has_python_param();
  ::caffe::PythonParameter* temp = python_param_;
  python_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_python_param(::caffe::PythonParameter* python_param) {
  delete python_param_;
  python_param_ = python_param;
  if (python_param) {
    set_has_python_param();
  } else {
    clear_has_python_param();
  }
}

// optional .caffe.ReductionParameter reduction_param = 136;
inline bool LayerParameter::has_reduction_param() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_reduction_param() {
  _has_bits_[1] |= 0x00001000u;
}
inline void LayerParameter::clear_has_reduction_param() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void LayerParameter::clear_reduction_param() {
  if (reduction_param_ != NULL) reduction_param_->::caffe::ReductionParameter::Clear();
  clear_has_reduction_param();
}
inline const ::caffe::ReductionParameter& LayerParameter::reduction_param() const {
  return reduction_param_ != NULL ? *reduction_param_ : *default_instance_->reduction_param_;
}
inline ::caffe::ReductionParameter* LayerParameter::mutable_reduction_param() {
  set_has_reduction_param();
  if (reduction_param_ == NULL) reduction_param_ = new ::caffe::ReductionParameter;
  return reduction_param_;
}
inline ::caffe::ReductionParameter* LayerParameter::release_reduction_param() {
  clear_has_reduction_param();
  ::caffe::ReductionParameter* temp = reduction_param_;
  reduction_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reduction_param(::caffe::ReductionParameter* reduction_param) {
  delete reduction_param_;
  reduction_param_ = reduction_param;
  if (reduction_param) {
    set_has_reduction_param();
  } else {
    clear_has_reduction_param();
  }
}

// optional .caffe.ReLUParameter relu_param = 123;
inline bool LayerParameter::has_relu_param() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_relu_param() {
  _has_bits_[1] |= 0x00002000u;
}
inline void LayerParameter::clear_has_relu_param() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
inline const ::caffe::ReLUParameter& LayerParameter::relu_param() const {
  return relu_param_ != NULL ? *relu_param_ : *default_instance_->relu_param_;
}
inline ::caffe::ReLUParameter* LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) relu_param_ = new ::caffe::ReLUParameter;
  return relu_param_;
}
inline ::caffe::ReLUParameter* LayerParameter::release_relu_param() {
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
}

// optional .caffe.ReshapeParameter reshape_param = 133;
inline bool LayerParameter::has_reshape_param() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_reshape_param() {
  _has_bits_[1] |= 0x00004000u;
}
inline void LayerParameter::clear_has_reshape_param() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void LayerParameter::clear_reshape_param() {
  if (reshape_param_ != NULL) reshape_param_->::caffe::ReshapeParameter::Clear();
  clear_has_reshape_param();
}
inline const ::caffe::ReshapeParameter& LayerParameter::reshape_param() const {
  return reshape_param_ != NULL ? *reshape_param_ : *default_instance_->reshape_param_;
}
inline ::caffe::ReshapeParameter* LayerParameter::mutable_reshape_param() {
  set_has_reshape_param();
  if (reshape_param_ == NULL) reshape_param_ = new ::caffe::ReshapeParameter;
  return reshape_param_;
}
inline ::caffe::ReshapeParameter* LayerParameter::release_reshape_param() {
  clear_has_reshape_param();
  ::caffe::ReshapeParameter* temp = reshape_param_;
  reshape_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reshape_param(::caffe::ReshapeParameter* reshape_param) {
  delete reshape_param_;
  reshape_param_ = reshape_param;
  if (reshape_param) {
    set_has_reshape_param();
  } else {
    clear_has_reshape_param();
  }
}

// optional .caffe.ScaleParameter scale_param = 142;
inline bool LayerParameter::has_scale_param() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_scale_param() {
  _has_bits_[1] |= 0x00008000u;
}
inline void LayerParameter::clear_has_scale_param() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void LayerParameter::clear_scale_param() {
  if (scale_param_ != NULL) scale_param_->::caffe::ScaleParameter::Clear();
  clear_has_scale_param();
}
inline const ::caffe::ScaleParameter& LayerParameter::scale_param() const {
  return scale_param_ != NULL ? *scale_param_ : *default_instance_->scale_param_;
}
inline ::caffe::ScaleParameter* LayerParameter::mutable_scale_param() {
  set_has_scale_param();
  if (scale_param_ == NULL) scale_param_ = new ::caffe::ScaleParameter;
  return scale_param_;
}
inline ::caffe::ScaleParameter* LayerParameter::release_scale_param() {
  clear_has_scale_param();
  ::caffe::ScaleParameter* temp = scale_param_;
  scale_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_scale_param(::caffe::ScaleParameter* scale_param) {
  delete scale_param_;
  scale_param_ = scale_param;
  if (scale_param) {
    set_has_scale_param();
  } else {
    clear_has_scale_param();
  }
}

// optional .caffe.SigmoidParameter sigmoid_param = 124;
inline bool LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_sigmoid_param() {
  _has_bits_[1] |= 0x00010000u;
}
inline void LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
inline const ::caffe::SigmoidParameter& LayerParameter::sigmoid_param() const {
  return sigmoid_param_ != NULL ? *sigmoid_param_ : *default_instance_->sigmoid_param_;
}
inline ::caffe::SigmoidParameter* LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) sigmoid_param_ = new ::caffe::SigmoidParameter;
  return sigmoid_param_;
}
inline ::caffe::SigmoidParameter* LayerParameter::release_sigmoid_param() {
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
}

// optional .caffe.SoftmaxParameter softmax_param = 125;
inline bool LayerParameter::has_softmax_param() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_softmax_param() {
  _has_bits_[1] |= 0x00020000u;
}
inline void LayerParameter::clear_has_softmax_param() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
inline const ::caffe::SoftmaxParameter& LayerParameter::softmax_param() const {
  return softmax_param_ != NULL ? *softmax_param_ : *default_instance_->softmax_param_;
}
inline ::caffe::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) softmax_param_ = new ::caffe::SoftmaxParameter;
  return softmax_param_;
}
inline ::caffe::SoftmaxParameter* LayerParameter::release_softmax_param() {
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
}

// optional .caffe.SPPParameter spp_param = 132;
inline bool LayerParameter::has_spp_param() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_spp_param() {
  _has_bits_[1] |= 0x00040000u;
}
inline void LayerParameter::clear_has_spp_param() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void LayerParameter::clear_spp_param() {
  if (spp_param_ != NULL) spp_param_->::caffe::SPPParameter::Clear();
  clear_has_spp_param();
}
inline const ::caffe::SPPParameter& LayerParameter::spp_param() const {
  return spp_param_ != NULL ? *spp_param_ : *default_instance_->spp_param_;
}
inline ::caffe::SPPParameter* LayerParameter::mutable_spp_param() {
  set_has_spp_param();
  if (spp_param_ == NULL) spp_param_ = new ::caffe::SPPParameter;
  return spp_param_;
}
inline ::caffe::SPPParameter* LayerParameter::release_spp_param() {
  clear_has_spp_param();
  ::caffe::SPPParameter* temp = spp_param_;
  spp_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_spp_param(::caffe::SPPParameter* spp_param) {
  delete spp_param_;
  spp_param_ = spp_param;
  if (spp_param) {
    set_has_spp_param();
  } else {
    clear_has_spp_param();
  }
}

// optional .caffe.SliceParameter slice_param = 126;
inline bool LayerParameter::has_slice_param() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_slice_param() {
  _has_bits_[1] |= 0x00080000u;
}
inline void LayerParameter::clear_has_slice_param() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
  clear_has_slice_param();
}
inline const ::caffe::SliceParameter& LayerParameter::slice_param() const {
  return slice_param_ != NULL ? *slice_param_ : *default_instance_->slice_param_;
}
inline ::caffe::SliceParameter* LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) slice_param_ = new ::caffe::SliceParameter;
  return slice_param_;
}
inline ::caffe::SliceParameter* LayerParameter::release_slice_param() {
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
}

// optional .caffe.TanHParameter tanh_param = 127;
inline bool LayerParameter::has_tanh_param() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_tanh_param() {
  _has_bits_[1] |= 0x00100000u;
}
inline void LayerParameter::clear_has_tanh_param() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
  clear_has_tanh_param();
}
inline const ::caffe::TanHParameter& LayerParameter::tanh_param() const {
  return tanh_param_ != NULL ? *tanh_param_ : *default_instance_->tanh_param_;
}
inline ::caffe::TanHParameter* LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) tanh_param_ = new ::caffe::TanHParameter;
  return tanh_param_;
}
inline ::caffe::TanHParameter* LayerParameter::release_tanh_param() {
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
}

// optional .caffe.ThresholdParameter threshold_param = 128;
inline bool LayerParameter::has_threshold_param() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_threshold_param() {
  _has_bits_[1] |= 0x00200000u;
}
inline void LayerParameter::clear_has_threshold_param() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
inline const ::caffe::ThresholdParameter& LayerParameter::threshold_param() const {
  return threshold_param_ != NULL ? *threshold_param_ : *default_instance_->threshold_param_;
}
inline ::caffe::ThresholdParameter* LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) threshold_param_ = new ::caffe::ThresholdParameter;
  return threshold_param_;
}
inline ::caffe::ThresholdParameter* LayerParameter::release_threshold_param() {
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
}

// optional .caffe.TileParameter tile_param = 138;
inline bool LayerParameter::has_tile_param() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_tile_param() {
  _has_bits_[1] |= 0x00400000u;
}
inline void LayerParameter::clear_has_tile_param() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void LayerParameter::clear_tile_param() {
  if (tile_param_ != NULL) tile_param_->::caffe::TileParameter::Clear();
  clear_has_tile_param();
}
inline const ::caffe::TileParameter& LayerParameter::tile_param() const {
  return tile_param_ != NULL ? *tile_param_ : *default_instance_->tile_param_;
}
inline ::caffe::TileParameter* LayerParameter::mutable_tile_param() {
  set_has_tile_param();
  if (tile_param_ == NULL) tile_param_ = new ::caffe::TileParameter;
  return tile_param_;
}
inline ::caffe::TileParameter* LayerParameter::release_tile_param() {
  clear_has_tile_param();
  ::caffe::TileParameter* temp = tile_param_;
  tile_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tile_param(::caffe::TileParameter* tile_param) {
  delete tile_param_;
  tile_param_ = tile_param;
  if (tile_param) {
    set_has_tile_param();
  } else {
    clear_has_tile_param();
  }
}

// optional .caffe.WindowDataParameter window_data_param = 129;
inline bool LayerParameter::has_window_data_param() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_window_data_param() {
  _has_bits_[1] |= 0x00800000u;
}
inline void LayerParameter::clear_has_window_data_param() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
inline const ::caffe::WindowDataParameter& LayerParameter::window_data_param() const {
  return window_data_param_ != NULL ? *window_data_param_ : *default_instance_->window_data_param_;
}
inline ::caffe::WindowDataParameter* LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) window_data_param_ = new ::caffe::WindowDataParameter;
  return window_data_param_;
}
inline ::caffe::WindowDataParameter* LayerParameter::release_window_data_param() {
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
}

// optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 1001;
inline bool LayerParameter::has_image_data_arbitrary_param() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_image_data_arbitrary_param() {
  _has_bits_[1] |= 0x01000000u;
}
inline void LayerParameter::clear_has_image_data_arbitrary_param() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void LayerParameter::clear_image_data_arbitrary_param() {
  if (image_data_arbitrary_param_ != NULL) image_data_arbitrary_param_->::caffe::ImageDataArbitraryParameter::Clear();
  clear_has_image_data_arbitrary_param();
}
inline const ::caffe::ImageDataArbitraryParameter& LayerParameter::image_data_arbitrary_param() const {
  return image_data_arbitrary_param_ != NULL ? *image_data_arbitrary_param_ : *default_instance_->image_data_arbitrary_param_;
}
inline ::caffe::ImageDataArbitraryParameter* LayerParameter::mutable_image_data_arbitrary_param() {
  set_has_image_data_arbitrary_param();
  if (image_data_arbitrary_param_ == NULL) image_data_arbitrary_param_ = new ::caffe::ImageDataArbitraryParameter;
  return image_data_arbitrary_param_;
}
inline ::caffe::ImageDataArbitraryParameter* LayerParameter::release_image_data_arbitrary_param() {
  clear_has_image_data_arbitrary_param();
  ::caffe::ImageDataArbitraryParameter* temp = image_data_arbitrary_param_;
  image_data_arbitrary_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_image_data_arbitrary_param(::caffe::ImageDataArbitraryParameter* image_data_arbitrary_param) {
  delete image_data_arbitrary_param_;
  image_data_arbitrary_param_ = image_data_arbitrary_param;
  if (image_data_arbitrary_param) {
    set_has_image_data_arbitrary_param();
  } else {
    clear_has_image_data_arbitrary_param();
  }
}

// optional .caffe.ManipulatelabelParameter manipulate_label_param = 1002;
inline bool LayerParameter::has_manipulate_label_param() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_manipulate_label_param() {
  _has_bits_[1] |= 0x02000000u;
}
inline void LayerParameter::clear_has_manipulate_label_param() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void LayerParameter::clear_manipulate_label_param() {
  if (manipulate_label_param_ != NULL) manipulate_label_param_->::caffe::ManipulatelabelParameter::Clear();
  clear_has_manipulate_label_param();
}
inline const ::caffe::ManipulatelabelParameter& LayerParameter::manipulate_label_param() const {
  return manipulate_label_param_ != NULL ? *manipulate_label_param_ : *default_instance_->manipulate_label_param_;
}
inline ::caffe::ManipulatelabelParameter* LayerParameter::mutable_manipulate_label_param() {
  set_has_manipulate_label_param();
  if (manipulate_label_param_ == NULL) manipulate_label_param_ = new ::caffe::ManipulatelabelParameter;
  return manipulate_label_param_;
}
inline ::caffe::ManipulatelabelParameter* LayerParameter::release_manipulate_label_param() {
  clear_has_manipulate_label_param();
  ::caffe::ManipulatelabelParameter* temp = manipulate_label_param_;
  manipulate_label_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_manipulate_label_param(::caffe::ManipulatelabelParameter* manipulate_label_param) {
  delete manipulate_label_param_;
  manipulate_label_param_ = manipulate_label_param;
  if (manipulate_label_param) {
    set_has_manipulate_label_param();
  } else {
    clear_has_manipulate_label_param();
  }
}

// optional .caffe.SpatialRecurrentParameter spatialrecurrent_param = 1003;
inline bool LayerParameter::has_spatialrecurrent_param() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_spatialrecurrent_param() {
  _has_bits_[1] |= 0x04000000u;
}
inline void LayerParameter::clear_has_spatialrecurrent_param() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void LayerParameter::clear_spatialrecurrent_param() {
  if (spatialrecurrent_param_ != NULL) spatialrecurrent_param_->::caffe::SpatialRecurrentParameter::Clear();
  clear_has_spatialrecurrent_param();
}
inline const ::caffe::SpatialRecurrentParameter& LayerParameter::spatialrecurrent_param() const {
  return spatialrecurrent_param_ != NULL ? *spatialrecurrent_param_ : *default_instance_->spatialrecurrent_param_;
}
inline ::caffe::SpatialRecurrentParameter* LayerParameter::mutable_spatialrecurrent_param() {
  set_has_spatialrecurrent_param();
  if (spatialrecurrent_param_ == NULL) spatialrecurrent_param_ = new ::caffe::SpatialRecurrentParameter;
  return spatialrecurrent_param_;
}
inline ::caffe::SpatialRecurrentParameter* LayerParameter::release_spatialrecurrent_param() {
  clear_has_spatialrecurrent_param();
  ::caffe::SpatialRecurrentParameter* temp = spatialrecurrent_param_;
  spatialrecurrent_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_spatialrecurrent_param(::caffe::SpatialRecurrentParameter* spatialrecurrent_param) {
  delete spatialrecurrent_param_;
  spatialrecurrent_param_ = spatialrecurrent_param;
  if (spatialrecurrent_param) {
    set_has_spatialrecurrent_param();
  } else {
    clear_has_spatialrecurrent_param();
  }
}

// optional .caffe.SpatialLstmParameter spatiallstm_param = 1004;
inline bool LayerParameter::has_spatiallstm_param() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_spatiallstm_param() {
  _has_bits_[1] |= 0x08000000u;
}
inline void LayerParameter::clear_has_spatiallstm_param() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void LayerParameter::clear_spatiallstm_param() {
  if (spatiallstm_param_ != NULL) spatiallstm_param_->::caffe::SpatialLstmParameter::Clear();
  clear_has_spatiallstm_param();
}
inline const ::caffe::SpatialLstmParameter& LayerParameter::spatiallstm_param() const {
  return spatiallstm_param_ != NULL ? *spatiallstm_param_ : *default_instance_->spatiallstm_param_;
}
inline ::caffe::SpatialLstmParameter* LayerParameter::mutable_spatiallstm_param() {
  set_has_spatiallstm_param();
  if (spatiallstm_param_ == NULL) spatiallstm_param_ = new ::caffe::SpatialLstmParameter;
  return spatiallstm_param_;
}
inline ::caffe::SpatialLstmParameter* LayerParameter::release_spatiallstm_param() {
  clear_has_spatiallstm_param();
  ::caffe::SpatialLstmParameter* temp = spatiallstm_param_;
  spatiallstm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_spatiallstm_param(::caffe::SpatialLstmParameter* spatiallstm_param) {
  delete spatiallstm_param_;
  spatiallstm_param_ = spatiallstm_param;
  if (spatiallstm_param) {
    set_has_spatiallstm_param();
  } else {
    clear_has_spatiallstm_param();
  }
}

// optional .caffe.WeakGateLstmParameter weakgatelstm_param = 1005;
inline bool LayerParameter::has_weakgatelstm_param() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_weakgatelstm_param() {
  _has_bits_[1] |= 0x10000000u;
}
inline void LayerParameter::clear_has_weakgatelstm_param() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void LayerParameter::clear_weakgatelstm_param() {
  if (weakgatelstm_param_ != NULL) weakgatelstm_param_->::caffe::WeakGateLstmParameter::Clear();
  clear_has_weakgatelstm_param();
}
inline const ::caffe::WeakGateLstmParameter& LayerParameter::weakgatelstm_param() const {
  return weakgatelstm_param_ != NULL ? *weakgatelstm_param_ : *default_instance_->weakgatelstm_param_;
}
inline ::caffe::WeakGateLstmParameter* LayerParameter::mutable_weakgatelstm_param() {
  set_has_weakgatelstm_param();
  if (weakgatelstm_param_ == NULL) weakgatelstm_param_ = new ::caffe::WeakGateLstmParameter;
  return weakgatelstm_param_;
}
inline ::caffe::WeakGateLstmParameter* LayerParameter::release_weakgatelstm_param() {
  clear_has_weakgatelstm_param();
  ::caffe::WeakGateLstmParameter* temp = weakgatelstm_param_;
  weakgatelstm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_weakgatelstm_param(::caffe::WeakGateLstmParameter* weakgatelstm_param) {
  delete weakgatelstm_param_;
  weakgatelstm_param_ = weakgatelstm_param;
  if (weakgatelstm_param) {
    set_has_weakgatelstm_param();
  } else {
    clear_has_weakgatelstm_param();
  }
}

// optional .caffe.TemporalLstmParameter temporallstm_param = 1006;
inline bool LayerParameter::has_temporallstm_param() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_temporallstm_param() {
  _has_bits_[1] |= 0x20000000u;
}
inline void LayerParameter::clear_has_temporallstm_param() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void LayerParameter::clear_temporallstm_param() {
  if (temporallstm_param_ != NULL) temporallstm_param_->::caffe::TemporalLstmParameter::Clear();
  clear_has_temporallstm_param();
}
inline const ::caffe::TemporalLstmParameter& LayerParameter::temporallstm_param() const {
  return temporallstm_param_ != NULL ? *temporallstm_param_ : *default_instance_->temporallstm_param_;
}
inline ::caffe::TemporalLstmParameter* LayerParameter::mutable_temporallstm_param() {
  set_has_temporallstm_param();
  if (temporallstm_param_ == NULL) temporallstm_param_ = new ::caffe::TemporalLstmParameter;
  return temporallstm_param_;
}
inline ::caffe::TemporalLstmParameter* LayerParameter::release_temporallstm_param() {
  clear_has_temporallstm_param();
  ::caffe::TemporalLstmParameter* temp = temporallstm_param_;
  temporallstm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_temporallstm_param(::caffe::TemporalLstmParameter* temporallstm_param) {
  delete temporallstm_param_;
  temporallstm_param_ = temporallstm_param;
  if (temporallstm_param) {
    set_has_temporallstm_param();
  } else {
    clear_has_temporallstm_param();
  }
}

// optional .caffe.ResizeParameter resize_param = 1007;
inline bool LayerParameter::has_resize_param() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_resize_param() {
  _has_bits_[1] |= 0x40000000u;
}
inline void LayerParameter::clear_has_resize_param() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void LayerParameter::clear_resize_param() {
  if (resize_param_ != NULL) resize_param_->::caffe::ResizeParameter::Clear();
  clear_has_resize_param();
}
inline const ::caffe::ResizeParameter& LayerParameter::resize_param() const {
  return resize_param_ != NULL ? *resize_param_ : *default_instance_->resize_param_;
}
inline ::caffe::ResizeParameter* LayerParameter::mutable_resize_param() {
  set_has_resize_param();
  if (resize_param_ == NULL) resize_param_ = new ::caffe::ResizeParameter;
  return resize_param_;
}
inline ::caffe::ResizeParameter* LayerParameter::release_resize_param() {
  clear_has_resize_param();
  ::caffe::ResizeParameter* temp = resize_param_;
  resize_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_resize_param(::caffe::ResizeParameter* resize_param) {
  delete resize_param_;
  resize_param_ = resize_param;
  if (resize_param) {
    set_has_resize_param();
  } else {
    clear_has_resize_param();
  }
}

// optional .caffe.ManipulateLossParameter manipulate_loss_param = 1008;
inline bool LayerParameter::has_manipulate_loss_param() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_manipulate_loss_param() {
  _has_bits_[1] |= 0x80000000u;
}
inline void LayerParameter::clear_has_manipulate_loss_param() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void LayerParameter::clear_manipulate_loss_param() {
  if (manipulate_loss_param_ != NULL) manipulate_loss_param_->::caffe::ManipulateLossParameter::Clear();
  clear_has_manipulate_loss_param();
}
inline const ::caffe::ManipulateLossParameter& LayerParameter::manipulate_loss_param() const {
  return manipulate_loss_param_ != NULL ? *manipulate_loss_param_ : *default_instance_->manipulate_loss_param_;
}
inline ::caffe::ManipulateLossParameter* LayerParameter::mutable_manipulate_loss_param() {
  set_has_manipulate_loss_param();
  if (manipulate_loss_param_ == NULL) manipulate_loss_param_ = new ::caffe::ManipulateLossParameter;
  return manipulate_loss_param_;
}
inline ::caffe::ManipulateLossParameter* LayerParameter::release_manipulate_loss_param() {
  clear_has_manipulate_loss_param();
  ::caffe::ManipulateLossParameter* temp = manipulate_loss_param_;
  manipulate_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_manipulate_loss_param(::caffe::ManipulateLossParameter* manipulate_loss_param) {
  delete manipulate_loss_param_;
  manipulate_loss_param_ = manipulate_loss_param;
  if (manipulate_loss_param) {
    set_has_manipulate_loss_param();
  } else {
    clear_has_manipulate_loss_param();
  }
}

// optional .caffe.ElementHingeLossParameter element_hinge_loss_param = 1009;
inline bool LayerParameter::has_element_hinge_loss_param() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_element_hinge_loss_param() {
  _has_bits_[2] |= 0x00000001u;
}
inline void LayerParameter::clear_has_element_hinge_loss_param() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void LayerParameter::clear_element_hinge_loss_param() {
  if (element_hinge_loss_param_ != NULL) element_hinge_loss_param_->::caffe::ElementHingeLossParameter::Clear();
  clear_has_element_hinge_loss_param();
}
inline const ::caffe::ElementHingeLossParameter& LayerParameter::element_hinge_loss_param() const {
  return element_hinge_loss_param_ != NULL ? *element_hinge_loss_param_ : *default_instance_->element_hinge_loss_param_;
}
inline ::caffe::ElementHingeLossParameter* LayerParameter::mutable_element_hinge_loss_param() {
  set_has_element_hinge_loss_param();
  if (element_hinge_loss_param_ == NULL) element_hinge_loss_param_ = new ::caffe::ElementHingeLossParameter;
  return element_hinge_loss_param_;
}
inline ::caffe::ElementHingeLossParameter* LayerParameter::release_element_hinge_loss_param() {
  clear_has_element_hinge_loss_param();
  ::caffe::ElementHingeLossParameter* temp = element_hinge_loss_param_;
  element_hinge_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_element_hinge_loss_param(::caffe::ElementHingeLossParameter* element_hinge_loss_param) {
  delete element_hinge_loss_param_;
  element_hinge_loss_param_ = element_hinge_loss_param;
  if (element_hinge_loss_param) {
    set_has_element_hinge_loss_param();
  } else {
    clear_has_element_hinge_loss_param();
  }
}

// optional .caffe.BNParameter bn_param = 1010;
inline bool LayerParameter::has_bn_param() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_bn_param() {
  _has_bits_[2] |= 0x00000002u;
}
inline void LayerParameter::clear_has_bn_param() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void LayerParameter::clear_bn_param() {
  if (bn_param_ != NULL) bn_param_->::caffe::BNParameter::Clear();
  clear_has_bn_param();
}
inline const ::caffe::BNParameter& LayerParameter::bn_param() const {
  return bn_param_ != NULL ? *bn_param_ : *default_instance_->bn_param_;
}
inline ::caffe::BNParameter* LayerParameter::mutable_bn_param() {
  set_has_bn_param();
  if (bn_param_ == NULL) bn_param_ = new ::caffe::BNParameter;
  return bn_param_;
}
inline ::caffe::BNParameter* LayerParameter::release_bn_param() {
  clear_has_bn_param();
  ::caffe::BNParameter* temp = bn_param_;
  bn_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_bn_param(::caffe::BNParameter* bn_param) {
  delete bn_param_;
  bn_param_ = bn_param;
  if (bn_param) {
    set_has_bn_param();
  } else {
    clear_has_bn_param();
  }
}

// optional .caffe.RegionconvolutionParameter regionconvolution_param = 1011;
inline bool LayerParameter::has_regionconvolution_param() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_regionconvolution_param() {
  _has_bits_[2] |= 0x00000004u;
}
inline void LayerParameter::clear_has_regionconvolution_param() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void LayerParameter::clear_regionconvolution_param() {
  if (regionconvolution_param_ != NULL) regionconvolution_param_->::caffe::RegionconvolutionParameter::Clear();
  clear_has_regionconvolution_param();
}
inline const ::caffe::RegionconvolutionParameter& LayerParameter::regionconvolution_param() const {
  return regionconvolution_param_ != NULL ? *regionconvolution_param_ : *default_instance_->regionconvolution_param_;
}
inline ::caffe::RegionconvolutionParameter* LayerParameter::mutable_regionconvolution_param() {
  set_has_regionconvolution_param();
  if (regionconvolution_param_ == NULL) regionconvolution_param_ = new ::caffe::RegionconvolutionParameter;
  return regionconvolution_param_;
}
inline ::caffe::RegionconvolutionParameter* LayerParameter::release_regionconvolution_param() {
  clear_has_regionconvolution_param();
  ::caffe::RegionconvolutionParameter* temp = regionconvolution_param_;
  regionconvolution_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_regionconvolution_param(::caffe::RegionconvolutionParameter* regionconvolution_param) {
  delete regionconvolution_param_;
  regionconvolution_param_ = regionconvolution_param;
  if (regionconvolution_param) {
    set_has_regionconvolution_param();
  } else {
    clear_has_regionconvolution_param();
  }
}

// optional .caffe.MapMetricLossParameter mapmetric_loss_param = 1012;
inline bool LayerParameter::has_mapmetric_loss_param() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_mapmetric_loss_param() {
  _has_bits_[2] |= 0x00000008u;
}
inline void LayerParameter::clear_has_mapmetric_loss_param() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void LayerParameter::clear_mapmetric_loss_param() {
  if (mapmetric_loss_param_ != NULL) mapmetric_loss_param_->::caffe::MapMetricLossParameter::Clear();
  clear_has_mapmetric_loss_param();
}
inline const ::caffe::MapMetricLossParameter& LayerParameter::mapmetric_loss_param() const {
  return mapmetric_loss_param_ != NULL ? *mapmetric_loss_param_ : *default_instance_->mapmetric_loss_param_;
}
inline ::caffe::MapMetricLossParameter* LayerParameter::mutable_mapmetric_loss_param() {
  set_has_mapmetric_loss_param();
  if (mapmetric_loss_param_ == NULL) mapmetric_loss_param_ = new ::caffe::MapMetricLossParameter;
  return mapmetric_loss_param_;
}
inline ::caffe::MapMetricLossParameter* LayerParameter::release_mapmetric_loss_param() {
  clear_has_mapmetric_loss_param();
  ::caffe::MapMetricLossParameter* temp = mapmetric_loss_param_;
  mapmetric_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_mapmetric_loss_param(::caffe::MapMetricLossParameter* mapmetric_loss_param) {
  delete mapmetric_loss_param_;
  mapmetric_loss_param_ = mapmetric_loss_param;
  if (mapmetric_loss_param) {
    set_has_mapmetric_loss_param();
  } else {
    clear_has_mapmetric_loss_param();
  }
}

// optional .caffe.ImageDataTextLabelParameter image_data_text_label_param = 1013;
inline bool LayerParameter::has_image_data_text_label_param() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_image_data_text_label_param() {
  _has_bits_[2] |= 0x00000010u;
}
inline void LayerParameter::clear_has_image_data_text_label_param() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void LayerParameter::clear_image_data_text_label_param() {
  if (image_data_text_label_param_ != NULL) image_data_text_label_param_->::caffe::ImageDataTextLabelParameter::Clear();
  clear_has_image_data_text_label_param();
}
inline const ::caffe::ImageDataTextLabelParameter& LayerParameter::image_data_text_label_param() const {
  return image_data_text_label_param_ != NULL ? *image_data_text_label_param_ : *default_instance_->image_data_text_label_param_;
}
inline ::caffe::ImageDataTextLabelParameter* LayerParameter::mutable_image_data_text_label_param() {
  set_has_image_data_text_label_param();
  if (image_data_text_label_param_ == NULL) image_data_text_label_param_ = new ::caffe::ImageDataTextLabelParameter;
  return image_data_text_label_param_;
}
inline ::caffe::ImageDataTextLabelParameter* LayerParameter::release_image_data_text_label_param() {
  clear_has_image_data_text_label_param();
  ::caffe::ImageDataTextLabelParameter* temp = image_data_text_label_param_;
  image_data_text_label_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_image_data_text_label_param(::caffe::ImageDataTextLabelParameter* image_data_text_label_param) {
  delete image_data_text_label_param_;
  image_data_text_label_param_ = image_data_text_label_param;
  if (image_data_text_label_param) {
    set_has_image_data_text_label_param();
  } else {
    clear_has_image_data_text_label_param();
  }
}

// optional .caffe.SuperCropParameter super_crop_param = 1014;
inline bool LayerParameter::has_super_crop_param() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_super_crop_param() {
  _has_bits_[2] |= 0x00000020u;
}
inline void LayerParameter::clear_has_super_crop_param() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void LayerParameter::clear_super_crop_param() {
  if (super_crop_param_ != NULL) super_crop_param_->::caffe::SuperCropParameter::Clear();
  clear_has_super_crop_param();
}
inline const ::caffe::SuperCropParameter& LayerParameter::super_crop_param() const {
  return super_crop_param_ != NULL ? *super_crop_param_ : *default_instance_->super_crop_param_;
}
inline ::caffe::SuperCropParameter* LayerParameter::mutable_super_crop_param() {
  set_has_super_crop_param();
  if (super_crop_param_ == NULL) super_crop_param_ = new ::caffe::SuperCropParameter;
  return super_crop_param_;
}
inline ::caffe::SuperCropParameter* LayerParameter::release_super_crop_param() {
  clear_has_super_crop_param();
  ::caffe::SuperCropParameter* temp = super_crop_param_;
  super_crop_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_super_crop_param(::caffe::SuperCropParameter* super_crop_param) {
  delete super_crop_param_;
  super_crop_param_ = super_crop_param;
  if (super_crop_param) {
    set_has_super_crop_param();
  } else {
    clear_has_super_crop_param();
  }
}

// optional .caffe.HardSampleParameter hardsample_param = 1015;
inline bool LayerParameter::has_hardsample_param() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_hardsample_param() {
  _has_bits_[2] |= 0x00000040u;
}
inline void LayerParameter::clear_has_hardsample_param() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void LayerParameter::clear_hardsample_param() {
  if (hardsample_param_ != NULL) hardsample_param_->::caffe::HardSampleParameter::Clear();
  clear_has_hardsample_param();
}
inline const ::caffe::HardSampleParameter& LayerParameter::hardsample_param() const {
  return hardsample_param_ != NULL ? *hardsample_param_ : *default_instance_->hardsample_param_;
}
inline ::caffe::HardSampleParameter* LayerParameter::mutable_hardsample_param() {
  set_has_hardsample_param();
  if (hardsample_param_ == NULL) hardsample_param_ = new ::caffe::HardSampleParameter;
  return hardsample_param_;
}
inline ::caffe::HardSampleParameter* LayerParameter::release_hardsample_param() {
  clear_has_hardsample_param();
  ::caffe::HardSampleParameter* temp = hardsample_param_;
  hardsample_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_hardsample_param(::caffe::HardSampleParameter* hardsample_param) {
  delete hardsample_param_;
  hardsample_param_ = hardsample_param;
  if (hardsample_param) {
    set_has_hardsample_param();
  } else {
    clear_has_hardsample_param();
  }
}

// optional .caffe.GateLstmParameter gatelstm_param = 1016;
inline bool LayerParameter::has_gatelstm_param() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_gatelstm_param() {
  _has_bits_[2] |= 0x00000080u;
}
inline void LayerParameter::clear_has_gatelstm_param() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void LayerParameter::clear_gatelstm_param() {
  if (gatelstm_param_ != NULL) gatelstm_param_->::caffe::GateLstmParameter::Clear();
  clear_has_gatelstm_param();
}
inline const ::caffe::GateLstmParameter& LayerParameter::gatelstm_param() const {
  return gatelstm_param_ != NULL ? *gatelstm_param_ : *default_instance_->gatelstm_param_;
}
inline ::caffe::GateLstmParameter* LayerParameter::mutable_gatelstm_param() {
  set_has_gatelstm_param();
  if (gatelstm_param_ == NULL) gatelstm_param_ = new ::caffe::GateLstmParameter;
  return gatelstm_param_;
}
inline ::caffe::GateLstmParameter* LayerParameter::release_gatelstm_param() {
  clear_has_gatelstm_param();
  ::caffe::GateLstmParameter* temp = gatelstm_param_;
  gatelstm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_gatelstm_param(::caffe::GateLstmParameter* gatelstm_param) {
  delete gatelstm_param_;
  gatelstm_param_ = gatelstm_param;
  if (gatelstm_param) {
    set_has_gatelstm_param();
  } else {
    clear_has_gatelstm_param();
  }
}

// optional .caffe.GateRecurrentParameter gaterecurrent_param = 1017;
inline bool LayerParameter::has_gaterecurrent_param() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_gaterecurrent_param() {
  _has_bits_[2] |= 0x00000100u;
}
inline void LayerParameter::clear_has_gaterecurrent_param() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void LayerParameter::clear_gaterecurrent_param() {
  if (gaterecurrent_param_ != NULL) gaterecurrent_param_->::caffe::GateRecurrentParameter::Clear();
  clear_has_gaterecurrent_param();
}
inline const ::caffe::GateRecurrentParameter& LayerParameter::gaterecurrent_param() const {
  return gaterecurrent_param_ != NULL ? *gaterecurrent_param_ : *default_instance_->gaterecurrent_param_;
}
inline ::caffe::GateRecurrentParameter* LayerParameter::mutable_gaterecurrent_param() {
  set_has_gaterecurrent_param();
  if (gaterecurrent_param_ == NULL) gaterecurrent_param_ = new ::caffe::GateRecurrentParameter;
  return gaterecurrent_param_;
}
inline ::caffe::GateRecurrentParameter* LayerParameter::release_gaterecurrent_param() {
  clear_has_gaterecurrent_param();
  ::caffe::GateRecurrentParameter* temp = gaterecurrent_param_;
  gaterecurrent_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_gaterecurrent_param(::caffe::GateRecurrentParameter* gaterecurrent_param) {
  delete gaterecurrent_param_;
  gaterecurrent_param_ = gaterecurrent_param;
  if (gaterecurrent_param) {
    set_has_gaterecurrent_param();
  } else {
    clear_has_gaterecurrent_param();
  }
}

// optional .caffe.DenseCRFParameter dense_crf_param = 1018;
inline bool LayerParameter::has_dense_crf_param() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_dense_crf_param() {
  _has_bits_[2] |= 0x00000200u;
}
inline void LayerParameter::clear_has_dense_crf_param() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void LayerParameter::clear_dense_crf_param() {
  if (dense_crf_param_ != NULL) dense_crf_param_->::caffe::DenseCRFParameter::Clear();
  clear_has_dense_crf_param();
}
inline const ::caffe::DenseCRFParameter& LayerParameter::dense_crf_param() const {
  return dense_crf_param_ != NULL ? *dense_crf_param_ : *default_instance_->dense_crf_param_;
}
inline ::caffe::DenseCRFParameter* LayerParameter::mutable_dense_crf_param() {
  set_has_dense_crf_param();
  if (dense_crf_param_ == NULL) dense_crf_param_ = new ::caffe::DenseCRFParameter;
  return dense_crf_param_;
}
inline ::caffe::DenseCRFParameter* LayerParameter::release_dense_crf_param() {
  clear_has_dense_crf_param();
  ::caffe::DenseCRFParameter* temp = dense_crf_param_;
  dense_crf_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dense_crf_param(::caffe::DenseCRFParameter* dense_crf_param) {
  delete dense_crf_param_;
  dense_crf_param_ = dense_crf_param;
  if (dense_crf_param) {
    set_has_dense_crf_param();
  } else {
    clear_has_dense_crf_param();
  }
}

// optional .caffe.PairImageDataParameter pair_image_data_param = 1019;
inline bool LayerParameter::has_pair_image_data_param() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_pair_image_data_param() {
  _has_bits_[2] |= 0x00000400u;
}
inline void LayerParameter::clear_has_pair_image_data_param() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void LayerParameter::clear_pair_image_data_param() {
  if (pair_image_data_param_ != NULL) pair_image_data_param_->::caffe::PairImageDataParameter::Clear();
  clear_has_pair_image_data_param();
}
inline const ::caffe::PairImageDataParameter& LayerParameter::pair_image_data_param() const {
  return pair_image_data_param_ != NULL ? *pair_image_data_param_ : *default_instance_->pair_image_data_param_;
}
inline ::caffe::PairImageDataParameter* LayerParameter::mutable_pair_image_data_param() {
  set_has_pair_image_data_param();
  if (pair_image_data_param_ == NULL) pair_image_data_param_ = new ::caffe::PairImageDataParameter;
  return pair_image_data_param_;
}
inline ::caffe::PairImageDataParameter* LayerParameter::release_pair_image_data_param() {
  clear_has_pair_image_data_param();
  ::caffe::PairImageDataParameter* temp = pair_image_data_param_;
  pair_image_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_pair_image_data_param(::caffe::PairImageDataParameter* pair_image_data_param) {
  delete pair_image_data_param_;
  pair_image_data_param_ = pair_image_data_param;
  if (pair_image_data_param) {
    set_has_pair_image_data_param();
  } else {
    clear_has_pair_image_data_param();
  }
}

// optional .caffe.TripletLossParameter triplet_loss_param = 1020;
inline bool LayerParameter::has_triplet_loss_param() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_triplet_loss_param() {
  _has_bits_[2] |= 0x00000800u;
}
inline void LayerParameter::clear_has_triplet_loss_param() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void LayerParameter::clear_triplet_loss_param() {
  if (triplet_loss_param_ != NULL) triplet_loss_param_->::caffe::TripletLossParameter::Clear();
  clear_has_triplet_loss_param();
}
inline const ::caffe::TripletLossParameter& LayerParameter::triplet_loss_param() const {
  return triplet_loss_param_ != NULL ? *triplet_loss_param_ : *default_instance_->triplet_loss_param_;
}
inline ::caffe::TripletLossParameter* LayerParameter::mutable_triplet_loss_param() {
  set_has_triplet_loss_param();
  if (triplet_loss_param_ == NULL) triplet_loss_param_ = new ::caffe::TripletLossParameter;
  return triplet_loss_param_;
}
inline ::caffe::TripletLossParameter* LayerParameter::release_triplet_loss_param() {
  clear_has_triplet_loss_param();
  ::caffe::TripletLossParameter* temp = triplet_loss_param_;
  triplet_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_triplet_loss_param(::caffe::TripletLossParameter* triplet_loss_param) {
  delete triplet_loss_param_;
  triplet_loss_param_ = triplet_loss_param;
  if (triplet_loss_param) {
    set_has_triplet_loss_param();
  } else {
    clear_has_triplet_loss_param();
  }
}

// optional .caffe.L2NormParameter l2norm_param = 1021;
inline bool LayerParameter::has_l2norm_param() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_l2norm_param() {
  _has_bits_[2] |= 0x00001000u;
}
inline void LayerParameter::clear_has_l2norm_param() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void LayerParameter::clear_l2norm_param() {
  if (l2norm_param_ != NULL) l2norm_param_->::caffe::L2NormParameter::Clear();
  clear_has_l2norm_param();
}
inline const ::caffe::L2NormParameter& LayerParameter::l2norm_param() const {
  return l2norm_param_ != NULL ? *l2norm_param_ : *default_instance_->l2norm_param_;
}
inline ::caffe::L2NormParameter* LayerParameter::mutable_l2norm_param() {
  set_has_l2norm_param();
  if (l2norm_param_ == NULL) l2norm_param_ = new ::caffe::L2NormParameter;
  return l2norm_param_;
}
inline ::caffe::L2NormParameter* LayerParameter::release_l2norm_param() {
  clear_has_l2norm_param();
  ::caffe::L2NormParameter* temp = l2norm_param_;
  l2norm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_l2norm_param(::caffe::L2NormParameter* l2norm_param) {
  delete l2norm_param_;
  l2norm_param_ = l2norm_param;
  if (l2norm_param) {
    set_has_l2norm_param();
  } else {
    clear_has_l2norm_param();
  }
}

// optional .caffe.PadParameter pad_param = 1022;
inline bool LayerParameter::has_pad_param() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_pad_param() {
  _has_bits_[2] |= 0x00002000u;
}
inline void LayerParameter::clear_has_pad_param() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void LayerParameter::clear_pad_param() {
  if (pad_param_ != NULL) pad_param_->::caffe::PadParameter::Clear();
  clear_has_pad_param();
}
inline const ::caffe::PadParameter& LayerParameter::pad_param() const {
  return pad_param_ != NULL ? *pad_param_ : *default_instance_->pad_param_;
}
inline ::caffe::PadParameter* LayerParameter::mutable_pad_param() {
  set_has_pad_param();
  if (pad_param_ == NULL) pad_param_ = new ::caffe::PadParameter;
  return pad_param_;
}
inline ::caffe::PadParameter* LayerParameter::release_pad_param() {
  clear_has_pad_param();
  ::caffe::PadParameter* temp = pad_param_;
  pad_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_pad_param(::caffe::PadParameter* pad_param) {
  delete pad_param_;
  pad_param_ = pad_param;
  if (pad_param) {
    set_has_pad_param();
  } else {
    clear_has_pad_param();
  }
}

// optional .caffe.FacerecImageDataParameter facerec_image_data_param = 1023;
inline bool LayerParameter::has_facerec_image_data_param() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_facerec_image_data_param() {
  _has_bits_[2] |= 0x00004000u;
}
inline void LayerParameter::clear_has_facerec_image_data_param() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void LayerParameter::clear_facerec_image_data_param() {
  if (facerec_image_data_param_ != NULL) facerec_image_data_param_->::caffe::FacerecImageDataParameter::Clear();
  clear_has_facerec_image_data_param();
}
inline const ::caffe::FacerecImageDataParameter& LayerParameter::facerec_image_data_param() const {
  return facerec_image_data_param_ != NULL ? *facerec_image_data_param_ : *default_instance_->facerec_image_data_param_;
}
inline ::caffe::FacerecImageDataParameter* LayerParameter::mutable_facerec_image_data_param() {
  set_has_facerec_image_data_param();
  if (facerec_image_data_param_ == NULL) facerec_image_data_param_ = new ::caffe::FacerecImageDataParameter;
  return facerec_image_data_param_;
}
inline ::caffe::FacerecImageDataParameter* LayerParameter::release_facerec_image_data_param() {
  clear_has_facerec_image_data_param();
  ::caffe::FacerecImageDataParameter* temp = facerec_image_data_param_;
  facerec_image_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_facerec_image_data_param(::caffe::FacerecImageDataParameter* facerec_image_data_param) {
  delete facerec_image_data_param_;
  facerec_image_data_param_ = facerec_image_data_param;
  if (facerec_image_data_param) {
    set_has_facerec_image_data_param();
  } else {
    clear_has_facerec_image_data_param();
  }
}

// optional .caffe.TripletDataParameter triplet_data_param = 1024;
inline bool LayerParameter::has_triplet_data_param() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_triplet_data_param() {
  _has_bits_[2] |= 0x00008000u;
}
inline void LayerParameter::clear_has_triplet_data_param() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void LayerParameter::clear_triplet_data_param() {
  if (triplet_data_param_ != NULL) triplet_data_param_->::caffe::TripletDataParameter::Clear();
  clear_has_triplet_data_param();
}
inline const ::caffe::TripletDataParameter& LayerParameter::triplet_data_param() const {
  return triplet_data_param_ != NULL ? *triplet_data_param_ : *default_instance_->triplet_data_param_;
}
inline ::caffe::TripletDataParameter* LayerParameter::mutable_triplet_data_param() {
  set_has_triplet_data_param();
  if (triplet_data_param_ == NULL) triplet_data_param_ = new ::caffe::TripletDataParameter;
  return triplet_data_param_;
}
inline ::caffe::TripletDataParameter* LayerParameter::release_triplet_data_param() {
  clear_has_triplet_data_param();
  ::caffe::TripletDataParameter* temp = triplet_data_param_;
  triplet_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_triplet_data_param(::caffe::TripletDataParameter* triplet_data_param) {
  delete triplet_data_param_;
  triplet_data_param_ = triplet_data_param;
  if (triplet_data_param) {
    set_has_triplet_data_param();
  } else {
    clear_has_triplet_data_param();
  }
}

// optional .caffe.SegmentDataParameter segment_data_param = 1025;
inline bool LayerParameter::has_segment_data_param() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_segment_data_param() {
  _has_bits_[2] |= 0x00010000u;
}
inline void LayerParameter::clear_has_segment_data_param() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void LayerParameter::clear_segment_data_param() {
  if (segment_data_param_ != NULL) segment_data_param_->::caffe::SegmentDataParameter::Clear();
  clear_has_segment_data_param();
}
inline const ::caffe::SegmentDataParameter& LayerParameter::segment_data_param() const {
  return segment_data_param_ != NULL ? *segment_data_param_ : *default_instance_->segment_data_param_;
}
inline ::caffe::SegmentDataParameter* LayerParameter::mutable_segment_data_param() {
  set_has_segment_data_param();
  if (segment_data_param_ == NULL) segment_data_param_ = new ::caffe::SegmentDataParameter;
  return segment_data_param_;
}
inline ::caffe::SegmentDataParameter* LayerParameter::release_segment_data_param() {
  clear_has_segment_data_param();
  ::caffe::SegmentDataParameter* temp = segment_data_param_;
  segment_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_segment_data_param(::caffe::SegmentDataParameter* segment_data_param) {
  delete segment_data_param_;
  segment_data_param_ = segment_data_param;
  if (segment_data_param) {
    set_has_segment_data_param();
  } else {
    clear_has_segment_data_param();
  }
}

// optional .caffe.LearnCRFParameter learn_crf_param = 1026;
inline bool LayerParameter::has_learn_crf_param() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_learn_crf_param() {
  _has_bits_[2] |= 0x00020000u;
}
inline void LayerParameter::clear_has_learn_crf_param() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void LayerParameter::clear_learn_crf_param() {
  if (learn_crf_param_ != NULL) learn_crf_param_->::caffe::LearnCRFParameter::Clear();
  clear_has_learn_crf_param();
}
inline const ::caffe::LearnCRFParameter& LayerParameter::learn_crf_param() const {
  return learn_crf_param_ != NULL ? *learn_crf_param_ : *default_instance_->learn_crf_param_;
}
inline ::caffe::LearnCRFParameter* LayerParameter::mutable_learn_crf_param() {
  set_has_learn_crf_param();
  if (learn_crf_param_ == NULL) learn_crf_param_ = new ::caffe::LearnCRFParameter;
  return learn_crf_param_;
}
inline ::caffe::LearnCRFParameter* LayerParameter::release_learn_crf_param() {
  clear_has_learn_crf_param();
  ::caffe::LearnCRFParameter* temp = learn_crf_param_;
  learn_crf_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_learn_crf_param(::caffe::LearnCRFParameter* learn_crf_param) {
  delete learn_crf_param_;
  learn_crf_param_ = learn_crf_param;
  if (learn_crf_param) {
    set_has_learn_crf_param();
  } else {
    clear_has_learn_crf_param();
  }
}

// optional .caffe.GateRecurrent2dParameter gaterecurrent2d_param = 1027;
inline bool LayerParameter::has_gaterecurrent2d_param() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_gaterecurrent2d_param() {
  _has_bits_[2] |= 0x00040000u;
}
inline void LayerParameter::clear_has_gaterecurrent2d_param() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void LayerParameter::clear_gaterecurrent2d_param() {
  if (gaterecurrent2d_param_ != NULL) gaterecurrent2d_param_->::caffe::GateRecurrent2dParameter::Clear();
  clear_has_gaterecurrent2d_param();
}
inline const ::caffe::GateRecurrent2dParameter& LayerParameter::gaterecurrent2d_param() const {
  return gaterecurrent2d_param_ != NULL ? *gaterecurrent2d_param_ : *default_instance_->gaterecurrent2d_param_;
}
inline ::caffe::GateRecurrent2dParameter* LayerParameter::mutable_gaterecurrent2d_param() {
  set_has_gaterecurrent2d_param();
  if (gaterecurrent2d_param_ == NULL) gaterecurrent2d_param_ = new ::caffe::GateRecurrent2dParameter;
  return gaterecurrent2d_param_;
}
inline ::caffe::GateRecurrent2dParameter* LayerParameter::release_gaterecurrent2d_param() {
  clear_has_gaterecurrent2d_param();
  ::caffe::GateRecurrent2dParameter* temp = gaterecurrent2d_param_;
  gaterecurrent2d_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_gaterecurrent2d_param(::caffe::GateRecurrent2dParameter* gaterecurrent2d_param) {
  delete gaterecurrent2d_param_;
  gaterecurrent2d_param_ = gaterecurrent2d_param;
  if (gaterecurrent2d_param) {
    set_has_gaterecurrent2d_param();
  } else {
    clear_has_gaterecurrent2d_param();
  }
}

// optional .caffe.UpsampleParameter upsample_param = 1028;
inline bool LayerParameter::has_upsample_param() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_upsample_param() {
  _has_bits_[2] |= 0x00080000u;
}
inline void LayerParameter::clear_has_upsample_param() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void LayerParameter::clear_upsample_param() {
  if (upsample_param_ != NULL) upsample_param_->::caffe::UpsampleParameter::Clear();
  clear_has_upsample_param();
}
inline const ::caffe::UpsampleParameter& LayerParameter::upsample_param() const {
  return upsample_param_ != NULL ? *upsample_param_ : *default_instance_->upsample_param_;
}
inline ::caffe::UpsampleParameter* LayerParameter::mutable_upsample_param() {
  set_has_upsample_param();
  if (upsample_param_ == NULL) upsample_param_ = new ::caffe::UpsampleParameter;
  return upsample_param_;
}
inline ::caffe::UpsampleParameter* LayerParameter::release_upsample_param() {
  clear_has_upsample_param();
  ::caffe::UpsampleParameter* temp = upsample_param_;
  upsample_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_upsample_param(::caffe::UpsampleParameter* upsample_param) {
  delete upsample_param_;
  upsample_param_ = upsample_param;
  if (upsample_param) {
    set_has_upsample_param();
  } else {
    clear_has_upsample_param();
  }
}

// -------------------------------------------------------------------

// GateRecurrent2dParameter

// optional uint32 num_output = 1;
inline bool GateRecurrent2dParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateRecurrent2dParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateRecurrent2dParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateRecurrent2dParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 GateRecurrent2dParameter::num_output() const {
  return num_output_;
}
inline void GateRecurrent2dParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
}

// optional bool horizontal = 16 [default = true];
inline bool GateRecurrent2dParameter::has_horizontal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GateRecurrent2dParameter::set_has_horizontal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GateRecurrent2dParameter::clear_has_horizontal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GateRecurrent2dParameter::clear_horizontal() {
  horizontal_ = true;
  clear_has_horizontal();
}
inline bool GateRecurrent2dParameter::horizontal() const {
  return horizontal_;
}
inline void GateRecurrent2dParameter::set_horizontal(bool value) {
  set_has_horizontal();
  horizontal_ = value;
}

// optional bool reverse = 17 [default = false];
inline bool GateRecurrent2dParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GateRecurrent2dParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GateRecurrent2dParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GateRecurrent2dParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
inline bool GateRecurrent2dParameter::reverse() const {
  return reverse_;
}
inline void GateRecurrent2dParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
}

// optional .caffe.GateRecurrent2dParameter.Active active = 18 [default = LINEAR];
inline bool GateRecurrent2dParameter::has_active() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GateRecurrent2dParameter::set_has_active() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GateRecurrent2dParameter::clear_has_active() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GateRecurrent2dParameter::clear_active() {
  active_ = 0;
  clear_has_active();
}
inline ::caffe::GateRecurrent2dParameter_Active GateRecurrent2dParameter::active() const {
  return static_cast< ::caffe::GateRecurrent2dParameter_Active >(active_);
}
inline void GateRecurrent2dParameter::set_active(::caffe::GateRecurrent2dParameter_Active value) {
  assert(::caffe::GateRecurrent2dParameter_Active_IsValid(value));
  set_has_active();
  active_ = value;
}

// -------------------------------------------------------------------

// LearnCRFParameter

// optional int32 kernel_size = 1;
inline bool LearnCRFParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LearnCRFParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LearnCRFParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LearnCRFParameter::clear_kernel_size() {
  kernel_size_ = 0;
  clear_has_kernel_size();
}
inline ::google::protobuf::int32 LearnCRFParameter::kernel_size() const {
  return kernel_size_;
}
inline void LearnCRFParameter::set_kernel_size(::google::protobuf::int32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
}

// optional int32 dilation = 18 [default = 1];
inline bool LearnCRFParameter::has_dilation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LearnCRFParameter::set_has_dilation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LearnCRFParameter::clear_has_dilation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LearnCRFParameter::clear_dilation() {
  dilation_ = 1;
  clear_has_dilation();
}
inline ::google::protobuf::int32 LearnCRFParameter::dilation() const {
  return dilation_;
}
inline void LearnCRFParameter::set_dilation(::google::protobuf::int32 value) {
  set_has_dilation();
  dilation_ = value;
}

// -------------------------------------------------------------------

// TopInfo

// optional int32 channels = 1 [default = 1];
inline bool TopInfo::has_channels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopInfo::set_has_channels() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopInfo::clear_has_channels() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopInfo::clear_channels() {
  channels_ = 1;
  clear_has_channels();
}
inline ::google::protobuf::int32 TopInfo::channels() const {
  return channels_;
}
inline void TopInfo::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
}

// optional int32 width = 2;
inline bool TopInfo::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopInfo::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopInfo::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 TopInfo::width() const {
  return width_;
}
inline void TopInfo::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 height = 3;
inline bool TopInfo::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TopInfo::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TopInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TopInfo::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 TopInfo::height() const {
  return height_;
}
inline void TopInfo::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// repeated float mean = 4;
inline int TopInfo::mean_size() const {
  return mean_.size();
}
inline void TopInfo::clear_mean() {
  mean_.Clear();
}
inline float TopInfo::mean(int index) const {
  return mean_.Get(index);
}
inline void TopInfo::set_mean(int index, float value) {
  mean_.Set(index, value);
}
inline void TopInfo::add_mean(float value) {
  mean_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
TopInfo::mean() const {
  return mean_;
}
inline ::google::protobuf::RepeatedField< float >*
TopInfo::mutable_mean() {
  return &mean_;
}

// optional .caffe.TopInfo.ResizeType resize_type = 5 [default = NEAREST];
inline bool TopInfo::has_resize_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TopInfo::set_has_resize_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TopInfo::clear_has_resize_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TopInfo::clear_resize_type() {
  resize_type_ = 1;
  clear_has_resize_type();
}
inline ::caffe::TopInfo_ResizeType TopInfo::resize_type() const {
  return static_cast< ::caffe::TopInfo_ResizeType >(resize_type_);
}
inline void TopInfo::set_resize_type(::caffe::TopInfo_ResizeType value) {
  assert(::caffe::TopInfo_ResizeType_IsValid(value));
  set_has_resize_type();
  resize_type_ = value;
}

// optional float data_scale = 6 [default = 1];
inline bool TopInfo::has_data_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TopInfo::set_has_data_scale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TopInfo::clear_has_data_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TopInfo::clear_data_scale() {
  data_scale_ = 1;
  clear_has_data_scale();
}
inline float TopInfo::data_scale() const {
  return data_scale_;
}
inline void TopInfo::set_data_scale(float value) {
  set_has_data_scale();
  data_scale_ = value;
}

// optional .caffe.TopInfo.SrcType src_type = 7 [default = IMAGE];
inline bool TopInfo::has_src_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TopInfo::set_has_src_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TopInfo::clear_has_src_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TopInfo::clear_src_type() {
  src_type_ = 0;
  clear_has_src_type();
}
inline ::caffe::TopInfo_SrcType TopInfo::src_type() const {
  return static_cast< ::caffe::TopInfo_SrcType >(src_type_);
}
inline void TopInfo::set_src_type(::caffe::TopInfo_SrcType value) {
  assert(::caffe::TopInfo_SrcType_IsValid(value));
  set_has_src_type();
  src_type_ = value;
}

// optional int32 radius = 8 [default = 0];
inline bool TopInfo::has_radius() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TopInfo::set_has_radius() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TopInfo::clear_has_radius() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TopInfo::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline ::google::protobuf::int32 TopInfo::radius() const {
  return radius_;
}
inline void TopInfo::set_radius(::google::protobuf::int32 value) {
  set_has_radius();
  radius_ = value;
}

// optional float gamma_distrib_alpha = 9 [default = -1];
inline bool TopInfo::has_gamma_distrib_alpha() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TopInfo::set_has_gamma_distrib_alpha() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TopInfo::clear_has_gamma_distrib_alpha() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TopInfo::clear_gamma_distrib_alpha() {
  gamma_distrib_alpha_ = -1;
  clear_has_gamma_distrib_alpha();
}
inline float TopInfo::gamma_distrib_alpha() const {
  return gamma_distrib_alpha_;
}
inline void TopInfo::set_gamma_distrib_alpha(float value) {
  set_has_gamma_distrib_alpha();
  gamma_distrib_alpha_ = value;
}

// optional float gamma_distrib_gamma = 10 [default = 0];
inline bool TopInfo::has_gamma_distrib_gamma() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TopInfo::set_has_gamma_distrib_gamma() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TopInfo::clear_has_gamma_distrib_gamma() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TopInfo::clear_gamma_distrib_gamma() {
  gamma_distrib_gamma_ = 0;
  clear_has_gamma_distrib_gamma();
}
inline float TopInfo::gamma_distrib_gamma() const {
  return gamma_distrib_gamma_;
}
inline void TopInfo::set_gamma_distrib_gamma(float value) {
  set_has_gamma_distrib_gamma();
  gamma_distrib_gamma_ = value;
}

// -------------------------------------------------------------------

// SegmentDataParameter

// optional string source = 1;
inline bool SegmentDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SegmentDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SegmentDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SegmentDataParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& SegmentDataParameter::source() const {
  return *source_;
}
inline void SegmentDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void SegmentDataParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void SegmentDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SegmentDataParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* SegmentDataParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SegmentDataParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string data_folder = 2 [default = ""];
inline bool SegmentDataParameter::has_data_folder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SegmentDataParameter::set_has_data_folder() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SegmentDataParameter::clear_has_data_folder() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SegmentDataParameter::clear_data_folder() {
  if (data_folder_ != &::google::protobuf::internal::kEmptyString) {
    data_folder_->clear();
  }
  clear_has_data_folder();
}
inline const ::std::string& SegmentDataParameter::data_folder() const {
  return *data_folder_;
}
inline void SegmentDataParameter::set_data_folder(const ::std::string& value) {
  set_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    data_folder_ = new ::std::string;
  }
  data_folder_->assign(value);
}
inline void SegmentDataParameter::set_data_folder(const char* value) {
  set_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    data_folder_ = new ::std::string;
  }
  data_folder_->assign(value);
}
inline void SegmentDataParameter::set_data_folder(const char* value, size_t size) {
  set_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    data_folder_ = new ::std::string;
  }
  data_folder_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SegmentDataParameter::mutable_data_folder() {
  set_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    data_folder_ = new ::std::string;
  }
  return data_folder_;
}
inline ::std::string* SegmentDataParameter::release_data_folder() {
  clear_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_folder_;
    data_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SegmentDataParameter::set_allocated_data_folder(::std::string* data_folder) {
  if (data_folder_ != &::google::protobuf::internal::kEmptyString) {
    delete data_folder_;
  }
  if (data_folder) {
    set_has_data_folder();
    data_folder_ = data_folder;
  } else {
    clear_has_data_folder();
    data_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .caffe.TopInfo topinfo = 3;
inline int SegmentDataParameter::topinfo_size() const {
  return topinfo_.size();
}
inline void SegmentDataParameter::clear_topinfo() {
  topinfo_.Clear();
}
inline const ::caffe::TopInfo& SegmentDataParameter::topinfo(int index) const {
  return topinfo_.Get(index);
}
inline ::caffe::TopInfo* SegmentDataParameter::mutable_topinfo(int index) {
  return topinfo_.Mutable(index);
}
inline ::caffe::TopInfo* SegmentDataParameter::add_topinfo() {
  return topinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::TopInfo >&
SegmentDataParameter::topinfo() const {
  return topinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::TopInfo >*
SegmentDataParameter::mutable_topinfo() {
  return &topinfo_;
}

// optional int32 batch_size = 4;
inline bool SegmentDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SegmentDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SegmentDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SegmentDataParameter::clear_batch_size() {
  batch_size_ = 0;
  clear_has_batch_size();
}
inline ::google::protobuf::int32 SegmentDataParameter::batch_size() const {
  return batch_size_;
}
inline void SegmentDataParameter::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
}

// optional bool shuffle = 5 [default = true];
inline bool SegmentDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SegmentDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SegmentDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SegmentDataParameter::clear_shuffle() {
  shuffle_ = true;
  clear_has_shuffle();
}
inline bool SegmentDataParameter::shuffle() const {
  return shuffle_;
}
inline void SegmentDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
}

// optional bool use_distrib = 6 [default = false];
inline bool SegmentDataParameter::has_use_distrib() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SegmentDataParameter::set_has_use_distrib() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SegmentDataParameter::clear_has_use_distrib() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SegmentDataParameter::clear_use_distrib() {
  use_distrib_ = false;
  clear_has_use_distrib();
}
inline bool SegmentDataParameter::use_distrib() const {
  return use_distrib_;
}
inline void SegmentDataParameter::set_use_distrib(bool value) {
  set_has_use_distrib();
  use_distrib_ = value;
}

// optional float distrib_angle = 7 [default = 0];
inline bool SegmentDataParameter::has_distrib_angle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SegmentDataParameter::set_has_distrib_angle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SegmentDataParameter::clear_has_distrib_angle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SegmentDataParameter::clear_distrib_angle() {
  distrib_angle_ = 0;
  clear_has_distrib_angle();
}
inline float SegmentDataParameter::distrib_angle() const {
  return distrib_angle_;
}
inline void SegmentDataParameter::set_distrib_angle(float value) {
  set_has_distrib_angle();
  distrib_angle_ = value;
}

// optional float distrib_scale = 8 [default = 1];
inline bool SegmentDataParameter::has_distrib_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SegmentDataParameter::set_has_distrib_scale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SegmentDataParameter::clear_has_distrib_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SegmentDataParameter::clear_distrib_scale() {
  distrib_scale_ = 1;
  clear_has_distrib_scale();
}
inline float SegmentDataParameter::distrib_scale() const {
  return distrib_scale_;
}
inline void SegmentDataParameter::set_distrib_scale(float value) {
  set_has_distrib_scale();
  distrib_scale_ = value;
}

// optional float distrib_x = 9 [default = 0];
inline bool SegmentDataParameter::has_distrib_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SegmentDataParameter::set_has_distrib_x() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SegmentDataParameter::clear_has_distrib_x() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SegmentDataParameter::clear_distrib_x() {
  distrib_x_ = 0;
  clear_has_distrib_x();
}
inline float SegmentDataParameter::distrib_x() const {
  return distrib_x_;
}
inline void SegmentDataParameter::set_distrib_x(float value) {
  set_has_distrib_x();
  distrib_x_ = value;
}

// optional float distrib_y = 10 [default = 0];
inline bool SegmentDataParameter::has_distrib_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SegmentDataParameter::set_has_distrib_y() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SegmentDataParameter::clear_has_distrib_y() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SegmentDataParameter::clear_distrib_y() {
  distrib_y_ = 0;
  clear_has_distrib_y();
}
inline float SegmentDataParameter::distrib_y() const {
  return distrib_y_;
}
inline void SegmentDataParameter::set_distrib_y(float value) {
  set_has_distrib_y();
  distrib_y_ = value;
}

// optional string source_splitflag = 11 [default = "||"];
inline bool SegmentDataParameter::has_source_splitflag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SegmentDataParameter::set_has_source_splitflag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SegmentDataParameter::clear_has_source_splitflag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SegmentDataParameter::clear_source_splitflag() {
  if (source_splitflag_ != _default_source_splitflag_) {
    source_splitflag_->assign(*_default_source_splitflag_);
  }
  clear_has_source_splitflag();
}
inline const ::std::string& SegmentDataParameter::source_splitflag() const {
  return *source_splitflag_;
}
inline void SegmentDataParameter::set_source_splitflag(const ::std::string& value) {
  set_has_source_splitflag();
  if (source_splitflag_ == _default_source_splitflag_) {
    source_splitflag_ = new ::std::string;
  }
  source_splitflag_->assign(value);
}
inline void SegmentDataParameter::set_source_splitflag(const char* value) {
  set_has_source_splitflag();
  if (source_splitflag_ == _default_source_splitflag_) {
    source_splitflag_ = new ::std::string;
  }
  source_splitflag_->assign(value);
}
inline void SegmentDataParameter::set_source_splitflag(const char* value, size_t size) {
  set_has_source_splitflag();
  if (source_splitflag_ == _default_source_splitflag_) {
    source_splitflag_ = new ::std::string;
  }
  source_splitflag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SegmentDataParameter::mutable_source_splitflag() {
  set_has_source_splitflag();
  if (source_splitflag_ == _default_source_splitflag_) {
    source_splitflag_ = new ::std::string(*_default_source_splitflag_);
  }
  return source_splitflag_;
}
inline ::std::string* SegmentDataParameter::release_source_splitflag() {
  clear_has_source_splitflag();
  if (source_splitflag_ == _default_source_splitflag_) {
    return NULL;
  } else {
    ::std::string* temp = source_splitflag_;
    source_splitflag_ = const_cast< ::std::string*>(_default_source_splitflag_);
    return temp;
  }
}
inline void SegmentDataParameter::set_allocated_source_splitflag(::std::string* source_splitflag) {
  if (source_splitflag_ != _default_source_splitflag_) {
    delete source_splitflag_;
  }
  if (source_splitflag) {
    set_has_source_splitflag();
    source_splitflag_ = source_splitflag;
  } else {
    clear_has_source_splitflag();
    source_splitflag_ = const_cast< ::std::string*>(_default_source_splitflag_);
  }
}

// optional bool use_flip = 12 [default = false];
inline bool SegmentDataParameter::has_use_flip() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SegmentDataParameter::set_has_use_flip() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SegmentDataParameter::clear_has_use_flip() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SegmentDataParameter::clear_use_flip() {
  use_flip_ = false;
  clear_has_use_flip();
}
inline bool SegmentDataParameter::use_flip() const {
  return use_flip_;
}
inline void SegmentDataParameter::set_use_flip(bool value) {
  set_has_use_flip();
  use_flip_ = value;
}

// -------------------------------------------------------------------

// TripletDataSubParameter

// optional string source = 1;
inline bool TripletDataSubParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TripletDataSubParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TripletDataSubParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TripletDataSubParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& TripletDataSubParameter::source() const {
  return *source_;
}
inline void TripletDataSubParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void TripletDataSubParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void TripletDataSubParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TripletDataSubParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* TripletDataSubParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TripletDataSubParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string source_filename = 8;
inline bool TripletDataSubParameter::has_source_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TripletDataSubParameter::set_has_source_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TripletDataSubParameter::clear_has_source_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TripletDataSubParameter::clear_source_filename() {
  if (source_filename_ != &::google::protobuf::internal::kEmptyString) {
    source_filename_->clear();
  }
  clear_has_source_filename();
}
inline const ::std::string& TripletDataSubParameter::source_filename() const {
  return *source_filename_;
}
inline void TripletDataSubParameter::set_source_filename(const ::std::string& value) {
  set_has_source_filename();
  if (source_filename_ == &::google::protobuf::internal::kEmptyString) {
    source_filename_ = new ::std::string;
  }
  source_filename_->assign(value);
}
inline void TripletDataSubParameter::set_source_filename(const char* value) {
  set_has_source_filename();
  if (source_filename_ == &::google::protobuf::internal::kEmptyString) {
    source_filename_ = new ::std::string;
  }
  source_filename_->assign(value);
}
inline void TripletDataSubParameter::set_source_filename(const char* value, size_t size) {
  set_has_source_filename();
  if (source_filename_ == &::google::protobuf::internal::kEmptyString) {
    source_filename_ = new ::std::string;
  }
  source_filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TripletDataSubParameter::mutable_source_filename() {
  set_has_source_filename();
  if (source_filename_ == &::google::protobuf::internal::kEmptyString) {
    source_filename_ = new ::std::string;
  }
  return source_filename_;
}
inline ::std::string* TripletDataSubParameter::release_source_filename() {
  clear_has_source_filename();
  if (source_filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_filename_;
    source_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TripletDataSubParameter::set_allocated_source_filename(::std::string* source_filename) {
  if (source_filename_ != &::google::protobuf::internal::kEmptyString) {
    delete source_filename_;
  }
  if (source_filename) {
    set_has_source_filename();
    source_filename_ = source_filename;
  } else {
    clear_has_source_filename();
    source_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string source_landmark = 9;
inline bool TripletDataSubParameter::has_source_landmark() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TripletDataSubParameter::set_has_source_landmark() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TripletDataSubParameter::clear_has_source_landmark() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TripletDataSubParameter::clear_source_landmark() {
  if (source_landmark_ != &::google::protobuf::internal::kEmptyString) {
    source_landmark_->clear();
  }
  clear_has_source_landmark();
}
inline const ::std::string& TripletDataSubParameter::source_landmark() const {
  return *source_landmark_;
}
inline void TripletDataSubParameter::set_source_landmark(const ::std::string& value) {
  set_has_source_landmark();
  if (source_landmark_ == &::google::protobuf::internal::kEmptyString) {
    source_landmark_ = new ::std::string;
  }
  source_landmark_->assign(value);
}
inline void TripletDataSubParameter::set_source_landmark(const char* value) {
  set_has_source_landmark();
  if (source_landmark_ == &::google::protobuf::internal::kEmptyString) {
    source_landmark_ = new ::std::string;
  }
  source_landmark_->assign(value);
}
inline void TripletDataSubParameter::set_source_landmark(const char* value, size_t size) {
  set_has_source_landmark();
  if (source_landmark_ == &::google::protobuf::internal::kEmptyString) {
    source_landmark_ = new ::std::string;
  }
  source_landmark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TripletDataSubParameter::mutable_source_landmark() {
  set_has_source_landmark();
  if (source_landmark_ == &::google::protobuf::internal::kEmptyString) {
    source_landmark_ = new ::std::string;
  }
  return source_landmark_;
}
inline ::std::string* TripletDataSubParameter::release_source_landmark() {
  clear_has_source_landmark();
  if (source_landmark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_landmark_;
    source_landmark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TripletDataSubParameter::set_allocated_source_landmark(::std::string* source_landmark) {
  if (source_landmark_ != &::google::protobuf::internal::kEmptyString) {
    delete source_landmark_;
  }
  if (source_landmark) {
    set_has_source_landmark();
    source_landmark_ = source_landmark;
  } else {
    clear_has_source_landmark();
    source_landmark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string imgs_folder = 2;
inline bool TripletDataSubParameter::has_imgs_folder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TripletDataSubParameter::set_has_imgs_folder() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TripletDataSubParameter::clear_has_imgs_folder() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TripletDataSubParameter::clear_imgs_folder() {
  if (imgs_folder_ != &::google::protobuf::internal::kEmptyString) {
    imgs_folder_->clear();
  }
  clear_has_imgs_folder();
}
inline const ::std::string& TripletDataSubParameter::imgs_folder() const {
  return *imgs_folder_;
}
inline void TripletDataSubParameter::set_imgs_folder(const ::std::string& value) {
  set_has_imgs_folder();
  if (imgs_folder_ == &::google::protobuf::internal::kEmptyString) {
    imgs_folder_ = new ::std::string;
  }
  imgs_folder_->assign(value);
}
inline void TripletDataSubParameter::set_imgs_folder(const char* value) {
  set_has_imgs_folder();
  if (imgs_folder_ == &::google::protobuf::internal::kEmptyString) {
    imgs_folder_ = new ::std::string;
  }
  imgs_folder_->assign(value);
}
inline void TripletDataSubParameter::set_imgs_folder(const char* value, size_t size) {
  set_has_imgs_folder();
  if (imgs_folder_ == &::google::protobuf::internal::kEmptyString) {
    imgs_folder_ = new ::std::string;
  }
  imgs_folder_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TripletDataSubParameter::mutable_imgs_folder() {
  set_has_imgs_folder();
  if (imgs_folder_ == &::google::protobuf::internal::kEmptyString) {
    imgs_folder_ = new ::std::string;
  }
  return imgs_folder_;
}
inline ::std::string* TripletDataSubParameter::release_imgs_folder() {
  clear_has_imgs_folder();
  if (imgs_folder_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imgs_folder_;
    imgs_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TripletDataSubParameter::set_allocated_imgs_folder(::std::string* imgs_folder) {
  if (imgs_folder_ != &::google::protobuf::internal::kEmptyString) {
    delete imgs_folder_;
  }
  if (imgs_folder) {
    set_has_imgs_folder();
    imgs_folder_ = imgs_folder;
  } else {
    clear_has_imgs_folder();
    imgs_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 subjects_per_iter = 3 [default = 10];
inline bool TripletDataSubParameter::has_subjects_per_iter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TripletDataSubParameter::set_has_subjects_per_iter() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TripletDataSubParameter::clear_has_subjects_per_iter() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TripletDataSubParameter::clear_subjects_per_iter() {
  subjects_per_iter_ = 10;
  clear_has_subjects_per_iter();
}
inline ::google::protobuf::int32 TripletDataSubParameter::subjects_per_iter() const {
  return subjects_per_iter_;
}
inline void TripletDataSubParameter::set_subjects_per_iter(::google::protobuf::int32 value) {
  set_has_subjects_per_iter();
  subjects_per_iter_ = value;
}

// optional int32 samples_per_subject = 4 [default = 10];
inline bool TripletDataSubParameter::has_samples_per_subject() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TripletDataSubParameter::set_has_samples_per_subject() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TripletDataSubParameter::clear_has_samples_per_subject() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TripletDataSubParameter::clear_samples_per_subject() {
  samples_per_subject_ = 10;
  clear_has_samples_per_subject();
}
inline ::google::protobuf::int32 TripletDataSubParameter::samples_per_subject() const {
  return samples_per_subject_;
}
inline void TripletDataSubParameter::set_samples_per_subject(::google::protobuf::int32 value) {
  set_has_samples_per_subject();
  samples_per_subject_ = value;
}

// optional int32 o3_subjects_per_iter = 5 [default = 0];
inline bool TripletDataSubParameter::has_o3_subjects_per_iter() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TripletDataSubParameter::set_has_o3_subjects_per_iter() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TripletDataSubParameter::clear_has_o3_subjects_per_iter() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TripletDataSubParameter::clear_o3_subjects_per_iter() {
  o3_subjects_per_iter_ = 0;
  clear_has_o3_subjects_per_iter();
}
inline ::google::protobuf::int32 TripletDataSubParameter::o3_subjects_per_iter() const {
  return o3_subjects_per_iter_;
}
inline void TripletDataSubParameter::set_o3_subjects_per_iter(::google::protobuf::int32 value) {
  set_has_o3_subjects_per_iter();
  o3_subjects_per_iter_ = value;
}

// optional int32 o3_samples_per_subject = 6 [default = 1];
inline bool TripletDataSubParameter::has_o3_samples_per_subject() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TripletDataSubParameter::set_has_o3_samples_per_subject() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TripletDataSubParameter::clear_has_o3_samples_per_subject() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TripletDataSubParameter::clear_o3_samples_per_subject() {
  o3_samples_per_subject_ = 1;
  clear_has_o3_samples_per_subject();
}
inline ::google::protobuf::int32 TripletDataSubParameter::o3_samples_per_subject() const {
  return o3_samples_per_subject_;
}
inline void TripletDataSubParameter::set_o3_samples_per_subject(::google::protobuf::int32 value) {
  set_has_o3_samples_per_subject();
  o3_samples_per_subject_ = value;
}

// optional int32 key_points_count = 10 [default = 0];
inline bool TripletDataSubParameter::has_key_points_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TripletDataSubParameter::set_has_key_points_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TripletDataSubParameter::clear_has_key_points_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TripletDataSubParameter::clear_key_points_count() {
  key_points_count_ = 0;
  clear_has_key_points_count();
}
inline ::google::protobuf::int32 TripletDataSubParameter::key_points_count() const {
  return key_points_count_;
}
inline void TripletDataSubParameter::set_key_points_count(::google::protobuf::int32 value) {
  set_has_key_points_count();
  key_points_count_ = value;
}

// -------------------------------------------------------------------

// TripletDataParameter

// optional .caffe.TripletDataSubParameter train_sub_param = 1;
inline bool TripletDataParameter::has_train_sub_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TripletDataParameter::set_has_train_sub_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TripletDataParameter::clear_has_train_sub_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TripletDataParameter::clear_train_sub_param() {
  if (train_sub_param_ != NULL) train_sub_param_->::caffe::TripletDataSubParameter::Clear();
  clear_has_train_sub_param();
}
inline const ::caffe::TripletDataSubParameter& TripletDataParameter::train_sub_param() const {
  return train_sub_param_ != NULL ? *train_sub_param_ : *default_instance_->train_sub_param_;
}
inline ::caffe::TripletDataSubParameter* TripletDataParameter::mutable_train_sub_param() {
  set_has_train_sub_param();
  if (train_sub_param_ == NULL) train_sub_param_ = new ::caffe::TripletDataSubParameter;
  return train_sub_param_;
}
inline ::caffe::TripletDataSubParameter* TripletDataParameter::release_train_sub_param() {
  clear_has_train_sub_param();
  ::caffe::TripletDataSubParameter* temp = train_sub_param_;
  train_sub_param_ = NULL;
  return temp;
}
inline void TripletDataParameter::set_allocated_train_sub_param(::caffe::TripletDataSubParameter* train_sub_param) {
  delete train_sub_param_;
  train_sub_param_ = train_sub_param;
  if (train_sub_param) {
    set_has_train_sub_param();
  } else {
    clear_has_train_sub_param();
  }
}

// optional .caffe.TripletDataSubParameter test_sub_param = 2;
inline bool TripletDataParameter::has_test_sub_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TripletDataParameter::set_has_test_sub_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TripletDataParameter::clear_has_test_sub_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TripletDataParameter::clear_test_sub_param() {
  if (test_sub_param_ != NULL) test_sub_param_->::caffe::TripletDataSubParameter::Clear();
  clear_has_test_sub_param();
}
inline const ::caffe::TripletDataSubParameter& TripletDataParameter::test_sub_param() const {
  return test_sub_param_ != NULL ? *test_sub_param_ : *default_instance_->test_sub_param_;
}
inline ::caffe::TripletDataSubParameter* TripletDataParameter::mutable_test_sub_param() {
  set_has_test_sub_param();
  if (test_sub_param_ == NULL) test_sub_param_ = new ::caffe::TripletDataSubParameter;
  return test_sub_param_;
}
inline ::caffe::TripletDataSubParameter* TripletDataParameter::release_test_sub_param() {
  clear_has_test_sub_param();
  ::caffe::TripletDataSubParameter* temp = test_sub_param_;
  test_sub_param_ = NULL;
  return temp;
}
inline void TripletDataParameter::set_allocated_test_sub_param(::caffe::TripletDataSubParameter* test_sub_param) {
  delete test_sub_param_;
  test_sub_param_ = test_sub_param;
  if (test_sub_param) {
    set_has_test_sub_param();
  } else {
    clear_has_test_sub_param();
  }
}

// optional int32 height = 3 [default = 40];
inline bool TripletDataParameter::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TripletDataParameter::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TripletDataParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TripletDataParameter::clear_height() {
  height_ = 40;
  clear_has_height();
}
inline ::google::protobuf::int32 TripletDataParameter::height() const {
  return height_;
}
inline void TripletDataParameter::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// optional int32 width = 4 [default = 40];
inline bool TripletDataParameter::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TripletDataParameter::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TripletDataParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TripletDataParameter::clear_width() {
  width_ = 40;
  clear_has_width();
}
inline ::google::protobuf::int32 TripletDataParameter::width() const {
  return width_;
}
inline void TripletDataParameter::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional bool is_color = 5 [default = true];
inline bool TripletDataParameter::has_is_color() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TripletDataParameter::set_has_is_color() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TripletDataParameter::clear_has_is_color() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TripletDataParameter::clear_is_color() {
  is_color_ = true;
  clear_has_is_color();
}
inline bool TripletDataParameter::is_color() const {
  return is_color_;
}
inline void TripletDataParameter::set_is_color(bool value) {
  set_has_is_color();
  is_color_ = value;
}

// optional bool flip = 6 [default = false];
inline bool TripletDataParameter::has_flip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TripletDataParameter::set_has_flip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TripletDataParameter::clear_has_flip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TripletDataParameter::clear_flip() {
  flip_ = false;
  clear_has_flip();
}
inline bool TripletDataParameter::flip() const {
  return flip_;
}
inline void TripletDataParameter::set_flip(bool value) {
  set_has_flip();
  flip_ = value;
}

// optional .caffe.ImageInfo image_info = 8;
inline bool TripletDataParameter::has_image_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TripletDataParameter::set_has_image_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TripletDataParameter::clear_has_image_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TripletDataParameter::clear_image_info() {
  if (image_info_ != NULL) image_info_->::caffe::ImageInfo::Clear();
  clear_has_image_info();
}
inline const ::caffe::ImageInfo& TripletDataParameter::image_info() const {
  return image_info_ != NULL ? *image_info_ : *default_instance_->image_info_;
}
inline ::caffe::ImageInfo* TripletDataParameter::mutable_image_info() {
  set_has_image_info();
  if (image_info_ == NULL) image_info_ = new ::caffe::ImageInfo;
  return image_info_;
}
inline ::caffe::ImageInfo* TripletDataParameter::release_image_info() {
  clear_has_image_info();
  ::caffe::ImageInfo* temp = image_info_;
  image_info_ = NULL;
  return temp;
}
inline void TripletDataParameter::set_allocated_image_info(::caffe::ImageInfo* image_info) {
  delete image_info_;
  image_info_ = image_info;
  if (image_info) {
    set_has_image_info();
  } else {
    clear_has_image_info();
  }
}

// repeated .caffe.AffineImageParameter affine_image_param = 7;
inline int TripletDataParameter::affine_image_param_size() const {
  return affine_image_param_.size();
}
inline void TripletDataParameter::clear_affine_image_param() {
  affine_image_param_.Clear();
}
inline const ::caffe::AffineImageParameter& TripletDataParameter::affine_image_param(int index) const {
  return affine_image_param_.Get(index);
}
inline ::caffe::AffineImageParameter* TripletDataParameter::mutable_affine_image_param(int index) {
  return affine_image_param_.Mutable(index);
}
inline ::caffe::AffineImageParameter* TripletDataParameter::add_affine_image_param() {
  return affine_image_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter >&
TripletDataParameter::affine_image_param() const {
  return affine_image_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter >*
TripletDataParameter::mutable_affine_image_param() {
  return &affine_image_param_;
}

// optional float meanvalue = 9 [default = 0];
inline bool TripletDataParameter::has_meanvalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TripletDataParameter::set_has_meanvalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TripletDataParameter::clear_has_meanvalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TripletDataParameter::clear_meanvalue() {
  meanvalue_ = 0;
  clear_has_meanvalue();
}
inline float TripletDataParameter::meanvalue() const {
  return meanvalue_;
}
inline void TripletDataParameter::set_meanvalue(float value) {
  set_has_meanvalue();
  meanvalue_ = value;
}

// optional float datascale = 10 [default = 1];
inline bool TripletDataParameter::has_datascale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TripletDataParameter::set_has_datascale() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TripletDataParameter::clear_has_datascale() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TripletDataParameter::clear_datascale() {
  datascale_ = 1;
  clear_has_datascale();
}
inline float TripletDataParameter::datascale() const {
  return datascale_;
}
inline void TripletDataParameter::set_datascale(float value) {
  set_has_datascale();
  datascale_ = value;
}

// -------------------------------------------------------------------

// FacerecImageDataParameter

// optional string source = 1;
inline bool FacerecImageDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FacerecImageDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FacerecImageDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FacerecImageDataParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& FacerecImageDataParameter::source() const {
  return *source_;
}
inline void FacerecImageDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void FacerecImageDataParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void FacerecImageDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FacerecImageDataParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* FacerecImageDataParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FacerecImageDataParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool use_disturb = 14 [default = false];
inline bool FacerecImageDataParameter::has_use_disturb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FacerecImageDataParameter::set_has_use_disturb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FacerecImageDataParameter::clear_has_use_disturb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FacerecImageDataParameter::clear_use_disturb() {
  use_disturb_ = false;
  clear_has_use_disturb();
}
inline bool FacerecImageDataParameter::use_disturb() const {
  return use_disturb_;
}
inline void FacerecImageDataParameter::set_use_disturb(bool value) {
  set_has_use_disturb();
  use_disturb_ = value;
}

// optional bool useflip = 15 [default = false];
inline bool FacerecImageDataParameter::has_useflip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FacerecImageDataParameter::set_has_useflip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FacerecImageDataParameter::clear_has_useflip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FacerecImageDataParameter::clear_useflip() {
  useflip_ = false;
  clear_has_useflip();
}
inline bool FacerecImageDataParameter::useflip() const {
  return useflip_;
}
inline void FacerecImageDataParameter::set_useflip(bool value) {
  set_has_useflip();
  useflip_ = value;
}

// optional uint32 batch_size = 4;
inline bool FacerecImageDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FacerecImageDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FacerecImageDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FacerecImageDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 FacerecImageDataParameter::batch_size() const {
  return batch_size_;
}
inline void FacerecImageDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool FacerecImageDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FacerecImageDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FacerecImageDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FacerecImageDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 FacerecImageDataParameter::rand_skip() const {
  return rand_skip_;
}
inline void FacerecImageDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
}

// optional bool shuffle = 8 [default = false];
inline bool FacerecImageDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FacerecImageDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FacerecImageDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FacerecImageDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool FacerecImageDataParameter::shuffle() const {
  return shuffle_;
}
inline void FacerecImageDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
}

// optional bool mirror = 6 [default = false];
inline bool FacerecImageDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FacerecImageDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FacerecImageDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FacerecImageDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool FacerecImageDataParameter::mirror() const {
  return mirror_;
}
inline void FacerecImageDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
}

// optional float mean_value = 3 [default = 0];
inline bool FacerecImageDataParameter::has_mean_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FacerecImageDataParameter::set_has_mean_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FacerecImageDataParameter::clear_has_mean_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FacerecImageDataParameter::clear_mean_value() {
  mean_value_ = 0;
  clear_has_mean_value();
}
inline float FacerecImageDataParameter::mean_value() const {
  return mean_value_;
}
inline void FacerecImageDataParameter::set_mean_value(float value) {
  set_has_mean_value();
  mean_value_ = value;
}

// optional float data_scale = 29 [default = 0];
inline bool FacerecImageDataParameter::has_data_scale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FacerecImageDataParameter::set_has_data_scale() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FacerecImageDataParameter::clear_has_data_scale() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FacerecImageDataParameter::clear_data_scale() {
  data_scale_ = 0;
  clear_has_data_scale();
}
inline float FacerecImageDataParameter::data_scale() const {
  return data_scale_;
}
inline void FacerecImageDataParameter::set_data_scale(float value) {
  set_has_data_scale();
  data_scale_ = value;
}

// optional float rand_angle = 18 [default = 0];
inline bool FacerecImageDataParameter::has_rand_angle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FacerecImageDataParameter::set_has_rand_angle() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FacerecImageDataParameter::clear_has_rand_angle() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FacerecImageDataParameter::clear_rand_angle() {
  rand_angle_ = 0;
  clear_has_rand_angle();
}
inline float FacerecImageDataParameter::rand_angle() const {
  return rand_angle_;
}
inline void FacerecImageDataParameter::set_rand_angle(float value) {
  set_has_rand_angle();
  rand_angle_ = value;
}

// optional float rand_scale = 19 [default = 0];
inline bool FacerecImageDataParameter::has_rand_scale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FacerecImageDataParameter::set_has_rand_scale() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FacerecImageDataParameter::clear_has_rand_scale() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FacerecImageDataParameter::clear_rand_scale() {
  rand_scale_ = 0;
  clear_has_rand_scale();
}
inline float FacerecImageDataParameter::rand_scale() const {
  return rand_scale_;
}
inline void FacerecImageDataParameter::set_rand_scale(float value) {
  set_has_rand_scale();
  rand_scale_ = value;
}

// optional float rand_movex = 20 [default = 0];
inline bool FacerecImageDataParameter::has_rand_movex() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FacerecImageDataParameter::set_has_rand_movex() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FacerecImageDataParameter::clear_has_rand_movex() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FacerecImageDataParameter::clear_rand_movex() {
  rand_movex_ = 0;
  clear_has_rand_movex();
}
inline float FacerecImageDataParameter::rand_movex() const {
  return rand_movex_;
}
inline void FacerecImageDataParameter::set_rand_movex(float value) {
  set_has_rand_movex();
  rand_movex_ = value;
}

// optional float rand_movey = 21 [default = 0];
inline bool FacerecImageDataParameter::has_rand_movey() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FacerecImageDataParameter::set_has_rand_movey() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FacerecImageDataParameter::clear_has_rand_movey() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FacerecImageDataParameter::clear_rand_movey() {
  rand_movey_ = 0;
  clear_has_rand_movey();
}
inline float FacerecImageDataParameter::rand_movey() const {
  return rand_movey_;
}
inline void FacerecImageDataParameter::set_rand_movey(float value) {
  set_has_rand_movey();
  rand_movey_ = value;
}

// optional uint32 select_num_per_instance = 23 [default = 0];
inline bool FacerecImageDataParameter::has_select_num_per_instance() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FacerecImageDataParameter::set_has_select_num_per_instance() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FacerecImageDataParameter::clear_has_select_num_per_instance() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FacerecImageDataParameter::clear_select_num_per_instance() {
  select_num_per_instance_ = 0u;
  clear_has_select_num_per_instance();
}
inline ::google::protobuf::uint32 FacerecImageDataParameter::select_num_per_instance() const {
  return select_num_per_instance_;
}
inline void FacerecImageDataParameter::set_select_num_per_instance(::google::protobuf::uint32 value) {
  set_has_select_num_per_instance();
  select_num_per_instance_ = value;
}

// optional uint32 select_oneinstance_num = 26 [default = 0];
inline bool FacerecImageDataParameter::has_select_oneinstance_num() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FacerecImageDataParameter::set_has_select_oneinstance_num() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FacerecImageDataParameter::clear_has_select_oneinstance_num() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FacerecImageDataParameter::clear_select_oneinstance_num() {
  select_oneinstance_num_ = 0u;
  clear_has_select_oneinstance_num();
}
inline ::google::protobuf::uint32 FacerecImageDataParameter::select_oneinstance_num() const {
  return select_oneinstance_num_;
}
inline void FacerecImageDataParameter::set_select_oneinstance_num(::google::protobuf::uint32 value) {
  set_has_select_oneinstance_num();
  select_oneinstance_num_ = value;
}

// optional .caffe.FacerecImageDataParameter.DataType datatype = 24 [default = SINGLEPATCH];
inline bool FacerecImageDataParameter::has_datatype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FacerecImageDataParameter::set_has_datatype() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FacerecImageDataParameter::clear_has_datatype() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FacerecImageDataParameter::clear_datatype() {
  datatype_ = 0;
  clear_has_datatype();
}
inline ::caffe::FacerecImageDataParameter_DataType FacerecImageDataParameter::datatype() const {
  return static_cast< ::caffe::FacerecImageDataParameter_DataType >(datatype_);
}
inline void FacerecImageDataParameter::set_datatype(::caffe::FacerecImageDataParameter_DataType value) {
  assert(::caffe::FacerecImageDataParameter_DataType_IsValid(value));
  set_has_datatype();
  datatype_ = value;
}

// optional uint32 key_points_num = 25 [default = 0];
inline bool FacerecImageDataParameter::has_key_points_num() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FacerecImageDataParameter::set_has_key_points_num() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FacerecImageDataParameter::clear_has_key_points_num() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FacerecImageDataParameter::clear_key_points_num() {
  key_points_num_ = 0u;
  clear_has_key_points_num();
}
inline ::google::protobuf::uint32 FacerecImageDataParameter::key_points_num() const {
  return key_points_num_;
}
inline void FacerecImageDataParameter::set_key_points_num(::google::protobuf::uint32 value) {
  set_has_key_points_num();
  key_points_num_ = value;
}

// repeated .caffe.AffineImageParameter affine_param = 27;
inline int FacerecImageDataParameter::affine_param_size() const {
  return affine_param_.size();
}
inline void FacerecImageDataParameter::clear_affine_param() {
  affine_param_.Clear();
}
inline const ::caffe::AffineImageParameter& FacerecImageDataParameter::affine_param(int index) const {
  return affine_param_.Get(index);
}
inline ::caffe::AffineImageParameter* FacerecImageDataParameter::mutable_affine_param(int index) {
  return affine_param_.Mutable(index);
}
inline ::caffe::AffineImageParameter* FacerecImageDataParameter::add_affine_param() {
  return affine_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter >&
FacerecImageDataParameter::affine_param() const {
  return affine_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter >*
FacerecImageDataParameter::mutable_affine_param() {
  return &affine_param_;
}

// optional string data_folder = 28 [default = ""];
inline bool FacerecImageDataParameter::has_data_folder() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FacerecImageDataParameter::set_has_data_folder() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FacerecImageDataParameter::clear_has_data_folder() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FacerecImageDataParameter::clear_data_folder() {
  if (data_folder_ != &::google::protobuf::internal::kEmptyString) {
    data_folder_->clear();
  }
  clear_has_data_folder();
}
inline const ::std::string& FacerecImageDataParameter::data_folder() const {
  return *data_folder_;
}
inline void FacerecImageDataParameter::set_data_folder(const ::std::string& value) {
  set_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    data_folder_ = new ::std::string;
  }
  data_folder_->assign(value);
}
inline void FacerecImageDataParameter::set_data_folder(const char* value) {
  set_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    data_folder_ = new ::std::string;
  }
  data_folder_->assign(value);
}
inline void FacerecImageDataParameter::set_data_folder(const char* value, size_t size) {
  set_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    data_folder_ = new ::std::string;
  }
  data_folder_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FacerecImageDataParameter::mutable_data_folder() {
  set_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    data_folder_ = new ::std::string;
  }
  return data_folder_;
}
inline ::std::string* FacerecImageDataParameter::release_data_folder() {
  clear_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_folder_;
    data_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FacerecImageDataParameter::set_allocated_data_folder(::std::string* data_folder) {
  if (data_folder_ != &::google::protobuf::internal::kEmptyString) {
    delete data_folder_;
  }
  if (data_folder) {
    set_has_data_folder();
    data_folder_ = data_folder;
  } else {
    clear_has_data_folder();
    data_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PadParameter

// optional uint32 pad_w = 1 [default = 0];
inline bool PadParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PadParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PadParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PadParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 PadParameter::pad_w() const {
  return pad_w_;
}
inline void PadParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
}

// optional uint32 pad_h = 2 [default = 0];
inline bool PadParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PadParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PadParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PadParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 PadParameter::pad_h() const {
  return pad_h_;
}
inline void PadParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
}

// -------------------------------------------------------------------

// ImageInfo

// optional int32 height = 1 [default = 40];
inline bool ImageInfo::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageInfo::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageInfo::clear_height() {
  height_ = 40;
  clear_has_height();
}
inline ::google::protobuf::int32 ImageInfo::height() const {
  return height_;
}
inline void ImageInfo::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// optional int32 width = 2 [default = 40];
inline bool ImageInfo::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageInfo::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageInfo::clear_width() {
  width_ = 40;
  clear_has_width();
}
inline ::google::protobuf::int32 ImageInfo::width() const {
  return width_;
}
inline void ImageInfo::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional bool is_color = 3 [default = true];
inline bool ImageInfo::has_is_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageInfo::set_has_is_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageInfo::clear_has_is_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageInfo::clear_is_color() {
  is_color_ = true;
  clear_has_is_color();
}
inline bool ImageInfo::is_color() const {
  return is_color_;
}
inline void ImageInfo::set_is_color(bool value) {
  set_has_is_color();
  is_color_ = value;
}

// -------------------------------------------------------------------

// AffineImageParameter

// repeated int32 center_ind = 1;
inline int AffineImageParameter::center_ind_size() const {
  return center_ind_.size();
}
inline void AffineImageParameter::clear_center_ind() {
  center_ind_.Clear();
}
inline ::google::protobuf::int32 AffineImageParameter::center_ind(int index) const {
  return center_ind_.Get(index);
}
inline void AffineImageParameter::set_center_ind(int index, ::google::protobuf::int32 value) {
  center_ind_.Set(index, value);
}
inline void AffineImageParameter::add_center_ind(::google::protobuf::int32 value) {
  center_ind_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AffineImageParameter::center_ind() const {
  return center_ind_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AffineImageParameter::mutable_center_ind() {
  return &center_ind_;
}

// optional .caffe.AffineImage_Norm_Mode norm_mode = 2 [default = RECT_LE_RE_LM_RM];
inline bool AffineImageParameter::has_norm_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AffineImageParameter::set_has_norm_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AffineImageParameter::clear_has_norm_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AffineImageParameter::clear_norm_mode() {
  norm_mode_ = 1;
  clear_has_norm_mode();
}
inline ::caffe::AffineImage_Norm_Mode AffineImageParameter::norm_mode() const {
  return static_cast< ::caffe::AffineImage_Norm_Mode >(norm_mode_);
}
inline void AffineImageParameter::set_norm_mode(::caffe::AffineImage_Norm_Mode value) {
  assert(::caffe::AffineImage_Norm_Mode_IsValid(value));
  set_has_norm_mode();
  norm_mode_ = value;
}

// optional float norm_ratio = 3 [default = 0.5];
inline bool AffineImageParameter::has_norm_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AffineImageParameter::set_has_norm_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AffineImageParameter::clear_has_norm_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AffineImageParameter::clear_norm_ratio() {
  norm_ratio_ = 0.5f;
  clear_has_norm_ratio();
}
inline float AffineImageParameter::norm_ratio() const {
  return norm_ratio_;
}
inline void AffineImageParameter::set_norm_ratio(float value) {
  set_has_norm_ratio();
  norm_ratio_ = value;
}

// optional bool fill_type = 7 [default = true];
inline bool AffineImageParameter::has_fill_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AffineImageParameter::set_has_fill_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AffineImageParameter::clear_has_fill_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AffineImageParameter::clear_fill_type() {
  fill_type_ = true;
  clear_has_fill_type();
}
inline bool AffineImageParameter::fill_type() const {
  return fill_type_;
}
inline void AffineImageParameter::set_fill_type(bool value) {
  set_has_fill_type();
  fill_type_ = value;
}

// optional uint32 value = 8 [default = 0];
inline bool AffineImageParameter::has_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AffineImageParameter::set_has_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AffineImageParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AffineImageParameter::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 AffineImageParameter::value() const {
  return value_;
}
inline void AffineImageParameter::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// optional .caffe.ImageInfo image_info = 9;
inline bool AffineImageParameter::has_image_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AffineImageParameter::set_has_image_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AffineImageParameter::clear_has_image_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AffineImageParameter::clear_image_info() {
  if (image_info_ != NULL) image_info_->::caffe::ImageInfo::Clear();
  clear_has_image_info();
}
inline const ::caffe::ImageInfo& AffineImageParameter::image_info() const {
  return image_info_ != NULL ? *image_info_ : *default_instance_->image_info_;
}
inline ::caffe::ImageInfo* AffineImageParameter::mutable_image_info() {
  set_has_image_info();
  if (image_info_ == NULL) image_info_ = new ::caffe::ImageInfo;
  return image_info_;
}
inline ::caffe::ImageInfo* AffineImageParameter::release_image_info() {
  clear_has_image_info();
  ::caffe::ImageInfo* temp = image_info_;
  image_info_ = NULL;
  return temp;
}
inline void AffineImageParameter::set_allocated_image_info(::caffe::ImageInfo* image_info) {
  delete image_info_;
  image_info_ = image_info;
  if (image_info) {
    set_has_image_info();
  } else {
    clear_has_image_info();
  }
}

// optional string mean_file = 10;
inline bool AffineImageParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AffineImageParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AffineImageParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AffineImageParameter::clear_mean_file() {
  if (mean_file_ != &::google::protobuf::internal::kEmptyString) {
    mean_file_->clear();
  }
  clear_has_mean_file();
}
inline const ::std::string& AffineImageParameter::mean_file() const {
  return *mean_file_;
}
inline void AffineImageParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
}
inline void AffineImageParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
}
inline void AffineImageParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AffineImageParameter::mutable_mean_file() {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  return mean_file_;
}
inline ::std::string* AffineImageParameter::release_mean_file() {
  clear_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mean_file_;
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AffineImageParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file_ != &::google::protobuf::internal::kEmptyString) {
    delete mean_file_;
  }
  if (mean_file) {
    set_has_mean_file();
    mean_file_ = mean_file;
  } else {
    clear_has_mean_file();
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float scale = 11;
inline bool AffineImageParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AffineImageParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AffineImageParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AffineImageParameter::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float AffineImageParameter::scale() const {
  return scale_;
}
inline void AffineImageParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// -------------------------------------------------------------------

// L2NormParameter

// optional float eps = 1 [default = 1e-08];
inline bool L2NormParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void L2NormParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void L2NormParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void L2NormParameter::clear_eps() {
  eps_ = 1e-08f;
  clear_has_eps();
}
inline float L2NormParameter::eps() const {
  return eps_;
}
inline void L2NormParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
}

// -------------------------------------------------------------------

// TripletLossParameter

// optional float margin = 1 [default = 1];
inline bool TripletLossParameter::has_margin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TripletLossParameter::set_has_margin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TripletLossParameter::clear_has_margin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TripletLossParameter::clear_margin() {
  margin_ = 1;
  clear_has_margin();
}
inline float TripletLossParameter::margin() const {
  return margin_;
}
inline void TripletLossParameter::set_margin(float value) {
  set_has_margin();
  margin_ = value;
}

// optional bool norm_diff = 2 [default = false];
inline bool TripletLossParameter::has_norm_diff() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TripletLossParameter::set_has_norm_diff() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TripletLossParameter::clear_has_norm_diff() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TripletLossParameter::clear_norm_diff() {
  norm_diff_ = false;
  clear_has_norm_diff();
}
inline bool TripletLossParameter::norm_diff() const {
  return norm_diff_;
}
inline void TripletLossParameter::set_norm_diff(bool value) {
  set_has_norm_diff();
  norm_diff_ = value;
}

// optional bool sequencial_bottom = 3 [default = true];
inline bool TripletLossParameter::has_sequencial_bottom() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TripletLossParameter::set_has_sequencial_bottom() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TripletLossParameter::clear_has_sequencial_bottom() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TripletLossParameter::clear_sequencial_bottom() {
  sequencial_bottom_ = true;
  clear_has_sequencial_bottom();
}
inline bool TripletLossParameter::sequencial_bottom() const {
  return sequencial_bottom_;
}
inline void TripletLossParameter::set_sequencial_bottom(bool value) {
  set_has_sequencial_bottom();
  sequencial_bottom_ = value;
}

// optional bool use_cpu = 4 [default = false];
inline bool TripletLossParameter::has_use_cpu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TripletLossParameter::set_has_use_cpu() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TripletLossParameter::clear_has_use_cpu() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TripletLossParameter::clear_use_cpu() {
  use_cpu_ = false;
  clear_has_use_cpu();
}
inline bool TripletLossParameter::use_cpu() const {
  return use_cpu_;
}
inline void TripletLossParameter::set_use_cpu(bool value) {
  set_has_use_cpu();
  use_cpu_ = value;
}

// optional int32 step = 5 [default = 3];
inline bool TripletLossParameter::has_step() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TripletLossParameter::set_has_step() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TripletLossParameter::clear_has_step() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TripletLossParameter::clear_step() {
  step_ = 3;
  clear_has_step();
}
inline ::google::protobuf::int32 TripletLossParameter::step() const {
  return step_;
}
inline void TripletLossParameter::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
}

// optional bool print_time = 6 [default = false];
inline bool TripletLossParameter::has_print_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TripletLossParameter::set_has_print_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TripletLossParameter::clear_has_print_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TripletLossParameter::clear_print_time() {
  print_time_ = false;
  clear_has_print_time();
}
inline bool TripletLossParameter::print_time() const {
  return print_time_;
}
inline void TripletLossParameter::set_print_time(bool value) {
  set_has_print_time();
  print_time_ = value;
}

// optional float ignore_hardest_ratio = 7 [default = -1];
inline bool TripletLossParameter::has_ignore_hardest_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TripletLossParameter::set_has_ignore_hardest_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TripletLossParameter::clear_has_ignore_hardest_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TripletLossParameter::clear_ignore_hardest_ratio() {
  ignore_hardest_ratio_ = -1;
  clear_has_ignore_hardest_ratio();
}
inline float TripletLossParameter::ignore_hardest_ratio() const {
  return ignore_hardest_ratio_;
}
inline void TripletLossParameter::set_ignore_hardest_ratio(float value) {
  set_has_ignore_hardest_ratio();
  ignore_hardest_ratio_ = value;
}

// optional float use_hard_sample = 8 [default = -1];
inline bool TripletLossParameter::has_use_hard_sample() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TripletLossParameter::set_has_use_hard_sample() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TripletLossParameter::clear_has_use_hard_sample() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TripletLossParameter::clear_use_hard_sample() {
  use_hard_sample_ = -1;
  clear_has_use_hard_sample();
}
inline float TripletLossParameter::use_hard_sample() const {
  return use_hard_sample_;
}
inline void TripletLossParameter::set_use_hard_sample(float value) {
  set_has_use_hard_sample();
  use_hard_sample_ = value;
}

// optional int32 active_ignorehardest_len = 9 [default = 4];
inline bool TripletLossParameter::has_active_ignorehardest_len() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TripletLossParameter::set_has_active_ignorehardest_len() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TripletLossParameter::clear_has_active_ignorehardest_len() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TripletLossParameter::clear_active_ignorehardest_len() {
  active_ignorehardest_len_ = 4;
  clear_has_active_ignorehardest_len();
}
inline ::google::protobuf::int32 TripletLossParameter::active_ignorehardest_len() const {
  return active_ignorehardest_len_;
}
inline void TripletLossParameter::set_active_ignorehardest_len(::google::protobuf::int32 value) {
  set_has_active_ignorehardest_len();
  active_ignorehardest_len_ = value;
}

// -------------------------------------------------------------------

// PairImageDataParameter

// optional string source = 1;
inline bool PairImageDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PairImageDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PairImageDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PairImageDataParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& PairImageDataParameter::source() const {
  return *source_;
}
inline void PairImageDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void PairImageDataParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void PairImageDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PairImageDataParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* PairImageDataParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PairImageDataParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool use_disturb = 14 [default = false];
inline bool PairImageDataParameter::has_use_disturb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PairImageDataParameter::set_has_use_disturb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PairImageDataParameter::clear_has_use_disturb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PairImageDataParameter::clear_use_disturb() {
  use_disturb_ = false;
  clear_has_use_disturb();
}
inline bool PairImageDataParameter::use_disturb() const {
  return use_disturb_;
}
inline void PairImageDataParameter::set_use_disturb(bool value) {
  set_has_use_disturb();
  use_disturb_ = value;
}

// optional bool useflip = 15 [default = false];
inline bool PairImageDataParameter::has_useflip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PairImageDataParameter::set_has_useflip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PairImageDataParameter::clear_has_useflip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PairImageDataParameter::clear_useflip() {
  useflip_ = false;
  clear_has_useflip();
}
inline bool PairImageDataParameter::useflip() const {
  return useflip_;
}
inline void PairImageDataParameter::set_useflip(bool value) {
  set_has_useflip();
  useflip_ = value;
}

// optional uint32 batch_size = 4;
inline bool PairImageDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PairImageDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PairImageDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PairImageDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 PairImageDataParameter::batch_size() const {
  return batch_size_;
}
inline void PairImageDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool PairImageDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PairImageDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PairImageDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PairImageDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 PairImageDataParameter::rand_skip() const {
  return rand_skip_;
}
inline void PairImageDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
}

// optional bool shuffle = 8 [default = false];
inline bool PairImageDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PairImageDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PairImageDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PairImageDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool PairImageDataParameter::shuffle() const {
  return shuffle_;
}
inline void PairImageDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
}

// optional uint32 crop_size = 5 [default = 0];
inline bool PairImageDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PairImageDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PairImageDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PairImageDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 PairImageDataParameter::crop_size() const {
  return crop_size_;
}
inline void PairImageDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
}

// optional bool mirror = 6 [default = false];
inline bool PairImageDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PairImageDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PairImageDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PairImageDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool PairImageDataParameter::mirror() const {
  return mirror_;
}
inline void PairImageDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
}

// repeated uint32 resize_type = 2;
inline int PairImageDataParameter::resize_type_size() const {
  return resize_type_.size();
}
inline void PairImageDataParameter::clear_resize_type() {
  resize_type_.Clear();
}
inline ::google::protobuf::uint32 PairImageDataParameter::resize_type(int index) const {
  return resize_type_.Get(index);
}
inline void PairImageDataParameter::set_resize_type(int index, ::google::protobuf::uint32 value) {
  resize_type_.Set(index, value);
}
inline void PairImageDataParameter::add_resize_type(::google::protobuf::uint32 value) {
  resize_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PairImageDataParameter::resize_type() const {
  return resize_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PairImageDataParameter::mutable_resize_type() {
  return &resize_type_;
}

// repeated uint32 data_height = 9;
inline int PairImageDataParameter::data_height_size() const {
  return data_height_.size();
}
inline void PairImageDataParameter::clear_data_height() {
  data_height_.Clear();
}
inline ::google::protobuf::uint32 PairImageDataParameter::data_height(int index) const {
  return data_height_.Get(index);
}
inline void PairImageDataParameter::set_data_height(int index, ::google::protobuf::uint32 value) {
  data_height_.Set(index, value);
}
inline void PairImageDataParameter::add_data_height(::google::protobuf::uint32 value) {
  data_height_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PairImageDataParameter::data_height() const {
  return data_height_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PairImageDataParameter::mutable_data_height() {
  return &data_height_;
}

// repeated uint32 data_width = 10;
inline int PairImageDataParameter::data_width_size() const {
  return data_width_.size();
}
inline void PairImageDataParameter::clear_data_width() {
  data_width_.Clear();
}
inline ::google::protobuf::uint32 PairImageDataParameter::data_width(int index) const {
  return data_width_.Get(index);
}
inline void PairImageDataParameter::set_data_width(int index, ::google::protobuf::uint32 value) {
  data_width_.Set(index, value);
}
inline void PairImageDataParameter::add_data_width(::google::protobuf::uint32 value) {
  data_width_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PairImageDataParameter::data_width() const {
  return data_width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PairImageDataParameter::mutable_data_width() {
  return &data_width_;
}

// repeated uint32 data_channels = 17;
inline int PairImageDataParameter::data_channels_size() const {
  return data_channels_.size();
}
inline void PairImageDataParameter::clear_data_channels() {
  data_channels_.Clear();
}
inline ::google::protobuf::uint32 PairImageDataParameter::data_channels(int index) const {
  return data_channels_.Get(index);
}
inline void PairImageDataParameter::set_data_channels(int index, ::google::protobuf::uint32 value) {
  data_channels_.Set(index, value);
}
inline void PairImageDataParameter::add_data_channels(::google::protobuf::uint32 value) {
  data_channels_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PairImageDataParameter::data_channels() const {
  return data_channels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PairImageDataParameter::mutable_data_channels() {
  return &data_channels_;
}

// repeated float data_scale = 22;
inline int PairImageDataParameter::data_scale_size() const {
  return data_scale_.size();
}
inline void PairImageDataParameter::clear_data_scale() {
  data_scale_.Clear();
}
inline float PairImageDataParameter::data_scale(int index) const {
  return data_scale_.Get(index);
}
inline void PairImageDataParameter::set_data_scale(int index, float value) {
  data_scale_.Set(index, value);
}
inline void PairImageDataParameter::add_data_scale(float value) {
  data_scale_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
PairImageDataParameter::data_scale() const {
  return data_scale_;
}
inline ::google::protobuf::RepeatedField< float >*
PairImageDataParameter::mutable_data_scale() {
  return &data_scale_;
}

// repeated string mean_file = 3;
inline int PairImageDataParameter::mean_file_size() const {
  return mean_file_.size();
}
inline void PairImageDataParameter::clear_mean_file() {
  mean_file_.Clear();
}
inline const ::std::string& PairImageDataParameter::mean_file(int index) const {
  return mean_file_.Get(index);
}
inline ::std::string* PairImageDataParameter::mutable_mean_file(int index) {
  return mean_file_.Mutable(index);
}
inline void PairImageDataParameter::set_mean_file(int index, const ::std::string& value) {
  mean_file_.Mutable(index)->assign(value);
}
inline void PairImageDataParameter::set_mean_file(int index, const char* value) {
  mean_file_.Mutable(index)->assign(value);
}
inline void PairImageDataParameter::set_mean_file(int index, const char* value, size_t size) {
  mean_file_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PairImageDataParameter::add_mean_file() {
  return mean_file_.Add();
}
inline void PairImageDataParameter::add_mean_file(const ::std::string& value) {
  mean_file_.Add()->assign(value);
}
inline void PairImageDataParameter::add_mean_file(const char* value) {
  mean_file_.Add()->assign(value);
}
inline void PairImageDataParameter::add_mean_file(const char* value, size_t size) {
  mean_file_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PairImageDataParameter::mean_file() const {
  return mean_file_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PairImageDataParameter::mutable_mean_file() {
  return &mean_file_;
}

// optional float rand_angle = 18 [default = 0];
inline bool PairImageDataParameter::has_rand_angle() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PairImageDataParameter::set_has_rand_angle() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PairImageDataParameter::clear_has_rand_angle() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PairImageDataParameter::clear_rand_angle() {
  rand_angle_ = 0;
  clear_has_rand_angle();
}
inline float PairImageDataParameter::rand_angle() const {
  return rand_angle_;
}
inline void PairImageDataParameter::set_rand_angle(float value) {
  set_has_rand_angle();
  rand_angle_ = value;
}

// optional float rand_scale = 19 [default = 0];
inline bool PairImageDataParameter::has_rand_scale() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PairImageDataParameter::set_has_rand_scale() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PairImageDataParameter::clear_has_rand_scale() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PairImageDataParameter::clear_rand_scale() {
  rand_scale_ = 0;
  clear_has_rand_scale();
}
inline float PairImageDataParameter::rand_scale() const {
  return rand_scale_;
}
inline void PairImageDataParameter::set_rand_scale(float value) {
  set_has_rand_scale();
  rand_scale_ = value;
}

// optional float rand_movex = 20 [default = 0];
inline bool PairImageDataParameter::has_rand_movex() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PairImageDataParameter::set_has_rand_movex() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PairImageDataParameter::clear_has_rand_movex() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PairImageDataParameter::clear_rand_movex() {
  rand_movex_ = 0;
  clear_has_rand_movex();
}
inline float PairImageDataParameter::rand_movex() const {
  return rand_movex_;
}
inline void PairImageDataParameter::set_rand_movex(float value) {
  set_has_rand_movex();
  rand_movex_ = value;
}

// optional float rand_movey = 21 [default = 0];
inline bool PairImageDataParameter::has_rand_movey() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PairImageDataParameter::set_has_rand_movey() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PairImageDataParameter::clear_has_rand_movey() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PairImageDataParameter::clear_rand_movey() {
  rand_movey_ = 0;
  clear_has_rand_movey();
}
inline float PairImageDataParameter::rand_movey() const {
  return rand_movey_;
}
inline void PairImageDataParameter::set_rand_movey(float value) {
  set_has_rand_movey();
  rand_movey_ = value;
}

// optional uint32 select_num_per_instance = 23 [default = 0];
inline bool PairImageDataParameter::has_select_num_per_instance() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PairImageDataParameter::set_has_select_num_per_instance() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PairImageDataParameter::clear_has_select_num_per_instance() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PairImageDataParameter::clear_select_num_per_instance() {
  select_num_per_instance_ = 0u;
  clear_has_select_num_per_instance();
}
inline ::google::protobuf::uint32 PairImageDataParameter::select_num_per_instance() const {
  return select_num_per_instance_;
}
inline void PairImageDataParameter::set_select_num_per_instance(::google::protobuf::uint32 value) {
  set_has_select_num_per_instance();
  select_num_per_instance_ = value;
}

// optional uint32 select_oneinstance_num = 26 [default = 0];
inline bool PairImageDataParameter::has_select_oneinstance_num() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PairImageDataParameter::set_has_select_oneinstance_num() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PairImageDataParameter::clear_has_select_oneinstance_num() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PairImageDataParameter::clear_select_oneinstance_num() {
  select_oneinstance_num_ = 0u;
  clear_has_select_oneinstance_num();
}
inline ::google::protobuf::uint32 PairImageDataParameter::select_oneinstance_num() const {
  return select_oneinstance_num_;
}
inline void PairImageDataParameter::set_select_oneinstance_num(::google::protobuf::uint32 value) {
  set_has_select_oneinstance_num();
  select_oneinstance_num_ = value;
}

// optional .caffe.PairImageDataParameter.DataType datatype = 24 [default = SINGLEPATCH];
inline bool PairImageDataParameter::has_datatype() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PairImageDataParameter::set_has_datatype() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PairImageDataParameter::clear_has_datatype() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PairImageDataParameter::clear_datatype() {
  datatype_ = 0;
  clear_has_datatype();
}
inline ::caffe::PairImageDataParameter_DataType PairImageDataParameter::datatype() const {
  return static_cast< ::caffe::PairImageDataParameter_DataType >(datatype_);
}
inline void PairImageDataParameter::set_datatype(::caffe::PairImageDataParameter_DataType value) {
  assert(::caffe::PairImageDataParameter_DataType_IsValid(value));
  set_has_datatype();
  datatype_ = value;
}

// optional uint32 lmk_num = 25 [default = 0];
inline bool PairImageDataParameter::has_lmk_num() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PairImageDataParameter::set_has_lmk_num() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PairImageDataParameter::clear_has_lmk_num() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PairImageDataParameter::clear_lmk_num() {
  lmk_num_ = 0u;
  clear_has_lmk_num();
}
inline ::google::protobuf::uint32 PairImageDataParameter::lmk_num() const {
  return lmk_num_;
}
inline void PairImageDataParameter::set_lmk_num(::google::protobuf::uint32 value) {
  set_has_lmk_num();
  lmk_num_ = value;
}

// -------------------------------------------------------------------

// DenseCRFParameter

// optional int32 max_iter = 1 [default = 10];
inline bool DenseCRFParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DenseCRFParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DenseCRFParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DenseCRFParameter::clear_max_iter() {
  max_iter_ = 10;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 DenseCRFParameter::max_iter() const {
  return max_iter_;
}
inline void DenseCRFParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
}

// repeated float pos_xy_std = 2;
inline int DenseCRFParameter::pos_xy_std_size() const {
  return pos_xy_std_.size();
}
inline void DenseCRFParameter::clear_pos_xy_std() {
  pos_xy_std_.Clear();
}
inline float DenseCRFParameter::pos_xy_std(int index) const {
  return pos_xy_std_.Get(index);
}
inline void DenseCRFParameter::set_pos_xy_std(int index, float value) {
  pos_xy_std_.Set(index, value);
}
inline void DenseCRFParameter::add_pos_xy_std(float value) {
  pos_xy_std_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
DenseCRFParameter::pos_xy_std() const {
  return pos_xy_std_;
}
inline ::google::protobuf::RepeatedField< float >*
DenseCRFParameter::mutable_pos_xy_std() {
  return &pos_xy_std_;
}

// repeated float pos_w = 3;
inline int DenseCRFParameter::pos_w_size() const {
  return pos_w_.size();
}
inline void DenseCRFParameter::clear_pos_w() {
  pos_w_.Clear();
}
inline float DenseCRFParameter::pos_w(int index) const {
  return pos_w_.Get(index);
}
inline void DenseCRFParameter::set_pos_w(int index, float value) {
  pos_w_.Set(index, value);
}
inline void DenseCRFParameter::add_pos_w(float value) {
  pos_w_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
DenseCRFParameter::pos_w() const {
  return pos_w_;
}
inline ::google::protobuf::RepeatedField< float >*
DenseCRFParameter::mutable_pos_w() {
  return &pos_w_;
}

// repeated float bi_xy_std = 4;
inline int DenseCRFParameter::bi_xy_std_size() const {
  return bi_xy_std_.size();
}
inline void DenseCRFParameter::clear_bi_xy_std() {
  bi_xy_std_.Clear();
}
inline float DenseCRFParameter::bi_xy_std(int index) const {
  return bi_xy_std_.Get(index);
}
inline void DenseCRFParameter::set_bi_xy_std(int index, float value) {
  bi_xy_std_.Set(index, value);
}
inline void DenseCRFParameter::add_bi_xy_std(float value) {
  bi_xy_std_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
DenseCRFParameter::bi_xy_std() const {
  return bi_xy_std_;
}
inline ::google::protobuf::RepeatedField< float >*
DenseCRFParameter::mutable_bi_xy_std() {
  return &bi_xy_std_;
}

// repeated float bi_rgb_std = 5;
inline int DenseCRFParameter::bi_rgb_std_size() const {
  return bi_rgb_std_.size();
}
inline void DenseCRFParameter::clear_bi_rgb_std() {
  bi_rgb_std_.Clear();
}
inline float DenseCRFParameter::bi_rgb_std(int index) const {
  return bi_rgb_std_.Get(index);
}
inline void DenseCRFParameter::set_bi_rgb_std(int index, float value) {
  bi_rgb_std_.Set(index, value);
}
inline void DenseCRFParameter::add_bi_rgb_std(float value) {
  bi_rgb_std_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
DenseCRFParameter::bi_rgb_std() const {
  return bi_rgb_std_;
}
inline ::google::protobuf::RepeatedField< float >*
DenseCRFParameter::mutable_bi_rgb_std() {
  return &bi_rgb_std_;
}

// repeated float bi_w = 6;
inline int DenseCRFParameter::bi_w_size() const {
  return bi_w_.size();
}
inline void DenseCRFParameter::clear_bi_w() {
  bi_w_.Clear();
}
inline float DenseCRFParameter::bi_w(int index) const {
  return bi_w_.Get(index);
}
inline void DenseCRFParameter::set_bi_w(int index, float value) {
  bi_w_.Set(index, value);
}
inline void DenseCRFParameter::add_bi_w(float value) {
  bi_w_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
DenseCRFParameter::bi_w() const {
  return bi_w_;
}
inline ::google::protobuf::RepeatedField< float >*
DenseCRFParameter::mutable_bi_w() {
  return &bi_w_;
}

// optional bool output_probability = 7 [default = true];
inline bool DenseCRFParameter::has_output_probability() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DenseCRFParameter::set_has_output_probability() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DenseCRFParameter::clear_has_output_probability() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DenseCRFParameter::clear_output_probability() {
  output_probability_ = true;
  clear_has_output_probability();
}
inline bool DenseCRFParameter::output_probability() const {
  return output_probability_;
}
inline void DenseCRFParameter::set_output_probability(bool value) {
  set_has_output_probability();
  output_probability_ = value;
}

// -------------------------------------------------------------------

// GateRecurrentParameter

// optional uint32 num_output = 1;
inline bool GateRecurrentParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateRecurrentParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateRecurrentParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateRecurrentParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 GateRecurrentParameter::num_output() const {
  return num_output_;
}
inline void GateRecurrentParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
}

// optional bool use_bias = 2 [default = true];
inline bool GateRecurrentParameter::has_use_bias() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GateRecurrentParameter::set_has_use_bias() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GateRecurrentParameter::clear_has_use_bias() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GateRecurrentParameter::clear_use_bias() {
  use_bias_ = true;
  clear_has_use_bias();
}
inline bool GateRecurrentParameter::use_bias() const {
  return use_bias_;
}
inline void GateRecurrentParameter::set_use_bias(bool value) {
  set_has_use_bias();
  use_bias_ = value;
}

// optional bool use_wx = 3 [default = true];
inline bool GateRecurrentParameter::has_use_wx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GateRecurrentParameter::set_has_use_wx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GateRecurrentParameter::clear_has_use_wx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GateRecurrentParameter::clear_use_wx() {
  use_wx_ = true;
  clear_has_use_wx();
}
inline bool GateRecurrentParameter::use_wx() const {
  return use_wx_;
}
inline void GateRecurrentParameter::set_use_wx(bool value) {
  set_has_use_wx();
  use_wx_ = value;
}

// optional bool use_wh = 4 [default = true];
inline bool GateRecurrentParameter::has_use_wh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GateRecurrentParameter::set_has_use_wh() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GateRecurrentParameter::clear_has_use_wh() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GateRecurrentParameter::clear_use_wh() {
  use_wh_ = true;
  clear_has_use_wh();
}
inline bool GateRecurrentParameter::use_wh() const {
  return use_wh_;
}
inline void GateRecurrentParameter::set_use_wh(bool value) {
  set_has_use_wh();
  use_wh_ = value;
}

// optional .caffe.FillerParameter weight_filler = 7;
inline bool GateRecurrentParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GateRecurrentParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GateRecurrentParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GateRecurrentParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& GateRecurrentParameter::weight_filler() const {
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* GateRecurrentParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::caffe::FillerParameter;
  return weight_filler_;
}
inline ::caffe::FillerParameter* GateRecurrentParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void GateRecurrentParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
}

// optional .caffe.FillerParameter bias_filler = 8;
inline bool GateRecurrentParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GateRecurrentParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GateRecurrentParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GateRecurrentParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& GateRecurrentParameter::bias_filler() const {
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* GateRecurrentParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::caffe::FillerParameter;
  return bias_filler_;
}
inline ::caffe::FillerParameter* GateRecurrentParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void GateRecurrentParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
}

// optional bool horizontal = 16 [default = true];
inline bool GateRecurrentParameter::has_horizontal() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GateRecurrentParameter::set_has_horizontal() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GateRecurrentParameter::clear_has_horizontal() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GateRecurrentParameter::clear_horizontal() {
  horizontal_ = true;
  clear_has_horizontal();
}
inline bool GateRecurrentParameter::horizontal() const {
  return horizontal_;
}
inline void GateRecurrentParameter::set_horizontal(bool value) {
  set_has_horizontal();
  horizontal_ = value;
}

// optional bool reverse = 17 [default = false];
inline bool GateRecurrentParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GateRecurrentParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GateRecurrentParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GateRecurrentParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
inline bool GateRecurrentParameter::reverse() const {
  return reverse_;
}
inline void GateRecurrentParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
}

// optional .caffe.GateRecurrentParameter.Active active = 18 [default = LINEAR];
inline bool GateRecurrentParameter::has_active() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GateRecurrentParameter::set_has_active() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GateRecurrentParameter::clear_has_active() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GateRecurrentParameter::clear_active() {
  active_ = 0;
  clear_has_active();
}
inline ::caffe::GateRecurrentParameter_Active GateRecurrentParameter::active() const {
  return static_cast< ::caffe::GateRecurrentParameter_Active >(active_);
}
inline void GateRecurrentParameter::set_active(::caffe::GateRecurrentParameter_Active value) {
  assert(::caffe::GateRecurrentParameter_Active_IsValid(value));
  set_has_active();
  active_ = value;
}

// optional float bound_diff = 19 [default = -1];
inline bool GateRecurrentParameter::has_bound_diff() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GateRecurrentParameter::set_has_bound_diff() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GateRecurrentParameter::clear_has_bound_diff() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GateRecurrentParameter::clear_bound_diff() {
  bound_diff_ = -1;
  clear_has_bound_diff();
}
inline float GateRecurrentParameter::bound_diff() const {
  return bound_diff_;
}
inline void GateRecurrentParameter::set_bound_diff(float value) {
  set_has_bound_diff();
  bound_diff_ = value;
}

// optional float restrict_w = 20 [default = -1];
inline bool GateRecurrentParameter::has_restrict_w() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GateRecurrentParameter::set_has_restrict_w() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GateRecurrentParameter::clear_has_restrict_w() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GateRecurrentParameter::clear_restrict_w() {
  restrict_w_ = -1;
  clear_has_restrict_w();
}
inline float GateRecurrentParameter::restrict_w() const {
  return restrict_w_;
}
inline void GateRecurrentParameter::set_restrict_w(float value) {
  set_has_restrict_w();
  restrict_w_ = value;
}

// optional float restrict_g = 21 [default = 1];
inline bool GateRecurrentParameter::has_restrict_g() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GateRecurrentParameter::set_has_restrict_g() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GateRecurrentParameter::clear_has_restrict_g() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GateRecurrentParameter::clear_restrict_g() {
  restrict_g_ = 1;
  clear_has_restrict_g();
}
inline float GateRecurrentParameter::restrict_g() const {
  return restrict_g_;
}
inline void GateRecurrentParameter::set_restrict_g(float value) {
  set_has_restrict_g();
  restrict_g_ = value;
}

// optional bool use_x_gate = 22 [default = true];
inline bool GateRecurrentParameter::has_use_x_gate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GateRecurrentParameter::set_has_use_x_gate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GateRecurrentParameter::clear_has_use_x_gate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GateRecurrentParameter::clear_use_x_gate() {
  use_x_gate_ = true;
  clear_has_use_x_gate();
}
inline bool GateRecurrentParameter::use_x_gate() const {
  return use_x_gate_;
}
inline void GateRecurrentParameter::set_use_x_gate(bool value) {
  set_has_use_x_gate();
  use_x_gate_ = value;
}

// optional bool use_new_fix = 23 [default = true];
inline bool GateRecurrentParameter::has_use_new_fix() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GateRecurrentParameter::set_has_use_new_fix() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GateRecurrentParameter::clear_has_use_new_fix() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GateRecurrentParameter::clear_use_new_fix() {
  use_new_fix_ = true;
  clear_has_use_new_fix();
}
inline bool GateRecurrentParameter::use_new_fix() const {
  return use_new_fix_;
}
inline void GateRecurrentParameter::set_use_new_fix(bool value) {
  set_has_use_new_fix();
  use_new_fix_ = value;
}

// optional bool slash = 24 [default = false];
inline bool GateRecurrentParameter::has_slash() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GateRecurrentParameter::set_has_slash() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GateRecurrentParameter::clear_has_slash() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GateRecurrentParameter::clear_slash() {
  slash_ = false;
  clear_has_slash();
}
inline bool GateRecurrentParameter::slash() const {
  return slash_;
}
inline void GateRecurrentParameter::set_slash(bool value) {
  set_has_slash();
  slash_ = value;
}

// -------------------------------------------------------------------

// GateLstmParameter

// optional uint32 num_output = 1;
inline bool GateLstmParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateLstmParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateLstmParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateLstmParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 GateLstmParameter::num_output() const {
  return num_output_;
}
inline void GateLstmParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
}

// optional bool bias_term = 2 [default = true];
inline bool GateLstmParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GateLstmParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GateLstmParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GateLstmParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool GateLstmParameter::bias_term() const {
  return bias_term_;
}
inline void GateLstmParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
}

// optional .caffe.FillerParameter weight_filler = 3;
inline bool GateLstmParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GateLstmParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GateLstmParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GateLstmParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& GateLstmParameter::weight_filler() const {
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* GateLstmParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::caffe::FillerParameter;
  return weight_filler_;
}
inline ::caffe::FillerParameter* GateLstmParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void GateLstmParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
}

// optional .caffe.FillerParameter bias_filler = 4;
inline bool GateLstmParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GateLstmParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GateLstmParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GateLstmParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& GateLstmParameter::bias_filler() const {
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* GateLstmParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::caffe::FillerParameter;
  return bias_filler_;
}
inline ::caffe::FillerParameter* GateLstmParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void GateLstmParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
}

// optional bool horizontal = 5 [default = true];
inline bool GateLstmParameter::has_horizontal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GateLstmParameter::set_has_horizontal() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GateLstmParameter::clear_has_horizontal() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GateLstmParameter::clear_horizontal() {
  horizontal_ = true;
  clear_has_horizontal();
}
inline bool GateLstmParameter::horizontal() const {
  return horizontal_;
}
inline void GateLstmParameter::set_horizontal(bool value) {
  set_has_horizontal();
  horizontal_ = value;
}

// optional bool reverse = 6 [default = false];
inline bool GateLstmParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GateLstmParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GateLstmParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GateLstmParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
inline bool GateLstmParameter::reverse() const {
  return reverse_;
}
inline void GateLstmParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
}

// optional float restrict_w = 7 [default = -1];
inline bool GateLstmParameter::has_restrict_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GateLstmParameter::set_has_restrict_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GateLstmParameter::clear_has_restrict_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GateLstmParameter::clear_restrict_w() {
  restrict_w_ = -1;
  clear_has_restrict_w();
}
inline float GateLstmParameter::restrict_w() const {
  return restrict_w_;
}
inline void GateLstmParameter::set_restrict_w(float value) {
  set_has_restrict_w();
  restrict_w_ = value;
}

// optional bool printall_datadiff = 8 [default = false];
inline bool GateLstmParameter::has_printall_datadiff() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GateLstmParameter::set_has_printall_datadiff() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GateLstmParameter::clear_has_printall_datadiff() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GateLstmParameter::clear_printall_datadiff() {
  printall_datadiff_ = false;
  clear_has_printall_datadiff();
}
inline bool GateLstmParameter::printall_datadiff() const {
  return printall_datadiff_;
}
inline void GateLstmParameter::set_printall_datadiff(bool value) {
  set_has_printall_datadiff();
  printall_datadiff_ = value;
}

// -------------------------------------------------------------------

// HardSampleParameter

// optional float pos_use_ratio = 1 [default = 0.5];
inline bool HardSampleParameter::has_pos_use_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HardSampleParameter::set_has_pos_use_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HardSampleParameter::clear_has_pos_use_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HardSampleParameter::clear_pos_use_ratio() {
  pos_use_ratio_ = 0.5f;
  clear_has_pos_use_ratio();
}
inline float HardSampleParameter::pos_use_ratio() const {
  return pos_use_ratio_;
}
inline void HardSampleParameter::set_pos_use_ratio(float value) {
  set_has_pos_use_ratio();
  pos_use_ratio_ = value;
}

// optional float neg_use_ratio = 8 [default = 0.5];
inline bool HardSampleParameter::has_neg_use_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HardSampleParameter::set_has_neg_use_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HardSampleParameter::clear_has_neg_use_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HardSampleParameter::clear_neg_use_ratio() {
  neg_use_ratio_ = 0.5f;
  clear_has_neg_use_ratio();
}
inline float HardSampleParameter::neg_use_ratio() const {
  return neg_use_ratio_;
}
inline void HardSampleParameter::set_neg_use_ratio(float value) {
  set_has_neg_use_ratio();
  neg_use_ratio_ = value;
}

// optional float pos_hard_ratio = 11 [default = 0.5];
inline bool HardSampleParameter::has_pos_hard_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HardSampleParameter::set_has_pos_hard_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HardSampleParameter::clear_has_pos_hard_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HardSampleParameter::clear_pos_hard_ratio() {
  pos_hard_ratio_ = 0.5f;
  clear_has_pos_hard_ratio();
}
inline float HardSampleParameter::pos_hard_ratio() const {
  return pos_hard_ratio_;
}
inline void HardSampleParameter::set_pos_hard_ratio(float value) {
  set_has_pos_hard_ratio();
  pos_hard_ratio_ = value;
}

// optional float neg_hard_ratio = 12 [default = 0.5];
inline bool HardSampleParameter::has_neg_hard_ratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HardSampleParameter::set_has_neg_hard_ratio() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HardSampleParameter::clear_has_neg_hard_ratio() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HardSampleParameter::clear_neg_hard_ratio() {
  neg_hard_ratio_ = 0.5f;
  clear_has_neg_hard_ratio();
}
inline float HardSampleParameter::neg_hard_ratio() const {
  return neg_hard_ratio_;
}
inline void HardSampleParameter::set_neg_hard_ratio(float value) {
  set_has_neg_hard_ratio();
  neg_hard_ratio_ = value;
}

// optional float neg_compare_pos_ratio = 2 [default = -1];
inline bool HardSampleParameter::has_neg_compare_pos_ratio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HardSampleParameter::set_has_neg_compare_pos_ratio() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HardSampleParameter::clear_has_neg_compare_pos_ratio() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HardSampleParameter::clear_neg_compare_pos_ratio() {
  neg_compare_pos_ratio_ = -1;
  clear_has_neg_compare_pos_ratio();
}
inline float HardSampleParameter::neg_compare_pos_ratio() const {
  return neg_compare_pos_ratio_;
}
inline void HardSampleParameter::set_neg_compare_pos_ratio(float value) {
  set_has_neg_compare_pos_ratio();
  neg_compare_pos_ratio_ = value;
}

// optional float pos_ignore_hardest_ratio = 3 [default = 0];
inline bool HardSampleParameter::has_pos_ignore_hardest_ratio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HardSampleParameter::set_has_pos_ignore_hardest_ratio() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HardSampleParameter::clear_has_pos_ignore_hardest_ratio() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HardSampleParameter::clear_pos_ignore_hardest_ratio() {
  pos_ignore_hardest_ratio_ = 0;
  clear_has_pos_ignore_hardest_ratio();
}
inline float HardSampleParameter::pos_ignore_hardest_ratio() const {
  return pos_ignore_hardest_ratio_;
}
inline void HardSampleParameter::set_pos_ignore_hardest_ratio(float value) {
  set_has_pos_ignore_hardest_ratio();
  pos_ignore_hardest_ratio_ = value;
}

// optional float neg_ignore_hardest_ratio = 4 [default = 0];
inline bool HardSampleParameter::has_neg_ignore_hardest_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HardSampleParameter::set_has_neg_ignore_hardest_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HardSampleParameter::clear_has_neg_ignore_hardest_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HardSampleParameter::clear_neg_ignore_hardest_ratio() {
  neg_ignore_hardest_ratio_ = 0;
  clear_has_neg_ignore_hardest_ratio();
}
inline float HardSampleParameter::neg_ignore_hardest_ratio() const {
  return neg_ignore_hardest_ratio_;
}
inline void HardSampleParameter::set_neg_ignore_hardest_ratio(float value) {
  set_has_neg_ignore_hardest_ratio();
  neg_ignore_hardest_ratio_ = value;
}

// optional uint32 max_ignore_pos_hardest_num = 13 [default = 0];
inline bool HardSampleParameter::has_max_ignore_pos_hardest_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HardSampleParameter::set_has_max_ignore_pos_hardest_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HardSampleParameter::clear_has_max_ignore_pos_hardest_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HardSampleParameter::clear_max_ignore_pos_hardest_num() {
  max_ignore_pos_hardest_num_ = 0u;
  clear_has_max_ignore_pos_hardest_num();
}
inline ::google::protobuf::uint32 HardSampleParameter::max_ignore_pos_hardest_num() const {
  return max_ignore_pos_hardest_num_;
}
inline void HardSampleParameter::set_max_ignore_pos_hardest_num(::google::protobuf::uint32 value) {
  set_has_max_ignore_pos_hardest_num();
  max_ignore_pos_hardest_num_ = value;
}

// optional uint32 max_ignore_neg_hardest_num = 14 [default = 0];
inline bool HardSampleParameter::has_max_ignore_neg_hardest_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HardSampleParameter::set_has_max_ignore_neg_hardest_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HardSampleParameter::clear_has_max_ignore_neg_hardest_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HardSampleParameter::clear_max_ignore_neg_hardest_num() {
  max_ignore_neg_hardest_num_ = 0u;
  clear_has_max_ignore_neg_hardest_num();
}
inline ::google::protobuf::uint32 HardSampleParameter::max_ignore_neg_hardest_num() const {
  return max_ignore_neg_hardest_num_;
}
inline void HardSampleParameter::set_max_ignore_neg_hardest_num(::google::protobuf::uint32 value) {
  set_has_max_ignore_neg_hardest_num();
  max_ignore_neg_hardest_num_ = value;
}

// optional uint32 neg_margin = 5 [default = 0];
inline bool HardSampleParameter::has_neg_margin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HardSampleParameter::set_has_neg_margin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HardSampleParameter::clear_has_neg_margin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HardSampleParameter::clear_neg_margin() {
  neg_margin_ = 0u;
  clear_has_neg_margin();
}
inline ::google::protobuf::uint32 HardSampleParameter::neg_margin() const {
  return neg_margin_;
}
inline void HardSampleParameter::set_neg_margin(::google::protobuf::uint32 value) {
  set_has_neg_margin();
  neg_margin_ = value;
}

// optional uint32 pos_margin = 6 [default = 0];
inline bool HardSampleParameter::has_pos_margin() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HardSampleParameter::set_has_pos_margin() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HardSampleParameter::clear_has_pos_margin() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HardSampleParameter::clear_pos_margin() {
  pos_margin_ = 0u;
  clear_has_pos_margin();
}
inline ::google::protobuf::uint32 HardSampleParameter::pos_margin() const {
  return pos_margin_;
}
inline void HardSampleParameter::set_pos_margin(::google::protobuf::uint32 value) {
  set_has_pos_margin();
  pos_margin_ = value;
}

// optional bool use_hardsample = 7 [default = true];
inline bool HardSampleParameter::has_use_hardsample() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void HardSampleParameter::set_has_use_hardsample() {
  _has_bits_[0] |= 0x00000800u;
}
inline void HardSampleParameter::clear_has_use_hardsample() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void HardSampleParameter::clear_use_hardsample() {
  use_hardsample_ = true;
  clear_has_use_hardsample();
}
inline bool HardSampleParameter::use_hardsample() const {
  return use_hardsample_;
}
inline void HardSampleParameter::set_use_hardsample(bool value) {
  set_has_use_hardsample();
  use_hardsample_ = value;
}

// optional uint32 min_neg_num = 9 [default = 0];
inline bool HardSampleParameter::has_min_neg_num() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void HardSampleParameter::set_has_min_neg_num() {
  _has_bits_[0] |= 0x00001000u;
}
inline void HardSampleParameter::clear_has_min_neg_num() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void HardSampleParameter::clear_min_neg_num() {
  min_neg_num_ = 0u;
  clear_has_min_neg_num();
}
inline ::google::protobuf::uint32 HardSampleParameter::min_neg_num() const {
  return min_neg_num_;
}
inline void HardSampleParameter::set_min_neg_num(::google::protobuf::uint32 value) {
  set_has_min_neg_num();
  min_neg_num_ = value;
}

// optional uint32 min_pos_num = 10 [default = 0];
inline bool HardSampleParameter::has_min_pos_num() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void HardSampleParameter::set_has_min_pos_num() {
  _has_bits_[0] |= 0x00002000u;
}
inline void HardSampleParameter::clear_has_min_pos_num() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void HardSampleParameter::clear_min_pos_num() {
  min_pos_num_ = 0u;
  clear_has_min_pos_num();
}
inline ::google::protobuf::uint32 HardSampleParameter::min_pos_num() const {
  return min_pos_num_;
}
inline void HardSampleParameter::set_min_pos_num(::google::protobuf::uint32 value) {
  set_has_min_pos_num();
  min_pos_num_ = value;
}

// optional bool print_info = 15 [default = false];
inline bool HardSampleParameter::has_print_info() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void HardSampleParameter::set_has_print_info() {
  _has_bits_[0] |= 0x00004000u;
}
inline void HardSampleParameter::clear_has_print_info() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void HardSampleParameter::clear_print_info() {
  print_info_ = false;
  clear_has_print_info();
}
inline bool HardSampleParameter::print_info() const {
  return print_info_;
}
inline void HardSampleParameter::set_print_info(bool value) {
  set_has_print_info();
  print_info_ = value;
}

// -------------------------------------------------------------------

// SuperCropParameter

// optional .caffe.SuperCropParameter.Type type = 1 [default = CENTER];
inline bool SuperCropParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuperCropParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuperCropParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuperCropParameter::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::caffe::SuperCropParameter_Type SuperCropParameter::type() const {
  return static_cast< ::caffe::SuperCropParameter_Type >(type_);
}
inline void SuperCropParameter::set_type(::caffe::SuperCropParameter_Type value) {
  assert(::caffe::SuperCropParameter_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 crop_w = 2 [default = 0];
inline bool SuperCropParameter::has_crop_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuperCropParameter::set_has_crop_w() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuperCropParameter::clear_has_crop_w() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuperCropParameter::clear_crop_w() {
  crop_w_ = 0u;
  clear_has_crop_w();
}
inline ::google::protobuf::uint32 SuperCropParameter::crop_w() const {
  return crop_w_;
}
inline void SuperCropParameter::set_crop_w(::google::protobuf::uint32 value) {
  set_has_crop_w();
  crop_w_ = value;
}

// optional uint32 crop_h = 3 [default = 0];
inline bool SuperCropParameter::has_crop_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuperCropParameter::set_has_crop_h() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuperCropParameter::clear_has_crop_h() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuperCropParameter::clear_crop_h() {
  crop_h_ = 0u;
  clear_has_crop_h();
}
inline ::google::protobuf::uint32 SuperCropParameter::crop_h() const {
  return crop_h_;
}
inline void SuperCropParameter::set_crop_h(::google::protobuf::uint32 value) {
  set_has_crop_h();
  crop_h_ = value;
}

// optional bool print_info = 4 [default = false];
inline bool SuperCropParameter::has_print_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SuperCropParameter::set_has_print_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SuperCropParameter::clear_has_print_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SuperCropParameter::clear_print_info() {
  print_info_ = false;
  clear_has_print_info();
}
inline bool SuperCropParameter::print_info() const {
  return print_info_;
}
inline void SuperCropParameter::set_print_info(bool value) {
  set_has_print_info();
  print_info_ = value;
}

// optional uint32 point_fix_h = 5 [default = 0];
inline bool SuperCropParameter::has_point_fix_h() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SuperCropParameter::set_has_point_fix_h() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SuperCropParameter::clear_has_point_fix_h() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SuperCropParameter::clear_point_fix_h() {
  point_fix_h_ = 0u;
  clear_has_point_fix_h();
}
inline ::google::protobuf::uint32 SuperCropParameter::point_fix_h() const {
  return point_fix_h_;
}
inline void SuperCropParameter::set_point_fix_h(::google::protobuf::uint32 value) {
  set_has_point_fix_h();
  point_fix_h_ = value;
}

// optional uint32 point_fix_w = 6 [default = 0];
inline bool SuperCropParameter::has_point_fix_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SuperCropParameter::set_has_point_fix_w() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SuperCropParameter::clear_has_point_fix_w() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SuperCropParameter::clear_point_fix_w() {
  point_fix_w_ = 0u;
  clear_has_point_fix_w();
}
inline ::google::protobuf::uint32 SuperCropParameter::point_fix_w() const {
  return point_fix_w_;
}
inline void SuperCropParameter::set_point_fix_w(::google::protobuf::uint32 value) {
  set_has_point_fix_w();
  point_fix_w_ = value;
}

// -------------------------------------------------------------------

// MapMetricLossParameter

// optional .caffe.MapMetricLossParameter.LossType losstype = 1 [default = contrastive];
inline bool MapMetricLossParameter::has_losstype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapMetricLossParameter::set_has_losstype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapMetricLossParameter::clear_has_losstype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapMetricLossParameter::clear_losstype() {
  losstype_ = 1;
  clear_has_losstype();
}
inline ::caffe::MapMetricLossParameter_LossType MapMetricLossParameter::losstype() const {
  return static_cast< ::caffe::MapMetricLossParameter_LossType >(losstype_);
}
inline void MapMetricLossParameter::set_losstype(::caffe::MapMetricLossParameter_LossType value) {
  assert(::caffe::MapMetricLossParameter_LossType_IsValid(value));
  set_has_losstype();
  losstype_ = value;
}

// optional float sim_ratio = 2 [default = 1];
inline bool MapMetricLossParameter::has_sim_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapMetricLossParameter::set_has_sim_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapMetricLossParameter::clear_has_sim_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapMetricLossParameter::clear_sim_ratio() {
  sim_ratio_ = 1;
  clear_has_sim_ratio();
}
inline float MapMetricLossParameter::sim_ratio() const {
  return sim_ratio_;
}
inline void MapMetricLossParameter::set_sim_ratio(float value) {
  set_has_sim_ratio();
  sim_ratio_ = value;
}

// optional float dis_ratio = 3 [default = 1];
inline bool MapMetricLossParameter::has_dis_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapMetricLossParameter::set_has_dis_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapMetricLossParameter::clear_has_dis_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapMetricLossParameter::clear_dis_ratio() {
  dis_ratio_ = 1;
  clear_has_dis_ratio();
}
inline float MapMetricLossParameter::dis_ratio() const {
  return dis_ratio_;
}
inline void MapMetricLossParameter::set_dis_ratio(float value) {
  set_has_dis_ratio();
  dis_ratio_ = value;
}

// optional float sim_margin = 5 [default = 0];
inline bool MapMetricLossParameter::has_sim_margin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MapMetricLossParameter::set_has_sim_margin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MapMetricLossParameter::clear_has_sim_margin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MapMetricLossParameter::clear_sim_margin() {
  sim_margin_ = 0;
  clear_has_sim_margin();
}
inline float MapMetricLossParameter::sim_margin() const {
  return sim_margin_;
}
inline void MapMetricLossParameter::set_sim_margin(float value) {
  set_has_sim_margin();
  sim_margin_ = value;
}

// optional float dis_margin = 6 [default = 1];
inline bool MapMetricLossParameter::has_dis_margin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MapMetricLossParameter::set_has_dis_margin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MapMetricLossParameter::clear_has_dis_margin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MapMetricLossParameter::clear_dis_margin() {
  dis_margin_ = 1;
  clear_has_dis_margin();
}
inline float MapMetricLossParameter::dis_margin() const {
  return dis_margin_;
}
inline void MapMetricLossParameter::set_dis_margin(float value) {
  set_has_dis_margin();
  dis_margin_ = value;
}

// -------------------------------------------------------------------

// RegionconvolutionParameter

// optional uint32 num_output = 1;
inline bool RegionconvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionconvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionconvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionconvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::num_output() const {
  return num_output_;
}
inline void RegionconvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
}

// optional bool bias_term = 2 [default = true];
inline bool RegionconvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegionconvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegionconvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegionconvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool RegionconvolutionParameter::bias_term() const {
  return bias_term_;
}
inline void RegionconvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
}

// optional uint32 input_pad = 3 [default = 0];
inline bool RegionconvolutionParameter::has_input_pad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegionconvolutionParameter::set_has_input_pad() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegionconvolutionParameter::clear_has_input_pad() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegionconvolutionParameter::clear_input_pad() {
  input_pad_ = 0u;
  clear_has_input_pad();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::input_pad() const {
  return input_pad_;
}
inline void RegionconvolutionParameter::set_input_pad(::google::protobuf::uint32 value) {
  set_has_input_pad();
  input_pad_ = value;
}

// optional uint32 input_pad_h = 9 [default = 0];
inline bool RegionconvolutionParameter::has_input_pad_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegionconvolutionParameter::set_has_input_pad_h() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegionconvolutionParameter::clear_has_input_pad_h() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegionconvolutionParameter::clear_input_pad_h() {
  input_pad_h_ = 0u;
  clear_has_input_pad_h();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::input_pad_h() const {
  return input_pad_h_;
}
inline void RegionconvolutionParameter::set_input_pad_h(::google::protobuf::uint32 value) {
  set_has_input_pad_h();
  input_pad_h_ = value;
}

// optional uint32 input_pad_w = 10 [default = 0];
inline bool RegionconvolutionParameter::has_input_pad_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegionconvolutionParameter::set_has_input_pad_w() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegionconvolutionParameter::clear_has_input_pad_w() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegionconvolutionParameter::clear_input_pad_w() {
  input_pad_w_ = 0u;
  clear_has_input_pad_w();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::input_pad_w() const {
  return input_pad_w_;
}
inline void RegionconvolutionParameter::set_input_pad_w(::google::protobuf::uint32 value) {
  set_has_input_pad_w();
  input_pad_w_ = value;
}

// optional uint32 input_patch_size = 4;
inline bool RegionconvolutionParameter::has_input_patch_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegionconvolutionParameter::set_has_input_patch_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegionconvolutionParameter::clear_has_input_patch_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegionconvolutionParameter::clear_input_patch_size() {
  input_patch_size_ = 0u;
  clear_has_input_patch_size();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::input_patch_size() const {
  return input_patch_size_;
}
inline void RegionconvolutionParameter::set_input_patch_size(::google::protobuf::uint32 value) {
  set_has_input_patch_size();
  input_patch_size_ = value;
}

// optional uint32 input_patch_h = 11;
inline bool RegionconvolutionParameter::has_input_patch_h() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RegionconvolutionParameter::set_has_input_patch_h() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RegionconvolutionParameter::clear_has_input_patch_h() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RegionconvolutionParameter::clear_input_patch_h() {
  input_patch_h_ = 0u;
  clear_has_input_patch_h();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::input_patch_h() const {
  return input_patch_h_;
}
inline void RegionconvolutionParameter::set_input_patch_h(::google::protobuf::uint32 value) {
  set_has_input_patch_h();
  input_patch_h_ = value;
}

// optional uint32 input_patch_w = 12;
inline bool RegionconvolutionParameter::has_input_patch_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RegionconvolutionParameter::set_has_input_patch_w() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RegionconvolutionParameter::clear_has_input_patch_w() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RegionconvolutionParameter::clear_input_patch_w() {
  input_patch_w_ = 0u;
  clear_has_input_patch_w();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::input_patch_w() const {
  return input_patch_w_;
}
inline void RegionconvolutionParameter::set_input_patch_w(::google::protobuf::uint32 value) {
  set_has_input_patch_w();
  input_patch_w_ = value;
}

// optional uint32 input_stride = 6 [default = 1];
inline bool RegionconvolutionParameter::has_input_stride() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RegionconvolutionParameter::set_has_input_stride() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RegionconvolutionParameter::clear_has_input_stride() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RegionconvolutionParameter::clear_input_stride() {
  input_stride_ = 1u;
  clear_has_input_stride();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::input_stride() const {
  return input_stride_;
}
inline void RegionconvolutionParameter::set_input_stride(::google::protobuf::uint32 value) {
  set_has_input_stride();
  input_stride_ = value;
}

// optional uint32 input_stride_h = 13;
inline bool RegionconvolutionParameter::has_input_stride_h() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RegionconvolutionParameter::set_has_input_stride_h() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RegionconvolutionParameter::clear_has_input_stride_h() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RegionconvolutionParameter::clear_input_stride_h() {
  input_stride_h_ = 0u;
  clear_has_input_stride_h();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::input_stride_h() const {
  return input_stride_h_;
}
inline void RegionconvolutionParameter::set_input_stride_h(::google::protobuf::uint32 value) {
  set_has_input_stride_h();
  input_stride_h_ = value;
}

// optional uint32 input_stride_w = 14;
inline bool RegionconvolutionParameter::has_input_stride_w() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RegionconvolutionParameter::set_has_input_stride_w() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RegionconvolutionParameter::clear_has_input_stride_w() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RegionconvolutionParameter::clear_input_stride_w() {
  input_stride_w_ = 0u;
  clear_has_input_stride_w();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::input_stride_w() const {
  return input_stride_w_;
}
inline void RegionconvolutionParameter::set_input_stride_w(::google::protobuf::uint32 value) {
  set_has_input_stride_w();
  input_stride_w_ = value;
}

// optional uint32 output_pad = 16 [default = 0];
inline bool RegionconvolutionParameter::has_output_pad() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RegionconvolutionParameter::set_has_output_pad() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RegionconvolutionParameter::clear_has_output_pad() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RegionconvolutionParameter::clear_output_pad() {
  output_pad_ = 0u;
  clear_has_output_pad();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::output_pad() const {
  return output_pad_;
}
inline void RegionconvolutionParameter::set_output_pad(::google::protobuf::uint32 value) {
  set_has_output_pad();
  output_pad_ = value;
}

// optional uint32 output_pad_h = 17 [default = 0];
inline bool RegionconvolutionParameter::has_output_pad_h() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RegionconvolutionParameter::set_has_output_pad_h() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RegionconvolutionParameter::clear_has_output_pad_h() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RegionconvolutionParameter::clear_output_pad_h() {
  output_pad_h_ = 0u;
  clear_has_output_pad_h();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::output_pad_h() const {
  return output_pad_h_;
}
inline void RegionconvolutionParameter::set_output_pad_h(::google::protobuf::uint32 value) {
  set_has_output_pad_h();
  output_pad_h_ = value;
}

// optional uint32 output_pad_w = 18 [default = 0];
inline bool RegionconvolutionParameter::has_output_pad_w() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RegionconvolutionParameter::set_has_output_pad_w() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RegionconvolutionParameter::clear_has_output_pad_w() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RegionconvolutionParameter::clear_output_pad_w() {
  output_pad_w_ = 0u;
  clear_has_output_pad_w();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::output_pad_w() const {
  return output_pad_w_;
}
inline void RegionconvolutionParameter::set_output_pad_w(::google::protobuf::uint32 value) {
  set_has_output_pad_w();
  output_pad_w_ = value;
}

// optional uint32 output_patch_size = 19;
inline bool RegionconvolutionParameter::has_output_patch_size() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RegionconvolutionParameter::set_has_output_patch_size() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RegionconvolutionParameter::clear_has_output_patch_size() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RegionconvolutionParameter::clear_output_patch_size() {
  output_patch_size_ = 0u;
  clear_has_output_patch_size();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::output_patch_size() const {
  return output_patch_size_;
}
inline void RegionconvolutionParameter::set_output_patch_size(::google::protobuf::uint32 value) {
  set_has_output_patch_size();
  output_patch_size_ = value;
}

// optional uint32 output_patch_h = 20;
inline bool RegionconvolutionParameter::has_output_patch_h() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RegionconvolutionParameter::set_has_output_patch_h() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RegionconvolutionParameter::clear_has_output_patch_h() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RegionconvolutionParameter::clear_output_patch_h() {
  output_patch_h_ = 0u;
  clear_has_output_patch_h();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::output_patch_h() const {
  return output_patch_h_;
}
inline void RegionconvolutionParameter::set_output_patch_h(::google::protobuf::uint32 value) {
  set_has_output_patch_h();
  output_patch_h_ = value;
}

// optional uint32 output_patch_w = 21;
inline bool RegionconvolutionParameter::has_output_patch_w() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RegionconvolutionParameter::set_has_output_patch_w() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RegionconvolutionParameter::clear_has_output_patch_w() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RegionconvolutionParameter::clear_output_patch_w() {
  output_patch_w_ = 0u;
  clear_has_output_patch_w();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::output_patch_w() const {
  return output_patch_w_;
}
inline void RegionconvolutionParameter::set_output_patch_w(::google::protobuf::uint32 value) {
  set_has_output_patch_w();
  output_patch_w_ = value;
}

// optional uint32 output_stride = 22 [default = 1];
inline bool RegionconvolutionParameter::has_output_stride() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RegionconvolutionParameter::set_has_output_stride() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RegionconvolutionParameter::clear_has_output_stride() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RegionconvolutionParameter::clear_output_stride() {
  output_stride_ = 1u;
  clear_has_output_stride();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::output_stride() const {
  return output_stride_;
}
inline void RegionconvolutionParameter::set_output_stride(::google::protobuf::uint32 value) {
  set_has_output_stride();
  output_stride_ = value;
}

// optional uint32 output_stride_h = 23;
inline bool RegionconvolutionParameter::has_output_stride_h() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RegionconvolutionParameter::set_has_output_stride_h() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RegionconvolutionParameter::clear_has_output_stride_h() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RegionconvolutionParameter::clear_output_stride_h() {
  output_stride_h_ = 0u;
  clear_has_output_stride_h();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::output_stride_h() const {
  return output_stride_h_;
}
inline void RegionconvolutionParameter::set_output_stride_h(::google::protobuf::uint32 value) {
  set_has_output_stride_h();
  output_stride_h_ = value;
}

// optional uint32 output_stride_w = 24;
inline bool RegionconvolutionParameter::has_output_stride_w() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RegionconvolutionParameter::set_has_output_stride_w() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RegionconvolutionParameter::clear_has_output_stride_w() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RegionconvolutionParameter::clear_output_stride_w() {
  output_stride_w_ = 0u;
  clear_has_output_stride_w();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::output_stride_w() const {
  return output_stride_w_;
}
inline void RegionconvolutionParameter::set_output_stride_w(::google::protobuf::uint32 value) {
  set_has_output_stride_w();
  output_stride_w_ = value;
}

// optional uint32 group = 5 [default = 1];
inline bool RegionconvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RegionconvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RegionconvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RegionconvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 RegionconvolutionParameter::group() const {
  return group_;
}
inline void RegionconvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
}

// optional .caffe.FillerParameter weight_filler = 7;
inline bool RegionconvolutionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RegionconvolutionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RegionconvolutionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RegionconvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& RegionconvolutionParameter::weight_filler() const {
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* RegionconvolutionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::caffe::FillerParameter;
  return weight_filler_;
}
inline ::caffe::FillerParameter* RegionconvolutionParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void RegionconvolutionParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
}

// optional .caffe.FillerParameter bias_filler = 8;
inline bool RegionconvolutionParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RegionconvolutionParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RegionconvolutionParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RegionconvolutionParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& RegionconvolutionParameter::bias_filler() const {
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* RegionconvolutionParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::caffe::FillerParameter;
  return bias_filler_;
}
inline ::caffe::FillerParameter* RegionconvolutionParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void RegionconvolutionParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
}

// -------------------------------------------------------------------

// BNParameter

// optional .caffe.FillerParameter scale_filler = 1;
inline bool BNParameter::has_scale_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BNParameter::set_has_scale_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BNParameter::clear_has_scale_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BNParameter::clear_scale_filler() {
  if (scale_filler_ != NULL) scale_filler_->::caffe::FillerParameter::Clear();
  clear_has_scale_filler();
}
inline const ::caffe::FillerParameter& BNParameter::scale_filler() const {
  return scale_filler_ != NULL ? *scale_filler_ : *default_instance_->scale_filler_;
}
inline ::caffe::FillerParameter* BNParameter::mutable_scale_filler() {
  set_has_scale_filler();
  if (scale_filler_ == NULL) scale_filler_ = new ::caffe::FillerParameter;
  return scale_filler_;
}
inline ::caffe::FillerParameter* BNParameter::release_scale_filler() {
  clear_has_scale_filler();
  ::caffe::FillerParameter* temp = scale_filler_;
  scale_filler_ = NULL;
  return temp;
}
inline void BNParameter::set_allocated_scale_filler(::caffe::FillerParameter* scale_filler) {
  delete scale_filler_;
  scale_filler_ = scale_filler;
  if (scale_filler) {
    set_has_scale_filler();
  } else {
    clear_has_scale_filler();
  }
}

// optional .caffe.FillerParameter shift_filler = 2;
inline bool BNParameter::has_shift_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BNParameter::set_has_shift_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BNParameter::clear_has_shift_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BNParameter::clear_shift_filler() {
  if (shift_filler_ != NULL) shift_filler_->::caffe::FillerParameter::Clear();
  clear_has_shift_filler();
}
inline const ::caffe::FillerParameter& BNParameter::shift_filler() const {
  return shift_filler_ != NULL ? *shift_filler_ : *default_instance_->shift_filler_;
}
inline ::caffe::FillerParameter* BNParameter::mutable_shift_filler() {
  set_has_shift_filler();
  if (shift_filler_ == NULL) shift_filler_ = new ::caffe::FillerParameter;
  return shift_filler_;
}
inline ::caffe::FillerParameter* BNParameter::release_shift_filler() {
  clear_has_shift_filler();
  ::caffe::FillerParameter* temp = shift_filler_;
  shift_filler_ = NULL;
  return temp;
}
inline void BNParameter::set_allocated_shift_filler(::caffe::FillerParameter* shift_filler) {
  delete shift_filler_;
  shift_filler_ = shift_filler;
  if (shift_filler) {
    set_has_shift_filler();
  } else {
    clear_has_shift_filler();
  }
}

// -------------------------------------------------------------------

// ElementHingeLossParameter

// optional .caffe.ElementHingeLossParameter.Norm norm = 1 [default = L2];
inline bool ElementHingeLossParameter::has_norm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ElementHingeLossParameter::set_has_norm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ElementHingeLossParameter::clear_has_norm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ElementHingeLossParameter::clear_norm() {
  norm_ = 2;
  clear_has_norm();
}
inline ::caffe::ElementHingeLossParameter_Norm ElementHingeLossParameter::norm() const {
  return static_cast< ::caffe::ElementHingeLossParameter_Norm >(norm_);
}
inline void ElementHingeLossParameter::set_norm(::caffe::ElementHingeLossParameter_Norm value) {
  assert(::caffe::ElementHingeLossParameter_Norm_IsValid(value));
  set_has_norm();
  norm_ = value;
}

// optional bool scale_loss = 2 [default = false];
inline bool ElementHingeLossParameter::has_scale_loss() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ElementHingeLossParameter::set_has_scale_loss() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ElementHingeLossParameter::clear_has_scale_loss() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ElementHingeLossParameter::clear_scale_loss() {
  scale_loss_ = false;
  clear_has_scale_loss();
}
inline bool ElementHingeLossParameter::scale_loss() const {
  return scale_loss_;
}
inline void ElementHingeLossParameter::set_scale_loss(bool value) {
  set_has_scale_loss();
  scale_loss_ = value;
}

// -------------------------------------------------------------------

// ManipulateLossParameter

// optional bool use_balancesample = 1 [default = false];
inline bool ManipulateLossParameter::has_use_balancesample() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ManipulateLossParameter::set_has_use_balancesample() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ManipulateLossParameter::clear_has_use_balancesample() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ManipulateLossParameter::clear_use_balancesample() {
  use_balancesample_ = false;
  clear_has_use_balancesample();
}
inline bool ManipulateLossParameter::use_balancesample() const {
  return use_balancesample_;
}
inline void ManipulateLossParameter::set_use_balancesample(bool value) {
  set_has_use_balancesample();
  use_balancesample_ = value;
}

// optional string ignore_value = 2 [default = ""];
inline bool ManipulateLossParameter::has_ignore_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ManipulateLossParameter::set_has_ignore_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ManipulateLossParameter::clear_has_ignore_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ManipulateLossParameter::clear_ignore_value() {
  if (ignore_value_ != &::google::protobuf::internal::kEmptyString) {
    ignore_value_->clear();
  }
  clear_has_ignore_value();
}
inline const ::std::string& ManipulateLossParameter::ignore_value() const {
  return *ignore_value_;
}
inline void ManipulateLossParameter::set_ignore_value(const ::std::string& value) {
  set_has_ignore_value();
  if (ignore_value_ == &::google::protobuf::internal::kEmptyString) {
    ignore_value_ = new ::std::string;
  }
  ignore_value_->assign(value);
}
inline void ManipulateLossParameter::set_ignore_value(const char* value) {
  set_has_ignore_value();
  if (ignore_value_ == &::google::protobuf::internal::kEmptyString) {
    ignore_value_ = new ::std::string;
  }
  ignore_value_->assign(value);
}
inline void ManipulateLossParameter::set_ignore_value(const char* value, size_t size) {
  set_has_ignore_value();
  if (ignore_value_ == &::google::protobuf::internal::kEmptyString) {
    ignore_value_ = new ::std::string;
  }
  ignore_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ManipulateLossParameter::mutable_ignore_value() {
  set_has_ignore_value();
  if (ignore_value_ == &::google::protobuf::internal::kEmptyString) {
    ignore_value_ = new ::std::string;
  }
  return ignore_value_;
}
inline ::std::string* ManipulateLossParameter::release_ignore_value() {
  clear_has_ignore_value();
  if (ignore_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ignore_value_;
    ignore_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ManipulateLossParameter::set_allocated_ignore_value(::std::string* ignore_value) {
  if (ignore_value_ != &::google::protobuf::internal::kEmptyString) {
    delete ignore_value_;
  }
  if (ignore_value) {
    set_has_ignore_value();
    ignore_value_ = ignore_value;
  } else {
    clear_has_ignore_value();
    ignore_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool use_fullzeroignore = 3 [default = false];
inline bool ManipulateLossParameter::has_use_fullzeroignore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ManipulateLossParameter::set_has_use_fullzeroignore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ManipulateLossParameter::clear_has_use_fullzeroignore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ManipulateLossParameter::clear_use_fullzeroignore() {
  use_fullzeroignore_ = false;
  clear_has_use_fullzeroignore();
}
inline bool ManipulateLossParameter::use_fullzeroignore() const {
  return use_fullzeroignore_;
}
inline void ManipulateLossParameter::set_use_fullzeroignore(bool value) {
  set_has_use_fullzeroignore();
  use_fullzeroignore_ = value;
}

// optional float bg_ratio = 4 [default = 1];
inline bool ManipulateLossParameter::has_bg_ratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ManipulateLossParameter::set_has_bg_ratio() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ManipulateLossParameter::clear_has_bg_ratio() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ManipulateLossParameter::clear_bg_ratio() {
  bg_ratio_ = 1;
  clear_has_bg_ratio();
}
inline float ManipulateLossParameter::bg_ratio() const {
  return bg_ratio_;
}
inline void ManipulateLossParameter::set_bg_ratio(float value) {
  set_has_bg_ratio();
  bg_ratio_ = value;
}

// optional float uniform_droprate = 5 [default = 1];
inline bool ManipulateLossParameter::has_uniform_droprate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ManipulateLossParameter::set_has_uniform_droprate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ManipulateLossParameter::clear_has_uniform_droprate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ManipulateLossParameter::clear_uniform_droprate() {
  uniform_droprate_ = 1;
  clear_has_uniform_droprate();
}
inline float ManipulateLossParameter::uniform_droprate() const {
  return uniform_droprate_;
}
inline void ManipulateLossParameter::set_uniform_droprate(float value) {
  set_has_uniform_droprate();
  uniform_droprate_ = value;
}

// optional bool use_perchannel_balance = 6 [default = false];
inline bool ManipulateLossParameter::has_use_perchannel_balance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ManipulateLossParameter::set_has_use_perchannel_balance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ManipulateLossParameter::clear_has_use_perchannel_balance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ManipulateLossParameter::clear_use_perchannel_balance() {
  use_perchannel_balance_ = false;
  clear_has_use_perchannel_balance();
}
inline bool ManipulateLossParameter::use_perchannel_balance() const {
  return use_perchannel_balance_;
}
inline void ManipulateLossParameter::set_use_perchannel_balance(bool value) {
  set_has_use_perchannel_balance();
  use_perchannel_balance_ = value;
}

// optional bool drop_singleclasschannel = 7 [default = false];
inline bool ManipulateLossParameter::has_drop_singleclasschannel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ManipulateLossParameter::set_has_drop_singleclasschannel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ManipulateLossParameter::clear_has_drop_singleclasschannel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ManipulateLossParameter::clear_drop_singleclasschannel() {
  drop_singleclasschannel_ = false;
  clear_has_drop_singleclasschannel();
}
inline bool ManipulateLossParameter::drop_singleclasschannel() const {
  return drop_singleclasschannel_;
}
inline void ManipulateLossParameter::set_drop_singleclasschannel(bool value) {
  set_has_drop_singleclasschannel();
  drop_singleclasschannel_ = value;
}

// optional bool print_info = 8 [default = false];
inline bool ManipulateLossParameter::has_print_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ManipulateLossParameter::set_has_print_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ManipulateLossParameter::clear_has_print_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ManipulateLossParameter::clear_print_info() {
  print_info_ = false;
  clear_has_print_info();
}
inline bool ManipulateLossParameter::print_info() const {
  return print_info_;
}
inline void ManipulateLossParameter::set_print_info(bool value) {
  set_has_print_info();
  print_info_ = value;
}

// optional bool use_unionchannel_balance = 9 [default = false];
inline bool ManipulateLossParameter::has_use_unionchannel_balance() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ManipulateLossParameter::set_has_use_unionchannel_balance() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ManipulateLossParameter::clear_has_use_unionchannel_balance() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ManipulateLossParameter::clear_use_unionchannel_balance() {
  use_unionchannel_balance_ = false;
  clear_has_use_unionchannel_balance();
}
inline bool ManipulateLossParameter::use_unionchannel_balance() const {
  return use_unionchannel_balance_;
}
inline void ManipulateLossParameter::set_use_unionchannel_balance(bool value) {
  set_has_use_unionchannel_balance();
  use_unionchannel_balance_ = value;
}

// -------------------------------------------------------------------

// ResizeParameter

// optional float resize_ratio = 1 [default = 1];
inline bool ResizeParameter::has_resize_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResizeParameter::set_has_resize_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResizeParameter::clear_has_resize_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResizeParameter::clear_resize_ratio() {
  resize_ratio_ = 1;
  clear_has_resize_ratio();
}
inline float ResizeParameter::resize_ratio() const {
  return resize_ratio_;
}
inline void ResizeParameter::set_resize_ratio(float value) {
  set_has_resize_ratio();
  resize_ratio_ = value;
}

// optional .caffe.ResizeParameter.Type type = 4 [default = NEAREST];
inline bool ResizeParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResizeParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResizeParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResizeParameter::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::caffe::ResizeParameter_Type ResizeParameter::type() const {
  return static_cast< ::caffe::ResizeParameter_Type >(type_);
}
inline void ResizeParameter::set_type(::caffe::ResizeParameter_Type value) {
  assert(::caffe::ResizeParameter_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool is_pyramid_test = 5 [default = false];
inline bool ResizeParameter::has_is_pyramid_test() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResizeParameter::set_has_is_pyramid_test() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResizeParameter::clear_has_is_pyramid_test() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResizeParameter::clear_is_pyramid_test() {
  is_pyramid_test_ = false;
  clear_has_is_pyramid_test();
}
inline bool ResizeParameter::is_pyramid_test() const {
  return is_pyramid_test_;
}
inline void ResizeParameter::set_is_pyramid_test(bool value) {
  set_has_is_pyramid_test();
  is_pyramid_test_ = value;
}

// optional float height = 6;
inline bool ResizeParameter::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResizeParameter::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResizeParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResizeParameter::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float ResizeParameter::height() const {
  return height_;
}
inline void ResizeParameter::set_height(float value) {
  set_has_height();
  height_ = value;
}

// optional float width = 7;
inline bool ResizeParameter::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResizeParameter::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResizeParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResizeParameter::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float ResizeParameter::width() const {
  return width_;
}
inline void ResizeParameter::set_width(float value) {
  set_has_width();
  width_ = value;
}

// optional float out_height_scale = 8;
inline bool ResizeParameter::has_out_height_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResizeParameter::set_has_out_height_scale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResizeParameter::clear_has_out_height_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResizeParameter::clear_out_height_scale() {
  out_height_scale_ = 0;
  clear_has_out_height_scale();
}
inline float ResizeParameter::out_height_scale() const {
  return out_height_scale_;
}
inline void ResizeParameter::set_out_height_scale(float value) {
  set_has_out_height_scale();
  out_height_scale_ = value;
}

// optional float out_width_scale = 9;
inline bool ResizeParameter::has_out_width_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResizeParameter::set_has_out_width_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResizeParameter::clear_has_out_width_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResizeParameter::clear_out_width_scale() {
  out_width_scale_ = 0;
  clear_has_out_width_scale();
}
inline float ResizeParameter::out_width_scale() const {
  return out_width_scale_;
}
inline void ResizeParameter::set_out_width_scale(float value) {
  set_has_out_width_scale();
  out_width_scale_ = value;
}

// -------------------------------------------------------------------

// TemporalLstmParameter

// optional uint32 num_output = 1;
inline bool TemporalLstmParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TemporalLstmParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TemporalLstmParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TemporalLstmParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 TemporalLstmParameter::num_output() const {
  return num_output_;
}
inline void TemporalLstmParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
}

// optional bool bias_term = 2 [default = true];
inline bool TemporalLstmParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TemporalLstmParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TemporalLstmParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TemporalLstmParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool TemporalLstmParameter::bias_term() const {
  return bias_term_;
}
inline void TemporalLstmParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
}

// optional .caffe.FillerParameter weight_filler = 7;
inline bool TemporalLstmParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TemporalLstmParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TemporalLstmParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TemporalLstmParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& TemporalLstmParameter::weight_filler() const {
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* TemporalLstmParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::caffe::FillerParameter;
  return weight_filler_;
}
inline ::caffe::FillerParameter* TemporalLstmParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void TemporalLstmParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
}

// optional .caffe.FillerParameter bias_filler = 8;
inline bool TemporalLstmParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TemporalLstmParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TemporalLstmParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TemporalLstmParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& TemporalLstmParameter::bias_filler() const {
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* TemporalLstmParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::caffe::FillerParameter;
  return bias_filler_;
}
inline ::caffe::FillerParameter* TemporalLstmParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void TemporalLstmParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
}

// optional bool horizontal = 16 [default = true];
inline bool TemporalLstmParameter::has_horizontal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TemporalLstmParameter::set_has_horizontal() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TemporalLstmParameter::clear_has_horizontal() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TemporalLstmParameter::clear_horizontal() {
  horizontal_ = true;
  clear_has_horizontal();
}
inline bool TemporalLstmParameter::horizontal() const {
  return horizontal_;
}
inline void TemporalLstmParameter::set_horizontal(bool value) {
  set_has_horizontal();
  horizontal_ = value;
}

// optional bool reverse = 17 [default = false];
inline bool TemporalLstmParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TemporalLstmParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TemporalLstmParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TemporalLstmParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
inline bool TemporalLstmParameter::reverse() const {
  return reverse_;
}
inline void TemporalLstmParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
}

// -------------------------------------------------------------------

// WeakGateLstmParameter

// optional uint32 num_output = 1;
inline bool WeakGateLstmParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeakGateLstmParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeakGateLstmParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeakGateLstmParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 WeakGateLstmParameter::num_output() const {
  return num_output_;
}
inline void WeakGateLstmParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
}

// optional bool bias_term = 2 [default = true];
inline bool WeakGateLstmParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeakGateLstmParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeakGateLstmParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeakGateLstmParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool WeakGateLstmParameter::bias_term() const {
  return bias_term_;
}
inline void WeakGateLstmParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
}

// optional .caffe.FillerParameter weight_filler = 3;
inline bool WeakGateLstmParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeakGateLstmParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeakGateLstmParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeakGateLstmParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& WeakGateLstmParameter::weight_filler() const {
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* WeakGateLstmParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::caffe::FillerParameter;
  return weight_filler_;
}
inline ::caffe::FillerParameter* WeakGateLstmParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void WeakGateLstmParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
}

// optional .caffe.FillerParameter bias_filler = 4;
inline bool WeakGateLstmParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WeakGateLstmParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WeakGateLstmParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WeakGateLstmParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& WeakGateLstmParameter::bias_filler() const {
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* WeakGateLstmParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::caffe::FillerParameter;
  return bias_filler_;
}
inline ::caffe::FillerParameter* WeakGateLstmParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void WeakGateLstmParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
}

// optional bool horizontal = 5 [default = true];
inline bool WeakGateLstmParameter::has_horizontal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WeakGateLstmParameter::set_has_horizontal() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WeakGateLstmParameter::clear_has_horizontal() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WeakGateLstmParameter::clear_horizontal() {
  horizontal_ = true;
  clear_has_horizontal();
}
inline bool WeakGateLstmParameter::horizontal() const {
  return horizontal_;
}
inline void WeakGateLstmParameter::set_horizontal(bool value) {
  set_has_horizontal();
  horizontal_ = value;
}

// optional bool reverse = 6 [default = false];
inline bool WeakGateLstmParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WeakGateLstmParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WeakGateLstmParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WeakGateLstmParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
inline bool WeakGateLstmParameter::reverse() const {
  return reverse_;
}
inline void WeakGateLstmParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
}

// optional float restrict_w = 7 [default = -1];
inline bool WeakGateLstmParameter::has_restrict_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WeakGateLstmParameter::set_has_restrict_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WeakGateLstmParameter::clear_has_restrict_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WeakGateLstmParameter::clear_restrict_w() {
  restrict_w_ = -1;
  clear_has_restrict_w();
}
inline float WeakGateLstmParameter::restrict_w() const {
  return restrict_w_;
}
inline void WeakGateLstmParameter::set_restrict_w(float value) {
  set_has_restrict_w();
  restrict_w_ = value;
}

// optional bool printall_datadiff = 8 [default = false];
inline bool WeakGateLstmParameter::has_printall_datadiff() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WeakGateLstmParameter::set_has_printall_datadiff() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WeakGateLstmParameter::clear_has_printall_datadiff() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WeakGateLstmParameter::clear_printall_datadiff() {
  printall_datadiff_ = false;
  clear_has_printall_datadiff();
}
inline bool WeakGateLstmParameter::printall_datadiff() const {
  return printall_datadiff_;
}
inline void WeakGateLstmParameter::set_printall_datadiff(bool value) {
  set_has_printall_datadiff();
  printall_datadiff_ = value;
}

// -------------------------------------------------------------------

// SpatialLstmParameter

// optional uint32 num_output = 1;
inline bool SpatialLstmParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpatialLstmParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpatialLstmParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpatialLstmParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 SpatialLstmParameter::num_output() const {
  return num_output_;
}
inline void SpatialLstmParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
}

// optional bool bias_term = 2 [default = true];
inline bool SpatialLstmParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpatialLstmParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpatialLstmParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpatialLstmParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool SpatialLstmParameter::bias_term() const {
  return bias_term_;
}
inline void SpatialLstmParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
}

// optional .caffe.FillerParameter weight_filler = 7;
inline bool SpatialLstmParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpatialLstmParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpatialLstmParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpatialLstmParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& SpatialLstmParameter::weight_filler() const {
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* SpatialLstmParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::caffe::FillerParameter;
  return weight_filler_;
}
inline ::caffe::FillerParameter* SpatialLstmParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void SpatialLstmParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
}

// optional .caffe.FillerParameter bias_filler = 8;
inline bool SpatialLstmParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpatialLstmParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpatialLstmParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpatialLstmParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& SpatialLstmParameter::bias_filler() const {
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* SpatialLstmParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::caffe::FillerParameter;
  return bias_filler_;
}
inline ::caffe::FillerParameter* SpatialLstmParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void SpatialLstmParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
}

// optional bool horizontal = 16 [default = true];
inline bool SpatialLstmParameter::has_horizontal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpatialLstmParameter::set_has_horizontal() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpatialLstmParameter::clear_has_horizontal() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpatialLstmParameter::clear_horizontal() {
  horizontal_ = true;
  clear_has_horizontal();
}
inline bool SpatialLstmParameter::horizontal() const {
  return horizontal_;
}
inline void SpatialLstmParameter::set_horizontal(bool value) {
  set_has_horizontal();
  horizontal_ = value;
}

// optional bool reverse = 17 [default = false];
inline bool SpatialLstmParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SpatialLstmParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SpatialLstmParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SpatialLstmParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
inline bool SpatialLstmParameter::reverse() const {
  return reverse_;
}
inline void SpatialLstmParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
}

// -------------------------------------------------------------------

// SpatialRecurrentParameter

// optional uint32 num_output = 1;
inline bool SpatialRecurrentParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpatialRecurrentParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpatialRecurrentParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpatialRecurrentParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 SpatialRecurrentParameter::num_output() const {
  return num_output_;
}
inline void SpatialRecurrentParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
}

// optional bool bias_term = 2 [default = true];
inline bool SpatialRecurrentParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpatialRecurrentParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpatialRecurrentParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpatialRecurrentParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool SpatialRecurrentParameter::bias_term() const {
  return bias_term_;
}
inline void SpatialRecurrentParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
}

// optional .caffe.FillerParameter weight_filler = 7;
inline bool SpatialRecurrentParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpatialRecurrentParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpatialRecurrentParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpatialRecurrentParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& SpatialRecurrentParameter::weight_filler() const {
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* SpatialRecurrentParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::caffe::FillerParameter;
  return weight_filler_;
}
inline ::caffe::FillerParameter* SpatialRecurrentParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void SpatialRecurrentParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
}

// optional .caffe.FillerParameter bias_filler = 8;
inline bool SpatialRecurrentParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpatialRecurrentParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpatialRecurrentParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpatialRecurrentParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& SpatialRecurrentParameter::bias_filler() const {
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* SpatialRecurrentParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::caffe::FillerParameter;
  return bias_filler_;
}
inline ::caffe::FillerParameter* SpatialRecurrentParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void SpatialRecurrentParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
}

// optional bool horizontal = 16 [default = true];
inline bool SpatialRecurrentParameter::has_horizontal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpatialRecurrentParameter::set_has_horizontal() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpatialRecurrentParameter::clear_has_horizontal() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpatialRecurrentParameter::clear_horizontal() {
  horizontal_ = true;
  clear_has_horizontal();
}
inline bool SpatialRecurrentParameter::horizontal() const {
  return horizontal_;
}
inline void SpatialRecurrentParameter::set_horizontal(bool value) {
  set_has_horizontal();
  horizontal_ = value;
}

// optional bool reverse = 17 [default = false];
inline bool SpatialRecurrentParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SpatialRecurrentParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SpatialRecurrentParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SpatialRecurrentParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
inline bool SpatialRecurrentParameter::reverse() const {
  return reverse_;
}
inline void SpatialRecurrentParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
}

// optional .caffe.SpatialRecurrentParameter.Active active = 18 [default = LINEAR];
inline bool SpatialRecurrentParameter::has_active() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SpatialRecurrentParameter::set_has_active() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SpatialRecurrentParameter::clear_has_active() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SpatialRecurrentParameter::clear_active() {
  active_ = 0;
  clear_has_active();
}
inline ::caffe::SpatialRecurrentParameter_Active SpatialRecurrentParameter::active() const {
  return static_cast< ::caffe::SpatialRecurrentParameter_Active >(active_);
}
inline void SpatialRecurrentParameter::set_active(::caffe::SpatialRecurrentParameter_Active value) {
  assert(::caffe::SpatialRecurrentParameter_Active_IsValid(value));
  set_has_active();
  active_ = value;
}

// optional float bound_diff = 19 [default = -1];
inline bool SpatialRecurrentParameter::has_bound_diff() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SpatialRecurrentParameter::set_has_bound_diff() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SpatialRecurrentParameter::clear_has_bound_diff() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SpatialRecurrentParameter::clear_bound_diff() {
  bound_diff_ = -1;
  clear_has_bound_diff();
}
inline float SpatialRecurrentParameter::bound_diff() const {
  return bound_diff_;
}
inline void SpatialRecurrentParameter::set_bound_diff(float value) {
  set_has_bound_diff();
  bound_diff_ = value;
}

// optional float restrict_w = 20 [default = -1];
inline bool SpatialRecurrentParameter::has_restrict_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SpatialRecurrentParameter::set_has_restrict_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SpatialRecurrentParameter::clear_has_restrict_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SpatialRecurrentParameter::clear_restrict_w() {
  restrict_w_ = -1;
  clear_has_restrict_w();
}
inline float SpatialRecurrentParameter::restrict_w() const {
  return restrict_w_;
}
inline void SpatialRecurrentParameter::set_restrict_w(float value) {
  set_has_restrict_w();
  restrict_w_ = value;
}

// -------------------------------------------------------------------

// ManipulatelabelParameter

// optional uint32 maxlabel = 1 [default = 0];
inline bool ManipulatelabelParameter::has_maxlabel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ManipulatelabelParameter::set_has_maxlabel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ManipulatelabelParameter::clear_has_maxlabel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ManipulatelabelParameter::clear_maxlabel() {
  maxlabel_ = 0u;
  clear_has_maxlabel();
}
inline ::google::protobuf::uint32 ManipulatelabelParameter::maxlabel() const {
  return maxlabel_;
}
inline void ManipulatelabelParameter::set_maxlabel(::google::protobuf::uint32 value) {
  set_has_maxlabel();
  maxlabel_ = value;
}

// optional .caffe.ManipulatelabelParameter.Type type = 2 [default = EXPAND];
inline bool ManipulatelabelParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ManipulatelabelParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ManipulatelabelParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ManipulatelabelParameter::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::caffe::ManipulatelabelParameter_Type ManipulatelabelParameter::type() const {
  return static_cast< ::caffe::ManipulatelabelParameter_Type >(type_);
}
inline void ManipulatelabelParameter::set_type(::caffe::ManipulatelabelParameter_Type value) {
  assert(::caffe::ManipulatelabelParameter_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool horizontal = 3 [default = true];
inline bool ManipulatelabelParameter::has_horizontal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ManipulatelabelParameter::set_has_horizontal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ManipulatelabelParameter::clear_has_horizontal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ManipulatelabelParameter::clear_horizontal() {
  horizontal_ = true;
  clear_has_horizontal();
}
inline bool ManipulatelabelParameter::horizontal() const {
  return horizontal_;
}
inline void ManipulatelabelParameter::set_horizontal(bool value) {
  set_has_horizontal();
  horizontal_ = value;
}

// optional uint32 edgerange = 4 [default = 1];
inline bool ManipulatelabelParameter::has_edgerange() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ManipulatelabelParameter::set_has_edgerange() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ManipulatelabelParameter::clear_has_edgerange() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ManipulatelabelParameter::clear_edgerange() {
  edgerange_ = 1u;
  clear_has_edgerange();
}
inline ::google::protobuf::uint32 ManipulatelabelParameter::edgerange() const {
  return edgerange_;
}
inline void ManipulatelabelParameter::set_edgerange(::google::protobuf::uint32 value) {
  set_has_edgerange();
  edgerange_ = value;
}

// optional uint32 duplicate_dim = 5 [default = 1];
inline bool ManipulatelabelParameter::has_duplicate_dim() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ManipulatelabelParameter::set_has_duplicate_dim() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ManipulatelabelParameter::clear_has_duplicate_dim() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ManipulatelabelParameter::clear_duplicate_dim() {
  duplicate_dim_ = 1u;
  clear_has_duplicate_dim();
}
inline ::google::protobuf::uint32 ManipulatelabelParameter::duplicate_dim() const {
  return duplicate_dim_;
}
inline void ManipulatelabelParameter::set_duplicate_dim(::google::protobuf::uint32 value) {
  set_has_duplicate_dim();
  duplicate_dim_ = value;
}

// optional uint32 duplicate_num = 6 [default = 1];
inline bool ManipulatelabelParameter::has_duplicate_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ManipulatelabelParameter::set_has_duplicate_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ManipulatelabelParameter::clear_has_duplicate_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ManipulatelabelParameter::clear_duplicate_num() {
  duplicate_num_ = 1u;
  clear_has_duplicate_num();
}
inline ::google::protobuf::uint32 ManipulatelabelParameter::duplicate_num() const {
  return duplicate_num_;
}
inline void ManipulatelabelParameter::set_duplicate_num(::google::protobuf::uint32 value) {
  set_has_duplicate_num();
  duplicate_num_ = value;
}

// optional bool reverse_label = 7 [default = false];
inline bool ManipulatelabelParameter::has_reverse_label() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ManipulatelabelParameter::set_has_reverse_label() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ManipulatelabelParameter::clear_has_reverse_label() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ManipulatelabelParameter::clear_reverse_label() {
  reverse_label_ = false;
  clear_has_reverse_label();
}
inline bool ManipulatelabelParameter::reverse_label() const {
  return reverse_label_;
}
inline void ManipulatelabelParameter::set_reverse_label(bool value) {
  set_has_reverse_label();
  reverse_label_ = value;
}

// optional bool both_edge_direction = 8 [default = false];
inline bool ManipulatelabelParameter::has_both_edge_direction() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ManipulatelabelParameter::set_has_both_edge_direction() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ManipulatelabelParameter::clear_has_both_edge_direction() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ManipulatelabelParameter::clear_both_edge_direction() {
  both_edge_direction_ = false;
  clear_has_both_edge_direction();
}
inline bool ManipulatelabelParameter::both_edge_direction() const {
  return both_edge_direction_;
}
inline void ManipulatelabelParameter::set_both_edge_direction(bool value) {
  set_has_both_edge_direction();
  both_edge_direction_ = value;
}

// optional bool duplicate_isanyone = 9 [default = false];
inline bool ManipulatelabelParameter::has_duplicate_isanyone() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ManipulatelabelParameter::set_has_duplicate_isanyone() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ManipulatelabelParameter::clear_has_duplicate_isanyone() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ManipulatelabelParameter::clear_duplicate_isanyone() {
  duplicate_isanyone_ = false;
  clear_has_duplicate_isanyone();
}
inline bool ManipulatelabelParameter::duplicate_isanyone() const {
  return duplicate_isanyone_;
}
inline void ManipulatelabelParameter::set_duplicate_isanyone(bool value) {
  set_has_duplicate_isanyone();
  duplicate_isanyone_ = value;
}

// -------------------------------------------------------------------

// ImageDataArbitraryParameter

// optional string source = 1;
inline bool ImageDataArbitraryParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageDataArbitraryParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageDataArbitraryParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& ImageDataArbitraryParameter::source() const {
  return *source_;
}
inline void ImageDataArbitraryParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void ImageDataArbitraryParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void ImageDataArbitraryParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageDataArbitraryParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* ImageDataArbitraryParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImageDataArbitraryParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool use_disturb = 14 [default = false];
inline bool ImageDataArbitraryParameter::has_use_disturb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_use_disturb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageDataArbitraryParameter::clear_has_use_disturb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageDataArbitraryParameter::clear_use_disturb() {
  use_disturb_ = false;
  clear_has_use_disturb();
}
inline bool ImageDataArbitraryParameter::use_disturb() const {
  return use_disturb_;
}
inline void ImageDataArbitraryParameter::set_use_disturb(bool value) {
  set_has_use_disturb();
  use_disturb_ = value;
}

// optional bool useflip = 15 [default = false];
inline bool ImageDataArbitraryParameter::has_useflip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_useflip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageDataArbitraryParameter::clear_has_useflip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageDataArbitraryParameter::clear_useflip() {
  useflip_ = false;
  clear_has_useflip();
}
inline bool ImageDataArbitraryParameter::useflip() const {
  return useflip_;
}
inline void ImageDataArbitraryParameter::set_useflip(bool value) {
  set_has_useflip();
  useflip_ = value;
}

// optional uint32 batch_size = 4;
inline bool ImageDataArbitraryParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageDataArbitraryParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageDataArbitraryParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 ImageDataArbitraryParameter::batch_size() const {
  return batch_size_;
}
inline void ImageDataArbitraryParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool ImageDataArbitraryParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageDataArbitraryParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageDataArbitraryParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 ImageDataArbitraryParameter::rand_skip() const {
  return rand_skip_;
}
inline void ImageDataArbitraryParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
}

// optional bool shuffle = 8 [default = false];
inline bool ImageDataArbitraryParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageDataArbitraryParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageDataArbitraryParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool ImageDataArbitraryParameter::shuffle() const {
  return shuffle_;
}
inline void ImageDataArbitraryParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
}

// optional uint32 crop_size = 5 [default = 0];
inline bool ImageDataArbitraryParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageDataArbitraryParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageDataArbitraryParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 ImageDataArbitraryParameter::crop_size() const {
  return crop_size_;
}
inline void ImageDataArbitraryParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
}

// optional bool mirror = 6 [default = false];
inline bool ImageDataArbitraryParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImageDataArbitraryParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImageDataArbitraryParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool ImageDataArbitraryParameter::mirror() const {
  return mirror_;
}
inline void ImageDataArbitraryParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
}

// repeated uint32 resize_type = 2;
inline int ImageDataArbitraryParameter::resize_type_size() const {
  return resize_type_.size();
}
inline void ImageDataArbitraryParameter::clear_resize_type() {
  resize_type_.Clear();
}
inline ::google::protobuf::uint32 ImageDataArbitraryParameter::resize_type(int index) const {
  return resize_type_.Get(index);
}
inline void ImageDataArbitraryParameter::set_resize_type(int index, ::google::protobuf::uint32 value) {
  resize_type_.Set(index, value);
}
inline void ImageDataArbitraryParameter::add_resize_type(::google::protobuf::uint32 value) {
  resize_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ImageDataArbitraryParameter::resize_type() const {
  return resize_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ImageDataArbitraryParameter::mutable_resize_type() {
  return &resize_type_;
}

// repeated uint32 data_height = 9;
inline int ImageDataArbitraryParameter::data_height_size() const {
  return data_height_.size();
}
inline void ImageDataArbitraryParameter::clear_data_height() {
  data_height_.Clear();
}
inline ::google::protobuf::uint32 ImageDataArbitraryParameter::data_height(int index) const {
  return data_height_.Get(index);
}
inline void ImageDataArbitraryParameter::set_data_height(int index, ::google::protobuf::uint32 value) {
  data_height_.Set(index, value);
}
inline void ImageDataArbitraryParameter::add_data_height(::google::protobuf::uint32 value) {
  data_height_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ImageDataArbitraryParameter::data_height() const {
  return data_height_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ImageDataArbitraryParameter::mutable_data_height() {
  return &data_height_;
}

// repeated uint32 data_width = 10;
inline int ImageDataArbitraryParameter::data_width_size() const {
  return data_width_.size();
}
inline void ImageDataArbitraryParameter::clear_data_width() {
  data_width_.Clear();
}
inline ::google::protobuf::uint32 ImageDataArbitraryParameter::data_width(int index) const {
  return data_width_.Get(index);
}
inline void ImageDataArbitraryParameter::set_data_width(int index, ::google::protobuf::uint32 value) {
  data_width_.Set(index, value);
}
inline void ImageDataArbitraryParameter::add_data_width(::google::protobuf::uint32 value) {
  data_width_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ImageDataArbitraryParameter::data_width() const {
  return data_width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ImageDataArbitraryParameter::mutable_data_width() {
  return &data_width_;
}

// repeated uint32 data_channels = 17;
inline int ImageDataArbitraryParameter::data_channels_size() const {
  return data_channels_.size();
}
inline void ImageDataArbitraryParameter::clear_data_channels() {
  data_channels_.Clear();
}
inline ::google::protobuf::uint32 ImageDataArbitraryParameter::data_channels(int index) const {
  return data_channels_.Get(index);
}
inline void ImageDataArbitraryParameter::set_data_channels(int index, ::google::protobuf::uint32 value) {
  data_channels_.Set(index, value);
}
inline void ImageDataArbitraryParameter::add_data_channels(::google::protobuf::uint32 value) {
  data_channels_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ImageDataArbitraryParameter::data_channels() const {
  return data_channels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ImageDataArbitraryParameter::mutable_data_channels() {
  return &data_channels_;
}

// repeated float data_scale = 22;
inline int ImageDataArbitraryParameter::data_scale_size() const {
  return data_scale_.size();
}
inline void ImageDataArbitraryParameter::clear_data_scale() {
  data_scale_.Clear();
}
inline float ImageDataArbitraryParameter::data_scale(int index) const {
  return data_scale_.Get(index);
}
inline void ImageDataArbitraryParameter::set_data_scale(int index, float value) {
  data_scale_.Set(index, value);
}
inline void ImageDataArbitraryParameter::add_data_scale(float value) {
  data_scale_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ImageDataArbitraryParameter::data_scale() const {
  return data_scale_;
}
inline ::google::protobuf::RepeatedField< float >*
ImageDataArbitraryParameter::mutable_data_scale() {
  return &data_scale_;
}

// repeated string mean_file = 3;
inline int ImageDataArbitraryParameter::mean_file_size() const {
  return mean_file_.size();
}
inline void ImageDataArbitraryParameter::clear_mean_file() {
  mean_file_.Clear();
}
inline const ::std::string& ImageDataArbitraryParameter::mean_file(int index) const {
  return mean_file_.Get(index);
}
inline ::std::string* ImageDataArbitraryParameter::mutable_mean_file(int index) {
  return mean_file_.Mutable(index);
}
inline void ImageDataArbitraryParameter::set_mean_file(int index, const ::std::string& value) {
  mean_file_.Mutable(index)->assign(value);
}
inline void ImageDataArbitraryParameter::set_mean_file(int index, const char* value) {
  mean_file_.Mutable(index)->assign(value);
}
inline void ImageDataArbitraryParameter::set_mean_file(int index, const char* value, size_t size) {
  mean_file_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageDataArbitraryParameter::add_mean_file() {
  return mean_file_.Add();
}
inline void ImageDataArbitraryParameter::add_mean_file(const ::std::string& value) {
  mean_file_.Add()->assign(value);
}
inline void ImageDataArbitraryParameter::add_mean_file(const char* value) {
  mean_file_.Add()->assign(value);
}
inline void ImageDataArbitraryParameter::add_mean_file(const char* value, size_t size) {
  mean_file_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImageDataArbitraryParameter::mean_file() const {
  return mean_file_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ImageDataArbitraryParameter::mutable_mean_file() {
  return &mean_file_;
}

// optional float rand_angle = 18 [default = 0];
inline bool ImageDataArbitraryParameter::has_rand_angle() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_rand_angle() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ImageDataArbitraryParameter::clear_has_rand_angle() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ImageDataArbitraryParameter::clear_rand_angle() {
  rand_angle_ = 0;
  clear_has_rand_angle();
}
inline float ImageDataArbitraryParameter::rand_angle() const {
  return rand_angle_;
}
inline void ImageDataArbitraryParameter::set_rand_angle(float value) {
  set_has_rand_angle();
  rand_angle_ = value;
}

// optional float rand_scale = 19 [default = 0];
inline bool ImageDataArbitraryParameter::has_rand_scale() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_rand_scale() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ImageDataArbitraryParameter::clear_has_rand_scale() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ImageDataArbitraryParameter::clear_rand_scale() {
  rand_scale_ = 0;
  clear_has_rand_scale();
}
inline float ImageDataArbitraryParameter::rand_scale() const {
  return rand_scale_;
}
inline void ImageDataArbitraryParameter::set_rand_scale(float value) {
  set_has_rand_scale();
  rand_scale_ = value;
}

// optional float rand_movex = 20 [default = 0];
inline bool ImageDataArbitraryParameter::has_rand_movex() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_rand_movex() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ImageDataArbitraryParameter::clear_has_rand_movex() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ImageDataArbitraryParameter::clear_rand_movex() {
  rand_movex_ = 0;
  clear_has_rand_movex();
}
inline float ImageDataArbitraryParameter::rand_movex() const {
  return rand_movex_;
}
inline void ImageDataArbitraryParameter::set_rand_movex(float value) {
  set_has_rand_movex();
  rand_movex_ = value;
}

// optional float rand_movey = 21 [default = 0];
inline bool ImageDataArbitraryParameter::has_rand_movey() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ImageDataArbitraryParameter::set_has_rand_movey() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ImageDataArbitraryParameter::clear_has_rand_movey() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ImageDataArbitraryParameter::clear_rand_movey() {
  rand_movey_ = 0;
  clear_has_rand_movey();
}
inline float ImageDataArbitraryParameter::rand_movey() const {
  return rand_movey_;
}
inline void ImageDataArbitraryParameter::set_rand_movey(float value) {
  set_has_rand_movey();
  rand_movey_ = value;
}

// -------------------------------------------------------------------

// ImageDataTextLabelParameter

// optional string source = 1;
inline bool ImageDataTextLabelParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageDataTextLabelParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageDataTextLabelParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageDataTextLabelParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& ImageDataTextLabelParameter::source() const {
  return *source_;
}
inline void ImageDataTextLabelParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void ImageDataTextLabelParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void ImageDataTextLabelParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageDataTextLabelParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* ImageDataTextLabelParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImageDataTextLabelParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool use_disturb = 14 [default = false];
inline bool ImageDataTextLabelParameter::has_use_disturb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageDataTextLabelParameter::set_has_use_disturb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageDataTextLabelParameter::clear_has_use_disturb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageDataTextLabelParameter::clear_use_disturb() {
  use_disturb_ = false;
  clear_has_use_disturb();
}
inline bool ImageDataTextLabelParameter::use_disturb() const {
  return use_disturb_;
}
inline void ImageDataTextLabelParameter::set_use_disturb(bool value) {
  set_has_use_disturb();
  use_disturb_ = value;
}

// optional bool useflip = 15 [default = false];
inline bool ImageDataTextLabelParameter::has_useflip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageDataTextLabelParameter::set_has_useflip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageDataTextLabelParameter::clear_has_useflip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageDataTextLabelParameter::clear_useflip() {
  useflip_ = false;
  clear_has_useflip();
}
inline bool ImageDataTextLabelParameter::useflip() const {
  return useflip_;
}
inline void ImageDataTextLabelParameter::set_useflip(bool value) {
  set_has_useflip();
  useflip_ = value;
}

// optional uint32 batch_size = 4;
inline bool ImageDataTextLabelParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageDataTextLabelParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageDataTextLabelParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageDataTextLabelParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 ImageDataTextLabelParameter::batch_size() const {
  return batch_size_;
}
inline void ImageDataTextLabelParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool ImageDataTextLabelParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageDataTextLabelParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageDataTextLabelParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageDataTextLabelParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 ImageDataTextLabelParameter::rand_skip() const {
  return rand_skip_;
}
inline void ImageDataTextLabelParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
}

// optional bool shuffle = 8 [default = false];
inline bool ImageDataTextLabelParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageDataTextLabelParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageDataTextLabelParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageDataTextLabelParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool ImageDataTextLabelParameter::shuffle() const {
  return shuffle_;
}
inline void ImageDataTextLabelParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
}

// optional uint32 crop_size = 5 [default = 0];
inline bool ImageDataTextLabelParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageDataTextLabelParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageDataTextLabelParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageDataTextLabelParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 ImageDataTextLabelParameter::crop_size() const {
  return crop_size_;
}
inline void ImageDataTextLabelParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
}

// optional bool mirror = 6 [default = false];
inline bool ImageDataTextLabelParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImageDataTextLabelParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImageDataTextLabelParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImageDataTextLabelParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool ImageDataTextLabelParameter::mirror() const {
  return mirror_;
}
inline void ImageDataTextLabelParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
}

// repeated float mean_value = 30;
inline int ImageDataTextLabelParameter::mean_value_size() const {
  return mean_value_.size();
}
inline void ImageDataTextLabelParameter::clear_mean_value() {
  mean_value_.Clear();
}
inline float ImageDataTextLabelParameter::mean_value(int index) const {
  return mean_value_.Get(index);
}
inline void ImageDataTextLabelParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
}
inline void ImageDataTextLabelParameter::add_mean_value(float value) {
  mean_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ImageDataTextLabelParameter::mean_value() const {
  return mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
ImageDataTextLabelParameter::mutable_mean_value() {
  return &mean_value_;
}

// repeated uint32 resize_type = 2;
inline int ImageDataTextLabelParameter::resize_type_size() const {
  return resize_type_.size();
}
inline void ImageDataTextLabelParameter::clear_resize_type() {
  resize_type_.Clear();
}
inline ::google::protobuf::uint32 ImageDataTextLabelParameter::resize_type(int index) const {
  return resize_type_.Get(index);
}
inline void ImageDataTextLabelParameter::set_resize_type(int index, ::google::protobuf::uint32 value) {
  resize_type_.Set(index, value);
}
inline void ImageDataTextLabelParameter::add_resize_type(::google::protobuf::uint32 value) {
  resize_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ImageDataTextLabelParameter::resize_type() const {
  return resize_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ImageDataTextLabelParameter::mutable_resize_type() {
  return &resize_type_;
}

// repeated uint32 data_height = 9;
inline int ImageDataTextLabelParameter::data_height_size() const {
  return data_height_.size();
}
inline void ImageDataTextLabelParameter::clear_data_height() {
  data_height_.Clear();
}
inline ::google::protobuf::uint32 ImageDataTextLabelParameter::data_height(int index) const {
  return data_height_.Get(index);
}
inline void ImageDataTextLabelParameter::set_data_height(int index, ::google::protobuf::uint32 value) {
  data_height_.Set(index, value);
}
inline void ImageDataTextLabelParameter::add_data_height(::google::protobuf::uint32 value) {
  data_height_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ImageDataTextLabelParameter::data_height() const {
  return data_height_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ImageDataTextLabelParameter::mutable_data_height() {
  return &data_height_;
}

// repeated uint32 data_width = 10;
inline int ImageDataTextLabelParameter::data_width_size() const {
  return data_width_.size();
}
inline void ImageDataTextLabelParameter::clear_data_width() {
  data_width_.Clear();
}
inline ::google::protobuf::uint32 ImageDataTextLabelParameter::data_width(int index) const {
  return data_width_.Get(index);
}
inline void ImageDataTextLabelParameter::set_data_width(int index, ::google::protobuf::uint32 value) {
  data_width_.Set(index, value);
}
inline void ImageDataTextLabelParameter::add_data_width(::google::protobuf::uint32 value) {
  data_width_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ImageDataTextLabelParameter::data_width() const {
  return data_width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ImageDataTextLabelParameter::mutable_data_width() {
  return &data_width_;
}

// repeated uint32 data_channels = 17;
inline int ImageDataTextLabelParameter::data_channels_size() const {
  return data_channels_.size();
}
inline void ImageDataTextLabelParameter::clear_data_channels() {
  data_channels_.Clear();
}
inline ::google::protobuf::uint32 ImageDataTextLabelParameter::data_channels(int index) const {
  return data_channels_.Get(index);
}
inline void ImageDataTextLabelParameter::set_data_channels(int index, ::google::protobuf::uint32 value) {
  data_channels_.Set(index, value);
}
inline void ImageDataTextLabelParameter::add_data_channels(::google::protobuf::uint32 value) {
  data_channels_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ImageDataTextLabelParameter::data_channels() const {
  return data_channels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ImageDataTextLabelParameter::mutable_data_channels() {
  return &data_channels_;
}

// repeated float data_scale = 22;
inline int ImageDataTextLabelParameter::data_scale_size() const {
  return data_scale_.size();
}
inline void ImageDataTextLabelParameter::clear_data_scale() {
  data_scale_.Clear();
}
inline float ImageDataTextLabelParameter::data_scale(int index) const {
  return data_scale_.Get(index);
}
inline void ImageDataTextLabelParameter::set_data_scale(int index, float value) {
  data_scale_.Set(index, value);
}
inline void ImageDataTextLabelParameter::add_data_scale(float value) {
  data_scale_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ImageDataTextLabelParameter::data_scale() const {
  return data_scale_;
}
inline ::google::protobuf::RepeatedField< float >*
ImageDataTextLabelParameter::mutable_data_scale() {
  return &data_scale_;
}

// repeated string mean_file = 3;
inline int ImageDataTextLabelParameter::mean_file_size() const {
  return mean_file_.size();
}
inline void ImageDataTextLabelParameter::clear_mean_file() {
  mean_file_.Clear();
}
inline const ::std::string& ImageDataTextLabelParameter::mean_file(int index) const {
  return mean_file_.Get(index);
}
inline ::std::string* ImageDataTextLabelParameter::mutable_mean_file(int index) {
  return mean_file_.Mutable(index);
}
inline void ImageDataTextLabelParameter::set_mean_file(int index, const ::std::string& value) {
  mean_file_.Mutable(index)->assign(value);
}
inline void ImageDataTextLabelParameter::set_mean_file(int index, const char* value) {
  mean_file_.Mutable(index)->assign(value);
}
inline void ImageDataTextLabelParameter::set_mean_file(int index, const char* value, size_t size) {
  mean_file_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageDataTextLabelParameter::add_mean_file() {
  return mean_file_.Add();
}
inline void ImageDataTextLabelParameter::add_mean_file(const ::std::string& value) {
  mean_file_.Add()->assign(value);
}
inline void ImageDataTextLabelParameter::add_mean_file(const char* value) {
  mean_file_.Add()->assign(value);
}
inline void ImageDataTextLabelParameter::add_mean_file(const char* value, size_t size) {
  mean_file_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImageDataTextLabelParameter::mean_file() const {
  return mean_file_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ImageDataTextLabelParameter::mutable_mean_file() {
  return &mean_file_;
}

// optional .caffe.ImageDataTextLabelParameter.TextLabelType textlabeltype = 23 [default = NONE];
inline bool ImageDataTextLabelParameter::has_textlabeltype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ImageDataTextLabelParameter::set_has_textlabeltype() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ImageDataTextLabelParameter::clear_has_textlabeltype() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ImageDataTextLabelParameter::clear_textlabeltype() {
  textlabeltype_ = 0;
  clear_has_textlabeltype();
}
inline ::caffe::ImageDataTextLabelParameter_TextLabelType ImageDataTextLabelParameter::textlabeltype() const {
  return static_cast< ::caffe::ImageDataTextLabelParameter_TextLabelType >(textlabeltype_);
}
inline void ImageDataTextLabelParameter::set_textlabeltype(::caffe::ImageDataTextLabelParameter_TextLabelType value) {
  assert(::caffe::ImageDataTextLabelParameter_TextLabelType_IsValid(value));
  set_has_textlabeltype();
  textlabeltype_ = value;
}

// optional uint32 textlabel_num_perpixel = 24 [default = 0];
inline bool ImageDataTextLabelParameter::has_textlabel_num_perpixel() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ImageDataTextLabelParameter::set_has_textlabel_num_perpixel() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ImageDataTextLabelParameter::clear_has_textlabel_num_perpixel() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ImageDataTextLabelParameter::clear_textlabel_num_perpixel() {
  textlabel_num_perpixel_ = 0u;
  clear_has_textlabel_num_perpixel();
}
inline ::google::protobuf::uint32 ImageDataTextLabelParameter::textlabel_num_perpixel() const {
  return textlabel_num_perpixel_;
}
inline void ImageDataTextLabelParameter::set_textlabel_num_perpixel(::google::protobuf::uint32 value) {
  set_has_textlabel_num_perpixel();
  textlabel_num_perpixel_ = value;
}

// optional bool save_topdata = 25 [default = false];
inline bool ImageDataTextLabelParameter::has_save_topdata() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ImageDataTextLabelParameter::set_has_save_topdata() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ImageDataTextLabelParameter::clear_has_save_topdata() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ImageDataTextLabelParameter::clear_save_topdata() {
  save_topdata_ = false;
  clear_has_save_topdata();
}
inline bool ImageDataTextLabelParameter::save_topdata() const {
  return save_topdata_;
}
inline void ImageDataTextLabelParameter::set_save_topdata(bool value) {
  set_has_save_topdata();
  save_topdata_ = value;
}

// optional uint32 textlabel_channels = 26 [default = 0];
inline bool ImageDataTextLabelParameter::has_textlabel_channels() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ImageDataTextLabelParameter::set_has_textlabel_channels() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ImageDataTextLabelParameter::clear_has_textlabel_channels() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ImageDataTextLabelParameter::clear_textlabel_channels() {
  textlabel_channels_ = 0u;
  clear_has_textlabel_channels();
}
inline ::google::protobuf::uint32 ImageDataTextLabelParameter::textlabel_channels() const {
  return textlabel_channels_;
}
inline void ImageDataTextLabelParameter::set_textlabel_channels(::google::protobuf::uint32 value) {
  set_has_textlabel_channels();
  textlabel_channels_ = value;
}

// optional uint32 textlabel_height = 28 [default = 0];
inline bool ImageDataTextLabelParameter::has_textlabel_height() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ImageDataTextLabelParameter::set_has_textlabel_height() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ImageDataTextLabelParameter::clear_has_textlabel_height() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ImageDataTextLabelParameter::clear_textlabel_height() {
  textlabel_height_ = 0u;
  clear_has_textlabel_height();
}
inline ::google::protobuf::uint32 ImageDataTextLabelParameter::textlabel_height() const {
  return textlabel_height_;
}
inline void ImageDataTextLabelParameter::set_textlabel_height(::google::protobuf::uint32 value) {
  set_has_textlabel_height();
  textlabel_height_ = value;
}

// optional uint32 textlabel_width = 29 [default = 0];
inline bool ImageDataTextLabelParameter::has_textlabel_width() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ImageDataTextLabelParameter::set_has_textlabel_width() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ImageDataTextLabelParameter::clear_has_textlabel_width() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ImageDataTextLabelParameter::clear_textlabel_width() {
  textlabel_width_ = 0u;
  clear_has_textlabel_width();
}
inline ::google::protobuf::uint32 ImageDataTextLabelParameter::textlabel_width() const {
  return textlabel_width_;
}
inline void ImageDataTextLabelParameter::set_textlabel_width(::google::protobuf::uint32 value) {
  set_has_textlabel_width();
  textlabel_width_ = value;
}

// optional float heatmap_radius = 27 [default = 0];
inline bool ImageDataTextLabelParameter::has_heatmap_radius() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ImageDataTextLabelParameter::set_has_heatmap_radius() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ImageDataTextLabelParameter::clear_has_heatmap_radius() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ImageDataTextLabelParameter::clear_heatmap_radius() {
  heatmap_radius_ = 0;
  clear_has_heatmap_radius();
}
inline float ImageDataTextLabelParameter::heatmap_radius() const {
  return heatmap_radius_;
}
inline void ImageDataTextLabelParameter::set_heatmap_radius(float value) {
  set_has_heatmap_radius();
  heatmap_radius_ = value;
}

// optional float rand_angle = 18 [default = 0];
inline bool ImageDataTextLabelParameter::has_rand_angle() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ImageDataTextLabelParameter::set_has_rand_angle() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ImageDataTextLabelParameter::clear_has_rand_angle() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ImageDataTextLabelParameter::clear_rand_angle() {
  rand_angle_ = 0;
  clear_has_rand_angle();
}
inline float ImageDataTextLabelParameter::rand_angle() const {
  return rand_angle_;
}
inline void ImageDataTextLabelParameter::set_rand_angle(float value) {
  set_has_rand_angle();
  rand_angle_ = value;
}

// optional float rand_scale = 19 [default = 0];
inline bool ImageDataTextLabelParameter::has_rand_scale() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ImageDataTextLabelParameter::set_has_rand_scale() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ImageDataTextLabelParameter::clear_has_rand_scale() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ImageDataTextLabelParameter::clear_rand_scale() {
  rand_scale_ = 0;
  clear_has_rand_scale();
}
inline float ImageDataTextLabelParameter::rand_scale() const {
  return rand_scale_;
}
inline void ImageDataTextLabelParameter::set_rand_scale(float value) {
  set_has_rand_scale();
  rand_scale_ = value;
}

// optional float rand_movex = 20 [default = 0];
inline bool ImageDataTextLabelParameter::has_rand_movex() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ImageDataTextLabelParameter::set_has_rand_movex() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ImageDataTextLabelParameter::clear_has_rand_movex() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ImageDataTextLabelParameter::clear_rand_movex() {
  rand_movex_ = 0;
  clear_has_rand_movex();
}
inline float ImageDataTextLabelParameter::rand_movex() const {
  return rand_movex_;
}
inline void ImageDataTextLabelParameter::set_rand_movex(float value) {
  set_has_rand_movex();
  rand_movex_ = value;
}

// optional float rand_movey = 21 [default = 0];
inline bool ImageDataTextLabelParameter::has_rand_movey() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ImageDataTextLabelParameter::set_has_rand_movey() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ImageDataTextLabelParameter::clear_has_rand_movey() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ImageDataTextLabelParameter::clear_rand_movey() {
  rand_movey_ = 0;
  clear_has_rand_movey();
}
inline float ImageDataTextLabelParameter::rand_movey() const {
  return rand_movey_;
}
inline void ImageDataTextLabelParameter::set_rand_movey(float value) {
  set_has_rand_movey();
  rand_movey_ = value;
}

// -------------------------------------------------------------------

// TransformationParameter

// optional float scale = 1 [default = 1];
inline bool TransformationParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransformationParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransformationParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransformationParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float TransformationParameter::scale() const {
  return scale_;
}
inline void TransformationParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// optional bool mirror = 2 [default = false];
inline bool TransformationParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransformationParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransformationParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransformationParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool TransformationParameter::mirror() const {
  return mirror_;
}
inline void TransformationParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
}

// optional uint32 crop_size = 3 [default = 0];
inline bool TransformationParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransformationParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransformationParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransformationParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 TransformationParameter::crop_size() const {
  return crop_size_;
}
inline void TransformationParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
}

// optional string mean_file = 4;
inline bool TransformationParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransformationParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransformationParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransformationParameter::clear_mean_file() {
  if (mean_file_ != &::google::protobuf::internal::kEmptyString) {
    mean_file_->clear();
  }
  clear_has_mean_file();
}
inline const ::std::string& TransformationParameter::mean_file() const {
  return *mean_file_;
}
inline void TransformationParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
}
inline void TransformationParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
}
inline void TransformationParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransformationParameter::mutable_mean_file() {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  return mean_file_;
}
inline ::std::string* TransformationParameter::release_mean_file() {
  clear_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mean_file_;
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransformationParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file_ != &::google::protobuf::internal::kEmptyString) {
    delete mean_file_;
  }
  if (mean_file) {
    set_has_mean_file();
    mean_file_ = mean_file;
  } else {
    clear_has_mean_file();
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated float mean_value = 5;
inline int TransformationParameter::mean_value_size() const {
  return mean_value_.size();
}
inline void TransformationParameter::clear_mean_value() {
  mean_value_.Clear();
}
inline float TransformationParameter::mean_value(int index) const {
  return mean_value_.Get(index);
}
inline void TransformationParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
}
inline void TransformationParameter::add_mean_value(float value) {
  mean_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
TransformationParameter::mean_value() const {
  return mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
TransformationParameter::mutable_mean_value() {
  return &mean_value_;
}

// optional bool force_color = 6 [default = false];
inline bool TransformationParameter::has_force_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TransformationParameter::set_has_force_color() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TransformationParameter::clear_has_force_color() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TransformationParameter::clear_force_color() {
  force_color_ = false;
  clear_has_force_color();
}
inline bool TransformationParameter::force_color() const {
  return force_color_;
}
inline void TransformationParameter::set_force_color(bool value) {
  set_has_force_color();
  force_color_ = value;
}

// optional bool force_gray = 7 [default = false];
inline bool TransformationParameter::has_force_gray() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TransformationParameter::set_has_force_gray() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TransformationParameter::clear_has_force_gray() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TransformationParameter::clear_force_gray() {
  force_gray_ = false;
  clear_has_force_gray();
}
inline bool TransformationParameter::force_gray() const {
  return force_gray_;
}
inline void TransformationParameter::set_force_gray(bool value) {
  set_has_force_gray();
  force_gray_ = value;
}

// -------------------------------------------------------------------

// LossParameter

// optional int32 ignore_label = 1;
inline bool LossParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LossParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LossParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LossParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 LossParameter::ignore_label() const {
  return ignore_label_;
}
inline void LossParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
}

// optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
inline bool LossParameter::has_normalization() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LossParameter::set_has_normalization() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LossParameter::clear_has_normalization() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LossParameter::clear_normalization() {
  normalization_ = 1;
  clear_has_normalization();
}
inline ::caffe::LossParameter_NormalizationMode LossParameter::normalization() const {
  return static_cast< ::caffe::LossParameter_NormalizationMode >(normalization_);
}
inline void LossParameter::set_normalization(::caffe::LossParameter_NormalizationMode value) {
  assert(::caffe::LossParameter_NormalizationMode_IsValid(value));
  set_has_normalization();
  normalization_ = value;
}

// optional bool normalize = 2;
inline bool LossParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LossParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LossParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LossParameter::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
inline bool LossParameter::normalize() const {
  return normalize_;
}
inline void LossParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
}

// -------------------------------------------------------------------

// AccuracyParameter

// optional uint32 top_k = 1 [default = 1];
inline bool AccuracyParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccuracyParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccuracyParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccuracyParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 AccuracyParameter::top_k() const {
  return top_k_;
}
inline void AccuracyParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
}

// optional int32 axis = 2 [default = 1];
inline bool AccuracyParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccuracyParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccuracyParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccuracyParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 AccuracyParameter::axis() const {
  return axis_;
}
inline void AccuracyParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
}

// optional int32 ignore_label = 3;
inline bool AccuracyParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccuracyParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccuracyParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccuracyParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 AccuracyParameter::ignore_label() const {
  return ignore_label_;
}
inline void AccuracyParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
}

// -------------------------------------------------------------------

// ArgMaxParameter

// optional bool out_max_val = 1 [default = false];
inline bool ArgMaxParameter::has_out_max_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArgMaxParameter::set_has_out_max_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArgMaxParameter::clear_has_out_max_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArgMaxParameter::clear_out_max_val() {
  out_max_val_ = false;
  clear_has_out_max_val();
}
inline bool ArgMaxParameter::out_max_val() const {
  return out_max_val_;
}
inline void ArgMaxParameter::set_out_max_val(bool value) {
  set_has_out_max_val();
  out_max_val_ = value;
}

// optional uint32 top_k = 2 [default = 1];
inline bool ArgMaxParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArgMaxParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArgMaxParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArgMaxParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 ArgMaxParameter::top_k() const {
  return top_k_;
}
inline void ArgMaxParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
}

// optional int32 axis = 3;
inline bool ArgMaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArgMaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArgMaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArgMaxParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ArgMaxParameter::axis() const {
  return axis_;
}
inline void ArgMaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
}

// -------------------------------------------------------------------

// ConcatParameter

// optional int32 axis = 2 [default = 1];
inline bool ConcatParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConcatParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConcatParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConcatParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ConcatParameter::axis() const {
  return axis_;
}
inline void ConcatParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
}

// optional uint32 concat_dim = 1 [default = 1];
inline bool ConcatParameter::has_concat_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConcatParameter::set_has_concat_dim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConcatParameter::clear_has_concat_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConcatParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
inline ::google::protobuf::uint32 ConcatParameter::concat_dim() const {
  return concat_dim_;
}
inline void ConcatParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
}

// -------------------------------------------------------------------

// BatchNormParameter

// optional bool use_global_stats = 1;
inline bool BatchNormParameter::has_use_global_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchNormParameter::set_has_use_global_stats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchNormParameter::clear_has_use_global_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchNormParameter::clear_use_global_stats() {
  use_global_stats_ = false;
  clear_has_use_global_stats();
}
inline bool BatchNormParameter::use_global_stats() const {
  return use_global_stats_;
}
inline void BatchNormParameter::set_use_global_stats(bool value) {
  set_has_use_global_stats();
  use_global_stats_ = value;
}

// optional float moving_average_fraction = 2 [default = 0.999];
inline bool BatchNormParameter::has_moving_average_fraction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchNormParameter::set_has_moving_average_fraction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchNormParameter::clear_has_moving_average_fraction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchNormParameter::clear_moving_average_fraction() {
  moving_average_fraction_ = 0.999f;
  clear_has_moving_average_fraction();
}
inline float BatchNormParameter::moving_average_fraction() const {
  return moving_average_fraction_;
}
inline void BatchNormParameter::set_moving_average_fraction(float value) {
  set_has_moving_average_fraction();
  moving_average_fraction_ = value;
}

// optional float eps = 3 [default = 1e-05];
inline bool BatchNormParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatchNormParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BatchNormParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BatchNormParameter::clear_eps() {
  eps_ = 1e-05f;
  clear_has_eps();
}
inline float BatchNormParameter::eps() const {
  return eps_;
}
inline void BatchNormParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
}

// -------------------------------------------------------------------

// BiasParameter

// optional int32 axis = 1 [default = 1];
inline bool BiasParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BiasParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BiasParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BiasParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 BiasParameter::axis() const {
  return axis_;
}
inline void BiasParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
}

// optional int32 num_axes = 2 [default = 1];
inline bool BiasParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BiasParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BiasParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BiasParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 BiasParameter::num_axes() const {
  return num_axes_;
}
inline void BiasParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
}

// optional .caffe.FillerParameter filler = 3;
inline bool BiasParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BiasParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BiasParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BiasParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::caffe::FillerParameter& BiasParameter::filler() const {
  return filler_ != NULL ? *filler_ : *default_instance_->filler_;
}
inline ::caffe::FillerParameter* BiasParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) filler_ = new ::caffe::FillerParameter;
  return filler_;
}
inline ::caffe::FillerParameter* BiasParameter::release_filler() {
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void BiasParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
}

// -------------------------------------------------------------------

// ContrastiveLossParameter

// optional float margin = 1 [default = 1];
inline bool ContrastiveLossParameter::has_margin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContrastiveLossParameter::set_has_margin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContrastiveLossParameter::clear_has_margin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContrastiveLossParameter::clear_margin() {
  margin_ = 1;
  clear_has_margin();
}
inline float ContrastiveLossParameter::margin() const {
  return margin_;
}
inline void ContrastiveLossParameter::set_margin(float value) {
  set_has_margin();
  margin_ = value;
}

// optional bool legacy_version = 2 [default = false];
inline bool ContrastiveLossParameter::has_legacy_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContrastiveLossParameter::set_has_legacy_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContrastiveLossParameter::clear_has_legacy_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContrastiveLossParameter::clear_legacy_version() {
  legacy_version_ = false;
  clear_has_legacy_version();
}
inline bool ContrastiveLossParameter::legacy_version() const {
  return legacy_version_;
}
inline void ContrastiveLossParameter::set_legacy_version(bool value) {
  set_has_legacy_version();
  legacy_version_ = value;
}

// -------------------------------------------------------------------

// ConvolutionParameter

// optional uint32 num_output = 1;
inline bool ConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 ConvolutionParameter::num_output() const {
  return num_output_;
}
inline void ConvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
}

// optional bool bias_term = 2 [default = true];
inline bool ConvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool ConvolutionParameter::bias_term() const {
  return bias_term_;
}
inline void ConvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
}

// repeated uint32 pad = 3;
inline int ConvolutionParameter::pad_size() const {
  return pad_.size();
}
inline void ConvolutionParameter::clear_pad() {
  pad_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad(int index) const {
  return pad_.Get(index);
}
inline void ConvolutionParameter::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
}
inline void ConvolutionParameter::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::pad() const {
  return pad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_pad() {
  return &pad_;
}

// repeated uint32 kernel_size = 4;
inline int ConvolutionParameter::kernel_size_size() const {
  return kernel_size_.size();
}
inline void ConvolutionParameter::clear_kernel_size() {
  kernel_size_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_size(int index) const {
  return kernel_size_.Get(index);
}
inline void ConvolutionParameter::set_kernel_size(int index, ::google::protobuf::uint32 value) {
  kernel_size_.Set(index, value);
}
inline void ConvolutionParameter::add_kernel_size(::google::protobuf::uint32 value) {
  kernel_size_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::kernel_size() const {
  return kernel_size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_kernel_size() {
  return &kernel_size_;
}

// repeated uint32 stride = 6;
inline int ConvolutionParameter::stride_size() const {
  return stride_.size();
}
inline void ConvolutionParameter::clear_stride() {
  stride_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride(int index) const {
  return stride_.Get(index);
}
inline void ConvolutionParameter::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
}
inline void ConvolutionParameter::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::stride() const {
  return stride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_stride() {
  return &stride_;
}

// repeated uint32 dilation = 18;
inline int ConvolutionParameter::dilation_size() const {
  return dilation_.size();
}
inline void ConvolutionParameter::clear_dilation() {
  dilation_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::dilation(int index) const {
  return dilation_.Get(index);
}
inline void ConvolutionParameter::set_dilation(int index, ::google::protobuf::uint32 value) {
  dilation_.Set(index, value);
}
inline void ConvolutionParameter::add_dilation(::google::protobuf::uint32 value) {
  dilation_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::dilation() const {
  return dilation_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_dilation() {
  return &dilation_;
}

// optional uint32 pad_h = 9 [default = 0];
inline bool ConvolutionParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConvolutionParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConvolutionParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConvolutionParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_h() const {
  return pad_h_;
}
inline void ConvolutionParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
}

// optional uint32 pad_w = 10 [default = 0];
inline bool ConvolutionParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConvolutionParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConvolutionParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConvolutionParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_w() const {
  return pad_w_;
}
inline void ConvolutionParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
}

// optional uint32 kernel_h = 11;
inline bool ConvolutionParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConvolutionParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConvolutionParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_h() const {
  return kernel_h_;
}
inline void ConvolutionParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
}

// optional uint32 kernel_w = 12;
inline bool ConvolutionParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConvolutionParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConvolutionParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_w() const {
  return kernel_w_;
}
inline void ConvolutionParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
}

// optional uint32 stride_h = 13;
inline bool ConvolutionParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConvolutionParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConvolutionParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConvolutionParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_h() const {
  return stride_h_;
}
inline void ConvolutionParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
}

// optional uint32 stride_w = 14;
inline bool ConvolutionParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConvolutionParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConvolutionParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConvolutionParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_w() const {
  return stride_w_;
}
inline void ConvolutionParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
}

// optional uint32 group = 5 [default = 1];
inline bool ConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 ConvolutionParameter::group() const {
  return group_;
}
inline void ConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
}

// optional .caffe.FillerParameter weight_filler = 7;
inline bool ConvolutionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConvolutionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConvolutionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& ConvolutionParameter::weight_filler() const {
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* ConvolutionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::caffe::FillerParameter;
  return weight_filler_;
}
inline ::caffe::FillerParameter* ConvolutionParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void ConvolutionParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
}

// optional .caffe.FillerParameter bias_filler = 8;
inline bool ConvolutionParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConvolutionParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConvolutionParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConvolutionParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& ConvolutionParameter::bias_filler() const {
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* ConvolutionParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::caffe::FillerParameter;
  return bias_filler_;
}
inline ::caffe::FillerParameter* ConvolutionParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void ConvolutionParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
}

// optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
inline bool ConvolutionParameter::has_engine() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConvolutionParameter::set_has_engine() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConvolutionParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConvolutionParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::ConvolutionParameter_Engine ConvolutionParameter::engine() const {
  return static_cast< ::caffe::ConvolutionParameter_Engine >(engine_);
}
inline void ConvolutionParameter::set_engine(::caffe::ConvolutionParameter_Engine value) {
  assert(::caffe::ConvolutionParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
}

// optional int32 axis = 16 [default = 1];
inline bool ConvolutionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConvolutionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConvolutionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConvolutionParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ConvolutionParameter::axis() const {
  return axis_;
}
inline void ConvolutionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
}

// optional bool force_nd_im2col = 17 [default = false];
inline bool ConvolutionParameter::has_force_nd_im2col() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConvolutionParameter::set_has_force_nd_im2col() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConvolutionParameter::clear_has_force_nd_im2col() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConvolutionParameter::clear_force_nd_im2col() {
  force_nd_im2col_ = false;
  clear_has_force_nd_im2col();
}
inline bool ConvolutionParameter::force_nd_im2col() const {
  return force_nd_im2col_;
}
inline void ConvolutionParameter::set_force_nd_im2col(bool value) {
  set_has_force_nd_im2col();
  force_nd_im2col_ = value;
}

// -------------------------------------------------------------------

// CropParameter

// optional int32 axis = 1 [default = 2];
inline bool CropParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CropParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CropParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CropParameter::clear_axis() {
  axis_ = 2;
  clear_has_axis();
}
inline ::google::protobuf::int32 CropParameter::axis() const {
  return axis_;
}
inline void CropParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
}

// repeated uint32 offset = 2;
inline int CropParameter::offset_size() const {
  return offset_.size();
}
inline void CropParameter::clear_offset() {
  offset_.Clear();
}
inline ::google::protobuf::uint32 CropParameter::offset(int index) const {
  return offset_.Get(index);
}
inline void CropParameter::set_offset(int index, ::google::protobuf::uint32 value) {
  offset_.Set(index, value);
}
inline void CropParameter::add_offset(::google::protobuf::uint32 value) {
  offset_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CropParameter::offset() const {
  return offset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CropParameter::mutable_offset() {
  return &offset_;
}

// -------------------------------------------------------------------

// DataParameter

// optional string source = 1;
inline bool DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& DataParameter::source() const {
  return *source_;
}
inline void DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void DataParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* DataParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 batch_size = 4;
inline bool DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 DataParameter::batch_size() const {
  return batch_size_;
}
inline void DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool DataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 DataParameter::rand_skip() const {
  return rand_skip_;
}
inline void DataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
}

// optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
inline bool DataParameter::has_backend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataParameter::set_has_backend() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataParameter::clear_has_backend() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataParameter::clear_backend() {
  backend_ = 0;
  clear_has_backend();
}
inline ::caffe::DataParameter_DB DataParameter::backend() const {
  return static_cast< ::caffe::DataParameter_DB >(backend_);
}
inline void DataParameter::set_backend(::caffe::DataParameter_DB value) {
  assert(::caffe::DataParameter_DB_IsValid(value));
  set_has_backend();
  backend_ = value;
}

// optional float scale = 2 [default = 1];
inline bool DataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float DataParameter::scale() const {
  return scale_;
}
inline void DataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// optional string mean_file = 3;
inline bool DataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataParameter::clear_mean_file() {
  if (mean_file_ != &::google::protobuf::internal::kEmptyString) {
    mean_file_->clear();
  }
  clear_has_mean_file();
}
inline const ::std::string& DataParameter::mean_file() const {
  return *mean_file_;
}
inline void DataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
}
inline void DataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
}
inline void DataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataParameter::mutable_mean_file() {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  return mean_file_;
}
inline ::std::string* DataParameter::release_mean_file() {
  clear_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mean_file_;
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file_ != &::google::protobuf::internal::kEmptyString) {
    delete mean_file_;
  }
  if (mean_file) {
    set_has_mean_file();
    mean_file_ = mean_file;
  } else {
    clear_has_mean_file();
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 crop_size = 5 [default = 0];
inline bool DataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 DataParameter::crop_size() const {
  return crop_size_;
}
inline void DataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
}

// optional bool mirror = 6 [default = false];
inline bool DataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool DataParameter::mirror() const {
  return mirror_;
}
inline void DataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
}

// optional bool force_encoded_color = 9 [default = false];
inline bool DataParameter::has_force_encoded_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DataParameter::set_has_force_encoded_color() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DataParameter::clear_has_force_encoded_color() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DataParameter::clear_force_encoded_color() {
  force_encoded_color_ = false;
  clear_has_force_encoded_color();
}
inline bool DataParameter::force_encoded_color() const {
  return force_encoded_color_;
}
inline void DataParameter::set_force_encoded_color(bool value) {
  set_has_force_encoded_color();
  force_encoded_color_ = value;
}

// optional uint32 prefetch = 10 [default = 4];
inline bool DataParameter::has_prefetch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DataParameter::set_has_prefetch() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DataParameter::clear_has_prefetch() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DataParameter::clear_prefetch() {
  prefetch_ = 4u;
  clear_has_prefetch();
}
inline ::google::protobuf::uint32 DataParameter::prefetch() const {
  return prefetch_;
}
inline void DataParameter::set_prefetch(::google::protobuf::uint32 value) {
  set_has_prefetch();
  prefetch_ = value;
}

// -------------------------------------------------------------------

// DropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];
inline bool DropoutParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropoutParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropoutParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropoutParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float DropoutParameter::dropout_ratio() const {
  return dropout_ratio_;
}
inline void DropoutParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
}

// -------------------------------------------------------------------

// DummyDataParameter

// repeated .caffe.FillerParameter data_filler = 1;
inline int DummyDataParameter::data_filler_size() const {
  return data_filler_.size();
}
inline void DummyDataParameter::clear_data_filler() {
  data_filler_.Clear();
}
inline const ::caffe::FillerParameter& DummyDataParameter::data_filler(int index) const {
  return data_filler_.Get(index);
}
inline ::caffe::FillerParameter* DummyDataParameter::mutable_data_filler(int index) {
  return data_filler_.Mutable(index);
}
inline ::caffe::FillerParameter* DummyDataParameter::add_data_filler() {
  return data_filler_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >&
DummyDataParameter::data_filler() const {
  return data_filler_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >*
DummyDataParameter::mutable_data_filler() {
  return &data_filler_;
}

// repeated .caffe.BlobShape shape = 6;
inline int DummyDataParameter::shape_size() const {
  return shape_.size();
}
inline void DummyDataParameter::clear_shape() {
  shape_.Clear();
}
inline const ::caffe::BlobShape& DummyDataParameter::shape(int index) const {
  return shape_.Get(index);
}
inline ::caffe::BlobShape* DummyDataParameter::mutable_shape(int index) {
  return shape_.Mutable(index);
}
inline ::caffe::BlobShape* DummyDataParameter::add_shape() {
  return shape_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
DummyDataParameter::shape() const {
  return shape_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
DummyDataParameter::mutable_shape() {
  return &shape_;
}

// repeated uint32 num = 2;
inline int DummyDataParameter::num_size() const {
  return num_.size();
}
inline void DummyDataParameter::clear_num() {
  num_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::num(int index) const {
  return num_.Get(index);
}
inline void DummyDataParameter::set_num(int index, ::google::protobuf::uint32 value) {
  num_.Set(index, value);
}
inline void DummyDataParameter::add_num(::google::protobuf::uint32 value) {
  num_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::num() const {
  return num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_num() {
  return &num_;
}

// repeated uint32 channels = 3;
inline int DummyDataParameter::channels_size() const {
  return channels_.size();
}
inline void DummyDataParameter::clear_channels() {
  channels_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::channels(int index) const {
  return channels_.Get(index);
}
inline void DummyDataParameter::set_channels(int index, ::google::protobuf::uint32 value) {
  channels_.Set(index, value);
}
inline void DummyDataParameter::add_channels(::google::protobuf::uint32 value) {
  channels_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::channels() const {
  return channels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_channels() {
  return &channels_;
}

// repeated uint32 height = 4;
inline int DummyDataParameter::height_size() const {
  return height_.size();
}
inline void DummyDataParameter::clear_height() {
  height_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::height(int index) const {
  return height_.Get(index);
}
inline void DummyDataParameter::set_height(int index, ::google::protobuf::uint32 value) {
  height_.Set(index, value);
}
inline void DummyDataParameter::add_height(::google::protobuf::uint32 value) {
  height_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::height() const {
  return height_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_height() {
  return &height_;
}

// repeated uint32 width = 5;
inline int DummyDataParameter::width_size() const {
  return width_.size();
}
inline void DummyDataParameter::clear_width() {
  width_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::width(int index) const {
  return width_.Get(index);
}
inline void DummyDataParameter::set_width(int index, ::google::protobuf::uint32 value) {
  width_.Set(index, value);
}
inline void DummyDataParameter::add_width(::google::protobuf::uint32 value) {
  width_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::width() const {
  return width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_width() {
  return &width_;
}

// -------------------------------------------------------------------

// EltwiseParameter

// optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
inline bool EltwiseParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EltwiseParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EltwiseParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EltwiseParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::caffe::EltwiseParameter_EltwiseOp EltwiseParameter::operation() const {
  return static_cast< ::caffe::EltwiseParameter_EltwiseOp >(operation_);
}
inline void EltwiseParameter::set_operation(::caffe::EltwiseParameter_EltwiseOp value) {
  assert(::caffe::EltwiseParameter_EltwiseOp_IsValid(value));
  set_has_operation();
  operation_ = value;
}

// repeated float coeff = 2;
inline int EltwiseParameter::coeff_size() const {
  return coeff_.size();
}
inline void EltwiseParameter::clear_coeff() {
  coeff_.Clear();
}
inline float EltwiseParameter::coeff(int index) const {
  return coeff_.Get(index);
}
inline void EltwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
}
inline void EltwiseParameter::add_coeff(float value) {
  coeff_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
EltwiseParameter::coeff() const {
  return coeff_;
}
inline ::google::protobuf::RepeatedField< float >*
EltwiseParameter::mutable_coeff() {
  return &coeff_;
}

// optional bool stable_prod_grad = 3 [default = true];
inline bool EltwiseParameter::has_stable_prod_grad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EltwiseParameter::set_has_stable_prod_grad() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EltwiseParameter::clear_has_stable_prod_grad() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EltwiseParameter::clear_stable_prod_grad() {
  stable_prod_grad_ = true;
  clear_has_stable_prod_grad();
}
inline bool EltwiseParameter::stable_prod_grad() const {
  return stable_prod_grad_;
}
inline void EltwiseParameter::set_stable_prod_grad(bool value) {
  set_has_stable_prod_grad();
  stable_prod_grad_ = value;
}

// -------------------------------------------------------------------

// ELUParameter

// optional float alpha = 1 [default = 1];
inline bool ELUParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ELUParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ELUParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ELUParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float ELUParameter::alpha() const {
  return alpha_;
}
inline void ELUParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
}

// -------------------------------------------------------------------

// EmbedParameter

// optional uint32 num_output = 1;
inline bool EmbedParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmbedParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmbedParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmbedParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 EmbedParameter::num_output() const {
  return num_output_;
}
inline void EmbedParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
}

// optional uint32 input_dim = 2;
inline bool EmbedParameter::has_input_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmbedParameter::set_has_input_dim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmbedParameter::clear_has_input_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmbedParameter::clear_input_dim() {
  input_dim_ = 0u;
  clear_has_input_dim();
}
inline ::google::protobuf::uint32 EmbedParameter::input_dim() const {
  return input_dim_;
}
inline void EmbedParameter::set_input_dim(::google::protobuf::uint32 value) {
  set_has_input_dim();
  input_dim_ = value;
}

// optional bool bias_term = 3 [default = true];
inline bool EmbedParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmbedParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmbedParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmbedParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool EmbedParameter::bias_term() const {
  return bias_term_;
}
inline void EmbedParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
}

// optional .caffe.FillerParameter weight_filler = 4;
inline bool EmbedParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmbedParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmbedParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmbedParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& EmbedParameter::weight_filler() const {
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* EmbedParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::caffe::FillerParameter;
  return weight_filler_;
}
inline ::caffe::FillerParameter* EmbedParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void EmbedParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
}

// optional .caffe.FillerParameter bias_filler = 5;
inline bool EmbedParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EmbedParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EmbedParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EmbedParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& EmbedParameter::bias_filler() const {
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* EmbedParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::caffe::FillerParameter;
  return bias_filler_;
}
inline ::caffe::FillerParameter* EmbedParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void EmbedParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
}

// -------------------------------------------------------------------

// ExpParameter

// optional float base = 1 [default = -1];
inline bool ExpParameter::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExpParameter::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExpParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExpParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
inline float ExpParameter::base() const {
  return base_;
}
inline void ExpParameter::set_base(float value) {
  set_has_base();
  base_ = value;
}

// optional float scale = 2 [default = 1];
inline bool ExpParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExpParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExpParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExpParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float ExpParameter::scale() const {
  return scale_;
}
inline void ExpParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// optional float shift = 3 [default = 0];
inline bool ExpParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExpParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExpParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExpParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float ExpParameter::shift() const {
  return shift_;
}
inline void ExpParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
}

// -------------------------------------------------------------------

// FlattenParameter

// optional int32 axis = 1 [default = 1];
inline bool FlattenParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlattenParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlattenParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlattenParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 FlattenParameter::axis() const {
  return axis_;
}
inline void FlattenParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
}

// optional int32 end_axis = 2 [default = -1];
inline bool FlattenParameter::has_end_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlattenParameter::set_has_end_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlattenParameter::clear_has_end_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlattenParameter::clear_end_axis() {
  end_axis_ = -1;
  clear_has_end_axis();
}
inline ::google::protobuf::int32 FlattenParameter::end_axis() const {
  return end_axis_;
}
inline void FlattenParameter::set_end_axis(::google::protobuf::int32 value) {
  set_has_end_axis();
  end_axis_ = value;
}

// -------------------------------------------------------------------

// HDF5DataParameter

// optional string source = 1;
inline bool HDF5DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDF5DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HDF5DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HDF5DataParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& HDF5DataParameter::source() const {
  return *source_;
}
inline void HDF5DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void HDF5DataParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void HDF5DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HDF5DataParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* HDF5DataParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HDF5DataParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 batch_size = 2;
inline bool HDF5DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HDF5DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HDF5DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HDF5DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 HDF5DataParameter::batch_size() const {
  return batch_size_;
}
inline void HDF5DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
}

// optional bool shuffle = 3 [default = false];
inline bool HDF5DataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HDF5DataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HDF5DataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HDF5DataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool HDF5DataParameter::shuffle() const {
  return shuffle_;
}
inline void HDF5DataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
}

// -------------------------------------------------------------------

// HDF5OutputParameter

// optional string file_name = 1;
inline bool HDF5OutputParameter::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDF5OutputParameter::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HDF5OutputParameter::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HDF5OutputParameter::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& HDF5OutputParameter::file_name() const {
  return *file_name_;
}
inline void HDF5OutputParameter::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void HDF5OutputParameter::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void HDF5OutputParameter::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HDF5OutputParameter::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}
inline ::std::string* HDF5OutputParameter::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HDF5OutputParameter::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// HingeLossParameter

// optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
inline bool HingeLossParameter::has_norm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HingeLossParameter::set_has_norm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HingeLossParameter::clear_has_norm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HingeLossParameter::clear_norm() {
  norm_ = 1;
  clear_has_norm();
}
inline ::caffe::HingeLossParameter_Norm HingeLossParameter::norm() const {
  return static_cast< ::caffe::HingeLossParameter_Norm >(norm_);
}
inline void HingeLossParameter::set_norm(::caffe::HingeLossParameter_Norm value) {
  assert(::caffe::HingeLossParameter_Norm_IsValid(value));
  set_has_norm();
  norm_ = value;
}

// -------------------------------------------------------------------

// ImageDataParameter

// optional string source = 1;
inline bool ImageDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageDataParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& ImageDataParameter::source() const {
  return *source_;
}
inline void ImageDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void ImageDataParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void ImageDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageDataParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* ImageDataParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImageDataParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 batch_size = 4 [default = 1];
inline bool ImageDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageDataParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 ImageDataParameter::batch_size() const {
  return batch_size_;
}
inline void ImageDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool ImageDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 ImageDataParameter::rand_skip() const {
  return rand_skip_;
}
inline void ImageDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
}

// optional bool shuffle = 8 [default = false];
inline bool ImageDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool ImageDataParameter::shuffle() const {
  return shuffle_;
}
inline void ImageDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
}

// optional uint32 new_height = 9 [default = 0];
inline bool ImageDataParameter::has_new_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageDataParameter::set_has_new_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageDataParameter::clear_has_new_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageDataParameter::clear_new_height() {
  new_height_ = 0u;
  clear_has_new_height();
}
inline ::google::protobuf::uint32 ImageDataParameter::new_height() const {
  return new_height_;
}
inline void ImageDataParameter::set_new_height(::google::protobuf::uint32 value) {
  set_has_new_height();
  new_height_ = value;
}

// optional uint32 new_width = 10 [default = 0];
inline bool ImageDataParameter::has_new_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageDataParameter::set_has_new_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageDataParameter::clear_has_new_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageDataParameter::clear_new_width() {
  new_width_ = 0u;
  clear_has_new_width();
}
inline ::google::protobuf::uint32 ImageDataParameter::new_width() const {
  return new_width_;
}
inline void ImageDataParameter::set_new_width(::google::protobuf::uint32 value) {
  set_has_new_width();
  new_width_ = value;
}

// optional bool is_color = 11 [default = true];
inline bool ImageDataParameter::has_is_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageDataParameter::set_has_is_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageDataParameter::clear_has_is_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageDataParameter::clear_is_color() {
  is_color_ = true;
  clear_has_is_color();
}
inline bool ImageDataParameter::is_color() const {
  return is_color_;
}
inline void ImageDataParameter::set_is_color(bool value) {
  set_has_is_color();
  is_color_ = value;
}

// optional float scale = 2 [default = 1];
inline bool ImageDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImageDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImageDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImageDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float ImageDataParameter::scale() const {
  return scale_;
}
inline void ImageDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// optional string mean_file = 3;
inline bool ImageDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ImageDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ImageDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ImageDataParameter::clear_mean_file() {
  if (mean_file_ != &::google::protobuf::internal::kEmptyString) {
    mean_file_->clear();
  }
  clear_has_mean_file();
}
inline const ::std::string& ImageDataParameter::mean_file() const {
  return *mean_file_;
}
inline void ImageDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
}
inline void ImageDataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
}
inline void ImageDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageDataParameter::mutable_mean_file() {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  return mean_file_;
}
inline ::std::string* ImageDataParameter::release_mean_file() {
  clear_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mean_file_;
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImageDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file_ != &::google::protobuf::internal::kEmptyString) {
    delete mean_file_;
  }
  if (mean_file) {
    set_has_mean_file();
    mean_file_ = mean_file;
  } else {
    clear_has_mean_file();
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 crop_size = 5 [default = 0];
inline bool ImageDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ImageDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ImageDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ImageDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 ImageDataParameter::crop_size() const {
  return crop_size_;
}
inline void ImageDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
}

// optional bool mirror = 6 [default = false];
inline bool ImageDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ImageDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ImageDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ImageDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool ImageDataParameter::mirror() const {
  return mirror_;
}
inline void ImageDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
}

// optional string root_folder = 12 [default = ""];
inline bool ImageDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ImageDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ImageDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ImageDataParameter::clear_root_folder() {
  if (root_folder_ != &::google::protobuf::internal::kEmptyString) {
    root_folder_->clear();
  }
  clear_has_root_folder();
}
inline const ::std::string& ImageDataParameter::root_folder() const {
  return *root_folder_;
}
inline void ImageDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::kEmptyString) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(value);
}
inline void ImageDataParameter::set_root_folder(const char* value) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::kEmptyString) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(value);
}
inline void ImageDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::kEmptyString) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageDataParameter::mutable_root_folder() {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::kEmptyString) {
    root_folder_ = new ::std::string;
  }
  return root_folder_;
}
inline ::std::string* ImageDataParameter::release_root_folder() {
  clear_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = root_folder_;
    root_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImageDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder_ != &::google::protobuf::internal::kEmptyString) {
    delete root_folder_;
  }
  if (root_folder) {
    set_has_root_folder();
    root_folder_ = root_folder;
  } else {
    clear_has_root_folder();
    root_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// InfogainLossParameter

// optional string source = 1;
inline bool InfogainLossParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfogainLossParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfogainLossParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfogainLossParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& InfogainLossParameter::source() const {
  return *source_;
}
inline void InfogainLossParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void InfogainLossParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void InfogainLossParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InfogainLossParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* InfogainLossParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InfogainLossParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// InnerProductParameter

// optional uint32 num_output = 1;
inline bool InnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 InnerProductParameter::num_output() const {
  return num_output_;
}
inline void InnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
}

// optional bool bias_term = 2 [default = true];
inline bool InnerProductParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerProductParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerProductParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerProductParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool InnerProductParameter::bias_term() const {
  return bias_term_;
}
inline void InnerProductParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
}

// optional .caffe.FillerParameter weight_filler = 3;
inline bool InnerProductParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InnerProductParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InnerProductParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& InnerProductParameter::weight_filler() const {
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* InnerProductParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::caffe::FillerParameter;
  return weight_filler_;
}
inline ::caffe::FillerParameter* InnerProductParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void InnerProductParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
}

// optional .caffe.FillerParameter bias_filler = 4;
inline bool InnerProductParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InnerProductParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InnerProductParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InnerProductParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& InnerProductParameter::bias_filler() const {
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* InnerProductParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::caffe::FillerParameter;
  return bias_filler_;
}
inline ::caffe::FillerParameter* InnerProductParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void InnerProductParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
}

// optional int32 axis = 5 [default = 1];
inline bool InnerProductParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InnerProductParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InnerProductParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InnerProductParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 InnerProductParameter::axis() const {
  return axis_;
}
inline void InnerProductParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
}

// optional bool transpose = 6 [default = false];
inline bool InnerProductParameter::has_transpose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InnerProductParameter::set_has_transpose() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InnerProductParameter::clear_has_transpose() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InnerProductParameter::clear_transpose() {
  transpose_ = false;
  clear_has_transpose();
}
inline bool InnerProductParameter::transpose() const {
  return transpose_;
}
inline void InnerProductParameter::set_transpose(bool value) {
  set_has_transpose();
  transpose_ = value;
}

// -------------------------------------------------------------------

// InputParameter

// repeated .caffe.BlobShape shape = 1;
inline int InputParameter::shape_size() const {
  return shape_.size();
}
inline void InputParameter::clear_shape() {
  shape_.Clear();
}
inline const ::caffe::BlobShape& InputParameter::shape(int index) const {
  return shape_.Get(index);
}
inline ::caffe::BlobShape* InputParameter::mutable_shape(int index) {
  return shape_.Mutable(index);
}
inline ::caffe::BlobShape* InputParameter::add_shape() {
  return shape_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
InputParameter::shape() const {
  return shape_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
InputParameter::mutable_shape() {
  return &shape_;
}

// -------------------------------------------------------------------

// LogParameter

// optional float base = 1 [default = -1];
inline bool LogParameter::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogParameter::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
inline float LogParameter::base() const {
  return base_;
}
inline void LogParameter::set_base(float value) {
  set_has_base();
  base_ = value;
}

// optional float scale = 2 [default = 1];
inline bool LogParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float LogParameter::scale() const {
  return scale_;
}
inline void LogParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// optional float shift = 3 [default = 0];
inline bool LogParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float LogParameter::shift() const {
  return shift_;
}
inline void LogParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
}

// -------------------------------------------------------------------

// LRNParameter

// optional uint32 local_size = 1 [default = 5];
inline bool LRNParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LRNParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LRNParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LRNParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 LRNParameter::local_size() const {
  return local_size_;
}
inline void LRNParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
}

// optional float alpha = 2 [default = 1];
inline bool LRNParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LRNParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LRNParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LRNParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float LRNParameter::alpha() const {
  return alpha_;
}
inline void LRNParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
}

// optional float beta = 3 [default = 0.75];
inline bool LRNParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LRNParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LRNParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LRNParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float LRNParameter::beta() const {
  return beta_;
}
inline void LRNParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
}

// optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
inline bool LRNParameter::has_norm_region() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LRNParameter::set_has_norm_region() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LRNParameter::clear_has_norm_region() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LRNParameter::clear_norm_region() {
  norm_region_ = 0;
  clear_has_norm_region();
}
inline ::caffe::LRNParameter_NormRegion LRNParameter::norm_region() const {
  return static_cast< ::caffe::LRNParameter_NormRegion >(norm_region_);
}
inline void LRNParameter::set_norm_region(::caffe::LRNParameter_NormRegion value) {
  assert(::caffe::LRNParameter_NormRegion_IsValid(value));
  set_has_norm_region();
  norm_region_ = value;
}

// optional float k = 5 [default = 1];
inline bool LRNParameter::has_k() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LRNParameter::set_has_k() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LRNParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LRNParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float LRNParameter::k() const {
  return k_;
}
inline void LRNParameter::set_k(float value) {
  set_has_k();
  k_ = value;
}

// optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
inline bool LRNParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LRNParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LRNParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LRNParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::LRNParameter_Engine LRNParameter::engine() const {
  return static_cast< ::caffe::LRNParameter_Engine >(engine_);
}
inline void LRNParameter::set_engine(::caffe::LRNParameter_Engine value) {
  assert(::caffe::LRNParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
}

// -------------------------------------------------------------------

// MemoryDataParameter

// optional uint32 batch_size = 1;
inline bool MemoryDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemoryDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemoryDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 MemoryDataParameter::batch_size() const {
  return batch_size_;
}
inline void MemoryDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
}

// optional uint32 channels = 2;
inline bool MemoryDataParameter::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryDataParameter::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemoryDataParameter::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemoryDataParameter::clear_channels() {
  channels_ = 0u;
  clear_has_channels();
}
inline ::google::protobuf::uint32 MemoryDataParameter::channels() const {
  return channels_;
}
inline void MemoryDataParameter::set_channels(::google::protobuf::uint32 value) {
  set_has_channels();
  channels_ = value;
}

// optional uint32 height = 3;
inline bool MemoryDataParameter::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemoryDataParameter::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MemoryDataParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MemoryDataParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 MemoryDataParameter::height() const {
  return height_;
}
inline void MemoryDataParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
}

// optional uint32 width = 4;
inline bool MemoryDataParameter::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemoryDataParameter::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MemoryDataParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MemoryDataParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 MemoryDataParameter::width() const {
  return width_;
}
inline void MemoryDataParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
}

// -------------------------------------------------------------------

// MVNParameter

// optional bool normalize_variance = 1 [default = true];
inline bool MVNParameter::has_normalize_variance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVNParameter::set_has_normalize_variance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVNParameter::clear_has_normalize_variance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVNParameter::clear_normalize_variance() {
  normalize_variance_ = true;
  clear_has_normalize_variance();
}
inline bool MVNParameter::normalize_variance() const {
  return normalize_variance_;
}
inline void MVNParameter::set_normalize_variance(bool value) {
  set_has_normalize_variance();
  normalize_variance_ = value;
}

// optional bool across_channels = 2 [default = false];
inline bool MVNParameter::has_across_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVNParameter::set_has_across_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVNParameter::clear_has_across_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVNParameter::clear_across_channels() {
  across_channels_ = false;
  clear_has_across_channels();
}
inline bool MVNParameter::across_channels() const {
  return across_channels_;
}
inline void MVNParameter::set_across_channels(bool value) {
  set_has_across_channels();
  across_channels_ = value;
}

// optional float eps = 3 [default = 1e-09];
inline bool MVNParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MVNParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MVNParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MVNParameter::clear_eps() {
  eps_ = 1e-09f;
  clear_has_eps();
}
inline float MVNParameter::eps() const {
  return eps_;
}
inline void MVNParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
}

// -------------------------------------------------------------------

// PoolingParameter

// optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
inline bool PoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoolingParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::PoolingParameter_PoolMethod PoolingParameter::pool() const {
  return static_cast< ::caffe::PoolingParameter_PoolMethod >(pool_);
}
inline void PoolingParameter::set_pool(::caffe::PoolingParameter_PoolMethod value) {
  assert(::caffe::PoolingParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
}

// optional uint32 pad = 4 [default = 0];
inline bool PoolingParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoolingParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoolingParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoolingParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 PoolingParameter::pad() const {
  return pad_;
}
inline void PoolingParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
}

// optional uint32 pad_h = 9 [default = 0];
inline bool PoolingParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoolingParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoolingParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoolingParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_h() const {
  return pad_h_;
}
inline void PoolingParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
}

// optional uint32 pad_w = 10 [default = 0];
inline bool PoolingParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoolingParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoolingParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoolingParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_w() const {
  return pad_w_;
}
inline void PoolingParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
}

// optional uint32 kernel_size = 2;
inline bool PoolingParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PoolingParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PoolingParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PoolingParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_size() const {
  return kernel_size_;
}
inline void PoolingParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
}

// optional uint32 kernel_h = 5;
inline bool PoolingParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PoolingParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PoolingParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PoolingParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_h() const {
  return kernel_h_;
}
inline void PoolingParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
}

// optional uint32 kernel_w = 6;
inline bool PoolingParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PoolingParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PoolingParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PoolingParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_w() const {
  return kernel_w_;
}
inline void PoolingParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
}

// optional uint32 stride = 3 [default = 1];
inline bool PoolingParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PoolingParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PoolingParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PoolingParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 PoolingParameter::stride() const {
  return stride_;
}
inline void PoolingParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
}

// optional uint32 stride_h = 7;
inline bool PoolingParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PoolingParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PoolingParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PoolingParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_h() const {
  return stride_h_;
}
inline void PoolingParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
}

// optional uint32 stride_w = 8;
inline bool PoolingParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PoolingParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PoolingParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PoolingParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_w() const {
  return stride_w_;
}
inline void PoolingParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
}

// optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
inline bool PoolingParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PoolingParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PoolingParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PoolingParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::PoolingParameter_Engine PoolingParameter::engine() const {
  return static_cast< ::caffe::PoolingParameter_Engine >(engine_);
}
inline void PoolingParameter::set_engine(::caffe::PoolingParameter_Engine value) {
  assert(::caffe::PoolingParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
}

// optional bool global_pooling = 12 [default = false];
inline bool PoolingParameter::has_global_pooling() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PoolingParameter::set_has_global_pooling() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PoolingParameter::clear_has_global_pooling() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PoolingParameter::clear_global_pooling() {
  global_pooling_ = false;
  clear_has_global_pooling();
}
inline bool PoolingParameter::global_pooling() const {
  return global_pooling_;
}
inline void PoolingParameter::set_global_pooling(bool value) {
  set_has_global_pooling();
  global_pooling_ = value;
}

// -------------------------------------------------------------------

// PowerParameter

// optional float power = 1 [default = 1];
inline bool PowerParameter::has_power() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerParameter::set_has_power() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PowerParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PowerParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline float PowerParameter::power() const {
  return power_;
}
inline void PowerParameter::set_power(float value) {
  set_has_power();
  power_ = value;
}

// optional float scale = 2 [default = 1];
inline bool PowerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PowerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PowerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float PowerParameter::scale() const {
  return scale_;
}
inline void PowerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// optional float shift = 3 [default = 0];
inline bool PowerParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PowerParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PowerParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PowerParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float PowerParameter::shift() const {
  return shift_;
}
inline void PowerParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
}

// -------------------------------------------------------------------

// PythonParameter

// optional string module = 1;
inline bool PythonParameter::has_module() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PythonParameter::set_has_module() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PythonParameter::clear_has_module() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PythonParameter::clear_module() {
  if (module_ != &::google::protobuf::internal::kEmptyString) {
    module_->clear();
  }
  clear_has_module();
}
inline const ::std::string& PythonParameter::module() const {
  return *module_;
}
inline void PythonParameter::set_module(const ::std::string& value) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  module_->assign(value);
}
inline void PythonParameter::set_module(const char* value) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  module_->assign(value);
}
inline void PythonParameter::set_module(const char* value, size_t size) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  module_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PythonParameter::mutable_module() {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  return module_;
}
inline ::std::string* PythonParameter::release_module() {
  clear_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = module_;
    module_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PythonParameter::set_allocated_module(::std::string* module) {
  if (module_ != &::google::protobuf::internal::kEmptyString) {
    delete module_;
  }
  if (module) {
    set_has_module();
    module_ = module;
  } else {
    clear_has_module();
    module_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string layer = 2;
inline bool PythonParameter::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PythonParameter::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PythonParameter::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PythonParameter::clear_layer() {
  if (layer_ != &::google::protobuf::internal::kEmptyString) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& PythonParameter::layer() const {
  return *layer_;
}
inline void PythonParameter::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::kEmptyString) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
}
inline void PythonParameter::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::kEmptyString) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
}
inline void PythonParameter::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::kEmptyString) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PythonParameter::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::kEmptyString) {
    layer_ = new ::std::string;
  }
  return layer_;
}
inline ::std::string* PythonParameter::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PythonParameter::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::kEmptyString) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string param_str = 3 [default = ""];
inline bool PythonParameter::has_param_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PythonParameter::set_has_param_str() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PythonParameter::clear_has_param_str() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PythonParameter::clear_param_str() {
  if (param_str_ != &::google::protobuf::internal::kEmptyString) {
    param_str_->clear();
  }
  clear_has_param_str();
}
inline const ::std::string& PythonParameter::param_str() const {
  return *param_str_;
}
inline void PythonParameter::set_param_str(const ::std::string& value) {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::kEmptyString) {
    param_str_ = new ::std::string;
  }
  param_str_->assign(value);
}
inline void PythonParameter::set_param_str(const char* value) {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::kEmptyString) {
    param_str_ = new ::std::string;
  }
  param_str_->assign(value);
}
inline void PythonParameter::set_param_str(const char* value, size_t size) {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::kEmptyString) {
    param_str_ = new ::std::string;
  }
  param_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PythonParameter::mutable_param_str() {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::kEmptyString) {
    param_str_ = new ::std::string;
  }
  return param_str_;
}
inline ::std::string* PythonParameter::release_param_str() {
  clear_has_param_str();
  if (param_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param_str_;
    param_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PythonParameter::set_allocated_param_str(::std::string* param_str) {
  if (param_str_ != &::google::protobuf::internal::kEmptyString) {
    delete param_str_;
  }
  if (param_str) {
    set_has_param_str();
    param_str_ = param_str;
  } else {
    clear_has_param_str();
    param_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool share_in_parallel = 4 [default = false];
inline bool PythonParameter::has_share_in_parallel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PythonParameter::set_has_share_in_parallel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PythonParameter::clear_has_share_in_parallel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PythonParameter::clear_share_in_parallel() {
  share_in_parallel_ = false;
  clear_has_share_in_parallel();
}
inline bool PythonParameter::share_in_parallel() const {
  return share_in_parallel_;
}
inline void PythonParameter::set_share_in_parallel(bool value) {
  set_has_share_in_parallel();
  share_in_parallel_ = value;
}

// -------------------------------------------------------------------

// ReductionParameter

// optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
inline bool ReductionParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReductionParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReductionParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReductionParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::caffe::ReductionParameter_ReductionOp ReductionParameter::operation() const {
  return static_cast< ::caffe::ReductionParameter_ReductionOp >(operation_);
}
inline void ReductionParameter::set_operation(::caffe::ReductionParameter_ReductionOp value) {
  assert(::caffe::ReductionParameter_ReductionOp_IsValid(value));
  set_has_operation();
  operation_ = value;
}

// optional int32 axis = 2 [default = 0];
inline bool ReductionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReductionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReductionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReductionParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ReductionParameter::axis() const {
  return axis_;
}
inline void ReductionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
}

// optional float coeff = 3 [default = 1];
inline bool ReductionParameter::has_coeff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReductionParameter::set_has_coeff() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReductionParameter::clear_has_coeff() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReductionParameter::clear_coeff() {
  coeff_ = 1;
  clear_has_coeff();
}
inline float ReductionParameter::coeff() const {
  return coeff_;
}
inline void ReductionParameter::set_coeff(float value) {
  set_has_coeff();
  coeff_ = value;
}

// -------------------------------------------------------------------

// ReLUParameter

// optional float negative_slope = 1 [default = 0];
inline bool ReLUParameter::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReLUParameter::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReLUParameter::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReLUParameter::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
inline float ReLUParameter::negative_slope() const {
  return negative_slope_;
}
inline void ReLUParameter::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
}

// optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
inline bool ReLUParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReLUParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReLUParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReLUParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::ReLUParameter_Engine ReLUParameter::engine() const {
  return static_cast< ::caffe::ReLUParameter_Engine >(engine_);
}
inline void ReLUParameter::set_engine(::caffe::ReLUParameter_Engine value) {
  assert(::caffe::ReLUParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
}

// -------------------------------------------------------------------

// ReshapeParameter

// optional .caffe.BlobShape shape = 1;
inline bool ReshapeParameter::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReshapeParameter::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReshapeParameter::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReshapeParameter::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
inline const ::caffe::BlobShape& ReshapeParameter::shape() const {
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::caffe::BlobShape* ReshapeParameter::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::caffe::BlobShape;
  return shape_;
}
inline ::caffe::BlobShape* ReshapeParameter::release_shape() {
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void ReshapeParameter::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
}

// optional int32 axis = 2 [default = 0];
inline bool ReshapeParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReshapeParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReshapeParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReshapeParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ReshapeParameter::axis() const {
  return axis_;
}
inline void ReshapeParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
}

// optional int32 num_axes = 3 [default = -1];
inline bool ReshapeParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReshapeParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReshapeParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReshapeParameter::clear_num_axes() {
  num_axes_ = -1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 ReshapeParameter::num_axes() const {
  return num_axes_;
}
inline void ReshapeParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
}

// -------------------------------------------------------------------

// ScaleParameter

// optional int32 axis = 1 [default = 1];
inline bool ScaleParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScaleParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScaleParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScaleParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ScaleParameter::axis() const {
  return axis_;
}
inline void ScaleParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
}

// optional int32 num_axes = 2 [default = 1];
inline bool ScaleParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScaleParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScaleParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScaleParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 ScaleParameter::num_axes() const {
  return num_axes_;
}
inline void ScaleParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
}

// optional .caffe.FillerParameter filler = 3;
inline bool ScaleParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScaleParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScaleParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScaleParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::caffe::FillerParameter& ScaleParameter::filler() const {
  return filler_ != NULL ? *filler_ : *default_instance_->filler_;
}
inline ::caffe::FillerParameter* ScaleParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) filler_ = new ::caffe::FillerParameter;
  return filler_;
}
inline ::caffe::FillerParameter* ScaleParameter::release_filler() {
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void ScaleParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
}

// optional bool bias_term = 4 [default = false];
inline bool ScaleParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScaleParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScaleParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScaleParameter::clear_bias_term() {
  bias_term_ = false;
  clear_has_bias_term();
}
inline bool ScaleParameter::bias_term() const {
  return bias_term_;
}
inline void ScaleParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
}

// optional .caffe.FillerParameter bias_filler = 5;
inline bool ScaleParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScaleParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScaleParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScaleParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& ScaleParameter::bias_filler() const {
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* ScaleParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::caffe::FillerParameter;
  return bias_filler_;
}
inline ::caffe::FillerParameter* ScaleParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void ScaleParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
}

// -------------------------------------------------------------------

// SigmoidParameter

// optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
inline bool SigmoidParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SigmoidParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SigmoidParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SigmoidParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SigmoidParameter_Engine SigmoidParameter::engine() const {
  return static_cast< ::caffe::SigmoidParameter_Engine >(engine_);
}
inline void SigmoidParameter::set_engine(::caffe::SigmoidParameter_Engine value) {
  assert(::caffe::SigmoidParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
}

// -------------------------------------------------------------------

// SliceParameter

// optional int32 axis = 3 [default = 1];
inline bool SliceParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SliceParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SliceParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SliceParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 SliceParameter::axis() const {
  return axis_;
}
inline void SliceParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
}

// repeated uint32 slice_point = 2;
inline int SliceParameter::slice_point_size() const {
  return slice_point_.size();
}
inline void SliceParameter::clear_slice_point() {
  slice_point_.Clear();
}
inline ::google::protobuf::uint32 SliceParameter::slice_point(int index) const {
  return slice_point_.Get(index);
}
inline void SliceParameter::set_slice_point(int index, ::google::protobuf::uint32 value) {
  slice_point_.Set(index, value);
}
inline void SliceParameter::add_slice_point(::google::protobuf::uint32 value) {
  slice_point_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SliceParameter::slice_point() const {
  return slice_point_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SliceParameter::mutable_slice_point() {
  return &slice_point_;
}

// optional uint32 slice_dim = 1 [default = 1];
inline bool SliceParameter::has_slice_dim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SliceParameter::set_has_slice_dim() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SliceParameter::clear_has_slice_dim() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SliceParameter::clear_slice_dim() {
  slice_dim_ = 1u;
  clear_has_slice_dim();
}
inline ::google::protobuf::uint32 SliceParameter::slice_dim() const {
  return slice_dim_;
}
inline void SliceParameter::set_slice_dim(::google::protobuf::uint32 value) {
  set_has_slice_dim();
  slice_dim_ = value;
}

// -------------------------------------------------------------------

// SoftmaxParameter

// optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
inline bool SoftmaxParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftmaxParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoftmaxParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoftmaxParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SoftmaxParameter_Engine SoftmaxParameter::engine() const {
  return static_cast< ::caffe::SoftmaxParameter_Engine >(engine_);
}
inline void SoftmaxParameter::set_engine(::caffe::SoftmaxParameter_Engine value) {
  assert(::caffe::SoftmaxParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
}

// optional int32 axis = 2 [default = 1];
inline bool SoftmaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoftmaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoftmaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoftmaxParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 SoftmaxParameter::axis() const {
  return axis_;
}
inline void SoftmaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
}

// -------------------------------------------------------------------

// TanHParameter

// optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
inline bool TanHParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TanHParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TanHParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TanHParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::TanHParameter_Engine TanHParameter::engine() const {
  return static_cast< ::caffe::TanHParameter_Engine >(engine_);
}
inline void TanHParameter::set_engine(::caffe::TanHParameter_Engine value) {
  assert(::caffe::TanHParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
}

// -------------------------------------------------------------------

// TileParameter

// optional int32 axis = 1 [default = 1];
inline bool TileParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TileParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TileParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TileParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 TileParameter::axis() const {
  return axis_;
}
inline void TileParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
}

// optional int32 tiles = 2;
inline bool TileParameter::has_tiles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TileParameter::set_has_tiles() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TileParameter::clear_has_tiles() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TileParameter::clear_tiles() {
  tiles_ = 0;
  clear_has_tiles();
}
inline ::google::protobuf::int32 TileParameter::tiles() const {
  return tiles_;
}
inline void TileParameter::set_tiles(::google::protobuf::int32 value) {
  set_has_tiles();
  tiles_ = value;
}

// -------------------------------------------------------------------

// ThresholdParameter

// optional float threshold = 1 [default = 0];
inline bool ThresholdParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThresholdParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThresholdParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThresholdParameter::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline float ThresholdParameter::threshold() const {
  return threshold_;
}
inline void ThresholdParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
}

// -------------------------------------------------------------------

// WindowDataParameter

// optional string source = 1;
inline bool WindowDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WindowDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WindowDataParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& WindowDataParameter::source() const {
  return *source_;
}
inline void WindowDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void WindowDataParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void WindowDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WindowDataParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* WindowDataParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WindowDataParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float scale = 2 [default = 1];
inline bool WindowDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WindowDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WindowDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float WindowDataParameter::scale() const {
  return scale_;
}
inline void WindowDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// optional string mean_file = 3;
inline bool WindowDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WindowDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WindowDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WindowDataParameter::clear_mean_file() {
  if (mean_file_ != &::google::protobuf::internal::kEmptyString) {
    mean_file_->clear();
  }
  clear_has_mean_file();
}
inline const ::std::string& WindowDataParameter::mean_file() const {
  return *mean_file_;
}
inline void WindowDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
}
inline void WindowDataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
}
inline void WindowDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WindowDataParameter::mutable_mean_file() {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  return mean_file_;
}
inline ::std::string* WindowDataParameter::release_mean_file() {
  clear_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mean_file_;
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WindowDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file_ != &::google::protobuf::internal::kEmptyString) {
    delete mean_file_;
  }
  if (mean_file) {
    set_has_mean_file();
    mean_file_ = mean_file;
  } else {
    clear_has_mean_file();
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 batch_size = 4;
inline bool WindowDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WindowDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WindowDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WindowDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 WindowDataParameter::batch_size() const {
  return batch_size_;
}
inline void WindowDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
}

// optional uint32 crop_size = 5 [default = 0];
inline bool WindowDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WindowDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WindowDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WindowDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 WindowDataParameter::crop_size() const {
  return crop_size_;
}
inline void WindowDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
}

// optional bool mirror = 6 [default = false];
inline bool WindowDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WindowDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WindowDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WindowDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool WindowDataParameter::mirror() const {
  return mirror_;
}
inline void WindowDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
}

// optional float fg_threshold = 7 [default = 0.5];
inline bool WindowDataParameter::has_fg_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WindowDataParameter::set_has_fg_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WindowDataParameter::clear_has_fg_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WindowDataParameter::clear_fg_threshold() {
  fg_threshold_ = 0.5f;
  clear_has_fg_threshold();
}
inline float WindowDataParameter::fg_threshold() const {
  return fg_threshold_;
}
inline void WindowDataParameter::set_fg_threshold(float value) {
  set_has_fg_threshold();
  fg_threshold_ = value;
}

// optional float bg_threshold = 8 [default = 0.5];
inline bool WindowDataParameter::has_bg_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WindowDataParameter::set_has_bg_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WindowDataParameter::clear_has_bg_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WindowDataParameter::clear_bg_threshold() {
  bg_threshold_ = 0.5f;
  clear_has_bg_threshold();
}
inline float WindowDataParameter::bg_threshold() const {
  return bg_threshold_;
}
inline void WindowDataParameter::set_bg_threshold(float value) {
  set_has_bg_threshold();
  bg_threshold_ = value;
}

// optional float fg_fraction = 9 [default = 0.25];
inline bool WindowDataParameter::has_fg_fraction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WindowDataParameter::set_has_fg_fraction() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WindowDataParameter::clear_has_fg_fraction() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WindowDataParameter::clear_fg_fraction() {
  fg_fraction_ = 0.25f;
  clear_has_fg_fraction();
}
inline float WindowDataParameter::fg_fraction() const {
  return fg_fraction_;
}
inline void WindowDataParameter::set_fg_fraction(float value) {
  set_has_fg_fraction();
  fg_fraction_ = value;
}

// optional uint32 context_pad = 10 [default = 0];
inline bool WindowDataParameter::has_context_pad() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WindowDataParameter::set_has_context_pad() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WindowDataParameter::clear_has_context_pad() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WindowDataParameter::clear_context_pad() {
  context_pad_ = 0u;
  clear_has_context_pad();
}
inline ::google::protobuf::uint32 WindowDataParameter::context_pad() const {
  return context_pad_;
}
inline void WindowDataParameter::set_context_pad(::google::protobuf::uint32 value) {
  set_has_context_pad();
  context_pad_ = value;
}

// optional string crop_mode = 11 [default = "warp"];
inline bool WindowDataParameter::has_crop_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WindowDataParameter::set_has_crop_mode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WindowDataParameter::clear_has_crop_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WindowDataParameter::clear_crop_mode() {
  if (crop_mode_ != _default_crop_mode_) {
    crop_mode_->assign(*_default_crop_mode_);
  }
  clear_has_crop_mode();
}
inline const ::std::string& WindowDataParameter::crop_mode() const {
  return *crop_mode_;
}
inline void WindowDataParameter::set_crop_mode(const ::std::string& value) {
  set_has_crop_mode();
  if (crop_mode_ == _default_crop_mode_) {
    crop_mode_ = new ::std::string;
  }
  crop_mode_->assign(value);
}
inline void WindowDataParameter::set_crop_mode(const char* value) {
  set_has_crop_mode();
  if (crop_mode_ == _default_crop_mode_) {
    crop_mode_ = new ::std::string;
  }
  crop_mode_->assign(value);
}
inline void WindowDataParameter::set_crop_mode(const char* value, size_t size) {
  set_has_crop_mode();
  if (crop_mode_ == _default_crop_mode_) {
    crop_mode_ = new ::std::string;
  }
  crop_mode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WindowDataParameter::mutable_crop_mode() {
  set_has_crop_mode();
  if (crop_mode_ == _default_crop_mode_) {
    crop_mode_ = new ::std::string(*_default_crop_mode_);
  }
  return crop_mode_;
}
inline ::std::string* WindowDataParameter::release_crop_mode() {
  clear_has_crop_mode();
  if (crop_mode_ == _default_crop_mode_) {
    return NULL;
  } else {
    ::std::string* temp = crop_mode_;
    crop_mode_ = const_cast< ::std::string*>(_default_crop_mode_);
    return temp;
  }
}
inline void WindowDataParameter::set_allocated_crop_mode(::std::string* crop_mode) {
  if (crop_mode_ != _default_crop_mode_) {
    delete crop_mode_;
  }
  if (crop_mode) {
    set_has_crop_mode();
    crop_mode_ = crop_mode;
  } else {
    clear_has_crop_mode();
    crop_mode_ = const_cast< ::std::string*>(_default_crop_mode_);
  }
}

// optional bool cache_images = 12 [default = false];
inline bool WindowDataParameter::has_cache_images() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WindowDataParameter::set_has_cache_images() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WindowDataParameter::clear_has_cache_images() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WindowDataParameter::clear_cache_images() {
  cache_images_ = false;
  clear_has_cache_images();
}
inline bool WindowDataParameter::cache_images() const {
  return cache_images_;
}
inline void WindowDataParameter::set_cache_images(bool value) {
  set_has_cache_images();
  cache_images_ = value;
}

// optional string root_folder = 13 [default = ""];
inline bool WindowDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WindowDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00001000u;
}
inline void WindowDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void WindowDataParameter::clear_root_folder() {
  if (root_folder_ != &::google::protobuf::internal::kEmptyString) {
    root_folder_->clear();
  }
  clear_has_root_folder();
}
inline const ::std::string& WindowDataParameter::root_folder() const {
  return *root_folder_;
}
inline void WindowDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::kEmptyString) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(value);
}
inline void WindowDataParameter::set_root_folder(const char* value) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::kEmptyString) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(value);
}
inline void WindowDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::kEmptyString) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WindowDataParameter::mutable_root_folder() {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::kEmptyString) {
    root_folder_ = new ::std::string;
  }
  return root_folder_;
}
inline ::std::string* WindowDataParameter::release_root_folder() {
  clear_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = root_folder_;
    root_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WindowDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder_ != &::google::protobuf::internal::kEmptyString) {
    delete root_folder_;
  }
  if (root_folder) {
    set_has_root_folder();
    root_folder_ = root_folder;
  } else {
    clear_has_root_folder();
    root_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SPPParameter

// optional uint32 pyramid_height = 1;
inline bool SPPParameter::has_pyramid_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPPParameter::set_has_pyramid_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPPParameter::clear_has_pyramid_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPPParameter::clear_pyramid_height() {
  pyramid_height_ = 0u;
  clear_has_pyramid_height();
}
inline ::google::protobuf::uint32 SPPParameter::pyramid_height() const {
  return pyramid_height_;
}
inline void SPPParameter::set_pyramid_height(::google::protobuf::uint32 value) {
  set_has_pyramid_height();
  pyramid_height_ = value;
}

// optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
inline bool SPPParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SPPParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SPPParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SPPParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::SPPParameter_PoolMethod SPPParameter::pool() const {
  return static_cast< ::caffe::SPPParameter_PoolMethod >(pool_);
}
inline void SPPParameter::set_pool(::caffe::SPPParameter_PoolMethod value) {
  assert(::caffe::SPPParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
}

// optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
inline bool SPPParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SPPParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SPPParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SPPParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SPPParameter_Engine SPPParameter::engine() const {
  return static_cast< ::caffe::SPPParameter_Engine >(engine_);
}
inline void SPPParameter::set_engine(::caffe::SPPParameter_Engine value) {
  assert(::caffe::SPPParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
}

// -------------------------------------------------------------------

// V1LayerParameter

// repeated string bottom = 2;
inline int V1LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void V1LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& V1LayerParameter::bottom(int index) const {
  return bottom_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_bottom(int index) {
  return bottom_.Mutable(index);
}
inline void V1LayerParameter::set_bottom(int index, const ::std::string& value) {
  bottom_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* V1LayerParameter::add_bottom() {
  return bottom_.Add();
}
inline void V1LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
}
inline void V1LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
}
inline void V1LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::bottom() const {
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_bottom() {
  return &bottom_;
}

// repeated string top = 3;
inline int V1LayerParameter::top_size() const {
  return top_.size();
}
inline void V1LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& V1LayerParameter::top(int index) const {
  return top_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_top(int index) {
  return top_.Mutable(index);
}
inline void V1LayerParameter::set_top(int index, const ::std::string& value) {
  top_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* V1LayerParameter::add_top() {
  return top_.Add();
}
inline void V1LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
}
inline void V1LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
}
inline void V1LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::top() const {
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_top() {
  return &top_;
}

// optional string name = 4;
inline bool V1LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void V1LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void V1LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void V1LayerParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& V1LayerParameter::name() const {
  return *name_;
}
inline void V1LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void V1LayerParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void V1LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* V1LayerParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* V1LayerParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void V1LayerParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .caffe.NetStateRule include = 32;
inline int V1LayerParameter::include_size() const {
  return include_.size();
}
inline void V1LayerParameter::clear_include() {
  include_.Clear();
}
inline const ::caffe::NetStateRule& V1LayerParameter::include(int index) const {
  return include_.Get(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::mutable_include(int index) {
  return include_.Mutable(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::add_include() {
  return include_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::include() const {
  return include_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_include() {
  return &include_;
}

// repeated .caffe.NetStateRule exclude = 33;
inline int V1LayerParameter::exclude_size() const {
  return exclude_.size();
}
inline void V1LayerParameter::clear_exclude() {
  exclude_.Clear();
}
inline const ::caffe::NetStateRule& V1LayerParameter::exclude(int index) const {
  return exclude_.Get(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::mutable_exclude(int index) {
  return exclude_.Mutable(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::add_exclude() {
  return exclude_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::exclude() const {
  return exclude_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_exclude() {
  return &exclude_;
}

// optional .caffe.V1LayerParameter.LayerType type = 5;
inline bool V1LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void V1LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void V1LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void V1LayerParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::caffe::V1LayerParameter_LayerType V1LayerParameter::type() const {
  return static_cast< ::caffe::V1LayerParameter_LayerType >(type_);
}
inline void V1LayerParameter::set_type(::caffe::V1LayerParameter_LayerType value) {
  assert(::caffe::V1LayerParameter_LayerType_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .caffe.BlobProto blobs = 6;
inline int V1LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void V1LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& V1LayerParameter::blobs(int index) const {
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* V1LayerParameter::mutable_blobs(int index) {
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* V1LayerParameter::add_blobs() {
  return blobs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V1LayerParameter::blobs() const {
  return blobs_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V1LayerParameter::mutable_blobs() {
  return &blobs_;
}

// repeated string param = 1001;
inline int V1LayerParameter::param_size() const {
  return param_.size();
}
inline void V1LayerParameter::clear_param() {
  param_.Clear();
}
inline const ::std::string& V1LayerParameter::param(int index) const {
  return param_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_param(int index) {
  return param_.Mutable(index);
}
inline void V1LayerParameter::set_param(int index, const ::std::string& value) {
  param_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_param(int index, const char* value) {
  param_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_param(int index, const char* value, size_t size) {
  param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* V1LayerParameter::add_param() {
  return param_.Add();
}
inline void V1LayerParameter::add_param(const ::std::string& value) {
  param_.Add()->assign(value);
}
inline void V1LayerParameter::add_param(const char* value) {
  param_.Add()->assign(value);
}
inline void V1LayerParameter::add_param(const char* value, size_t size) {
  param_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::param() const {
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_param() {
  return &param_;
}

// repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
inline int V1LayerParameter::blob_share_mode_size() const {
  return blob_share_mode_.size();
}
inline void V1LayerParameter::clear_blob_share_mode() {
  blob_share_mode_.Clear();
}
inline ::caffe::V1LayerParameter_DimCheckMode V1LayerParameter::blob_share_mode(int index) const {
  return static_cast< ::caffe::V1LayerParameter_DimCheckMode >(blob_share_mode_.Get(index));
}
inline void V1LayerParameter::set_blob_share_mode(int index, ::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Set(index, value);
}
inline void V1LayerParameter::add_blob_share_mode(::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
V1LayerParameter::blob_share_mode() const {
  return blob_share_mode_;
}
inline ::google::protobuf::RepeatedField<int>*
V1LayerParameter::mutable_blob_share_mode() {
  return &blob_share_mode_;
}

// repeated float blobs_lr = 7;
inline int V1LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
inline void V1LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float V1LayerParameter::blobs_lr(int index) const {
  return blobs_lr_.Get(index);
}
inline void V1LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
}
inline void V1LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::blobs_lr() const {
  return blobs_lr_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_blobs_lr() {
  return &blobs_lr_;
}

// repeated float weight_decay = 8;
inline int V1LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
inline void V1LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float V1LayerParameter::weight_decay(int index) const {
  return weight_decay_.Get(index);
}
inline void V1LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
}
inline void V1LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::weight_decay() const {
  return weight_decay_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_weight_decay() {
  return &weight_decay_;
}

// repeated float loss_weight = 35;
inline int V1LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
inline void V1LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float V1LayerParameter::loss_weight(int index) const {
  return loss_weight_.Get(index);
}
inline void V1LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
}
inline void V1LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::loss_weight() const {
  return loss_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_loss_weight() {
  return &loss_weight_;
}

// optional .caffe.AccuracyParameter accuracy_param = 27;
inline bool V1LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void V1LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void V1LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void V1LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
inline const ::caffe::AccuracyParameter& V1LayerParameter::accuracy_param() const {
  return accuracy_param_ != NULL ? *accuracy_param_ : *default_instance_->accuracy_param_;
}
inline ::caffe::AccuracyParameter* V1LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) accuracy_param_ = new ::caffe::AccuracyParameter;
  return accuracy_param_;
}
inline ::caffe::AccuracyParameter* V1LayerParameter::release_accuracy_param() {
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
}

// optional .caffe.ArgMaxParameter argmax_param = 23;
inline bool V1LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void V1LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void V1LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void V1LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
inline const ::caffe::ArgMaxParameter& V1LayerParameter::argmax_param() const {
  return argmax_param_ != NULL ? *argmax_param_ : *default_instance_->argmax_param_;
}
inline ::caffe::ArgMaxParameter* V1LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) argmax_param_ = new ::caffe::ArgMaxParameter;
  return argmax_param_;
}
inline ::caffe::ArgMaxParameter* V1LayerParameter::release_argmax_param() {
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
}

// optional .caffe.ConcatParameter concat_param = 9;
inline bool V1LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void V1LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void V1LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void V1LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
  clear_has_concat_param();
}
inline const ::caffe::ConcatParameter& V1LayerParameter::concat_param() const {
  return concat_param_ != NULL ? *concat_param_ : *default_instance_->concat_param_;
}
inline ::caffe::ConcatParameter* V1LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) concat_param_ = new ::caffe::ConcatParameter;
  return concat_param_;
}
inline ::caffe::ConcatParameter* V1LayerParameter::release_concat_param() {
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
inline bool V1LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void V1LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void V1LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void V1LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
inline const ::caffe::ContrastiveLossParameter& V1LayerParameter::contrastive_loss_param() const {
  return contrastive_loss_param_ != NULL ? *contrastive_loss_param_ : *default_instance_->contrastive_loss_param_;
}
inline ::caffe::ContrastiveLossParameter* V1LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  return contrastive_loss_param_;
}
inline ::caffe::ContrastiveLossParameter* V1LayerParameter::release_contrastive_loss_param() {
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
}

// optional .caffe.ConvolutionParameter convolution_param = 10;
inline bool V1LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void V1LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void V1LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void V1LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
inline const ::caffe::ConvolutionParameter& V1LayerParameter::convolution_param() const {
  return convolution_param_ != NULL ? *convolution_param_ : *default_instance_->convolution_param_;
}
inline ::caffe::ConvolutionParameter* V1LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) convolution_param_ = new ::caffe::ConvolutionParameter;
  return convolution_param_;
}
inline ::caffe::ConvolutionParameter* V1LayerParameter::release_convolution_param() {
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
}

// optional .caffe.DataParameter data_param = 11;
inline bool V1LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void V1LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void V1LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void V1LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
  clear_has_data_param();
}
inline const ::caffe::DataParameter& V1LayerParameter::data_param() const {
  return data_param_ != NULL ? *data_param_ : *default_instance_->data_param_;
}
inline ::caffe::DataParameter* V1LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) data_param_ = new ::caffe::DataParameter;
  return data_param_;
}
inline ::caffe::DataParameter* V1LayerParameter::release_data_param() {
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
}

// optional .caffe.DropoutParameter dropout_param = 12;
inline bool V1LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void V1LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void V1LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void V1LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
  clear_has_dropout_param();
}
inline const ::caffe::DropoutParameter& V1LayerParameter::dropout_param() const {
  return dropout_param_ != NULL ? *dropout_param_ : *default_instance_->dropout_param_;
}
inline ::caffe::DropoutParameter* V1LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) dropout_param_ = new ::caffe::DropoutParameter;
  return dropout_param_;
}
inline ::caffe::DropoutParameter* V1LayerParameter::release_dropout_param() {
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
}

// optional .caffe.DummyDataParameter dummy_data_param = 26;
inline bool V1LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void V1LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void V1LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void V1LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
inline const ::caffe::DummyDataParameter& V1LayerParameter::dummy_data_param() const {
  return dummy_data_param_ != NULL ? *dummy_data_param_ : *default_instance_->dummy_data_param_;
}
inline ::caffe::DummyDataParameter* V1LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) dummy_data_param_ = new ::caffe::DummyDataParameter;
  return dummy_data_param_;
}
inline ::caffe::DummyDataParameter* V1LayerParameter::release_dummy_data_param() {
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
}

// optional .caffe.EltwiseParameter eltwise_param = 24;
inline bool V1LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void V1LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void V1LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void V1LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
inline const ::caffe::EltwiseParameter& V1LayerParameter::eltwise_param() const {
  return eltwise_param_ != NULL ? *eltwise_param_ : *default_instance_->eltwise_param_;
}
inline ::caffe::EltwiseParameter* V1LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) eltwise_param_ = new ::caffe::EltwiseParameter;
  return eltwise_param_;
}
inline ::caffe::EltwiseParameter* V1LayerParameter::release_eltwise_param() {
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
}

// optional .caffe.ExpParameter exp_param = 41;
inline bool V1LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void V1LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void V1LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void V1LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
  clear_has_exp_param();
}
inline const ::caffe::ExpParameter& V1LayerParameter::exp_param() const {
  return exp_param_ != NULL ? *exp_param_ : *default_instance_->exp_param_;
}
inline ::caffe::ExpParameter* V1LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) exp_param_ = new ::caffe::ExpParameter;
  return exp_param_;
}
inline ::caffe::ExpParameter* V1LayerParameter::release_exp_param() {
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 13;
inline bool V1LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void V1LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void V1LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void V1LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
inline const ::caffe::HDF5DataParameter& V1LayerParameter::hdf5_data_param() const {
  return hdf5_data_param_ != NULL ? *hdf5_data_param_ : *default_instance_->hdf5_data_param_;
}
inline ::caffe::HDF5DataParameter* V1LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  return hdf5_data_param_;
}
inline ::caffe::HDF5DataParameter* V1LayerParameter::release_hdf5_data_param() {
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
inline bool V1LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void V1LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void V1LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void V1LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& V1LayerParameter::hdf5_output_param() const {
  return hdf5_output_param_ != NULL ? *hdf5_output_param_ : *default_instance_->hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* V1LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  return hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* V1LayerParameter::release_hdf5_output_param() {
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
}

// optional .caffe.HingeLossParameter hinge_loss_param = 29;
inline bool V1LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void V1LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void V1LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void V1LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
inline const ::caffe::HingeLossParameter& V1LayerParameter::hinge_loss_param() const {
  return hinge_loss_param_ != NULL ? *hinge_loss_param_ : *default_instance_->hinge_loss_param_;
}
inline ::caffe::HingeLossParameter* V1LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) hinge_loss_param_ = new ::caffe::HingeLossParameter;
  return hinge_loss_param_;
}
inline ::caffe::HingeLossParameter* V1LayerParameter::release_hinge_loss_param() {
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
}

// optional .caffe.ImageDataParameter image_data_param = 15;
inline bool V1LayerParameter::has_image_data_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void V1LayerParameter::set_has_image_data_param() {
  _has_bits_[0] |= 0x02000000u;
}
inline void V1LayerParameter::clear_has_image_data_param() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void V1LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
inline const ::caffe::ImageDataParameter& V1LayerParameter::image_data_param() const {
  return image_data_param_ != NULL ? *image_data_param_ : *default_instance_->image_data_param_;
}
inline ::caffe::ImageDataParameter* V1LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) image_data_param_ = new ::caffe::ImageDataParameter;
  return image_data_param_;
}
inline ::caffe::ImageDataParameter* V1LayerParameter::release_image_data_param() {
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 16;
inline bool V1LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void V1LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void V1LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void V1LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
inline const ::caffe::InfogainLossParameter& V1LayerParameter::infogain_loss_param() const {
  return infogain_loss_param_ != NULL ? *infogain_loss_param_ : *default_instance_->infogain_loss_param_;
}
inline ::caffe::InfogainLossParameter* V1LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  return infogain_loss_param_;
}
inline ::caffe::InfogainLossParameter* V1LayerParameter::release_infogain_loss_param() {
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
}

// optional .caffe.InnerProductParameter inner_product_param = 17;
inline bool V1LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void V1LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x08000000u;
}
inline void V1LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void V1LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
inline const ::caffe::InnerProductParameter& V1LayerParameter::inner_product_param() const {
  return inner_product_param_ != NULL ? *inner_product_param_ : *default_instance_->inner_product_param_;
}
inline ::caffe::InnerProductParameter* V1LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) inner_product_param_ = new ::caffe::InnerProductParameter;
  return inner_product_param_;
}
inline ::caffe::InnerProductParameter* V1LayerParameter::release_inner_product_param() {
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
}

// optional .caffe.LRNParameter lrn_param = 18;
inline bool V1LayerParameter::has_lrn_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void V1LayerParameter::set_has_lrn_param() {
  _has_bits_[0] |= 0x10000000u;
}
inline void V1LayerParameter::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void V1LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
  clear_has_lrn_param();
}
inline const ::caffe::LRNParameter& V1LayerParameter::lrn_param() const {
  return lrn_param_ != NULL ? *lrn_param_ : *default_instance_->lrn_param_;
}
inline ::caffe::LRNParameter* V1LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) lrn_param_ = new ::caffe::LRNParameter;
  return lrn_param_;
}
inline ::caffe::LRNParameter* V1LayerParameter::release_lrn_param() {
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
}

// optional .caffe.MemoryDataParameter memory_data_param = 22;
inline bool V1LayerParameter::has_memory_data_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void V1LayerParameter::set_has_memory_data_param() {
  _has_bits_[0] |= 0x20000000u;
}
inline void V1LayerParameter::clear_has_memory_data_param() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void V1LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
inline const ::caffe::MemoryDataParameter& V1LayerParameter::memory_data_param() const {
  return memory_data_param_ != NULL ? *memory_data_param_ : *default_instance_->memory_data_param_;
}
inline ::caffe::MemoryDataParameter* V1LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) memory_data_param_ = new ::caffe::MemoryDataParameter;
  return memory_data_param_;
}
inline ::caffe::MemoryDataParameter* V1LayerParameter::release_memory_data_param() {
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
}

// optional .caffe.MVNParameter mvn_param = 34;
inline bool V1LayerParameter::has_mvn_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void V1LayerParameter::set_has_mvn_param() {
  _has_bits_[0] |= 0x40000000u;
}
inline void V1LayerParameter::clear_has_mvn_param() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void V1LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
  clear_has_mvn_param();
}
inline const ::caffe::MVNParameter& V1LayerParameter::mvn_param() const {
  return mvn_param_ != NULL ? *mvn_param_ : *default_instance_->mvn_param_;
}
inline ::caffe::MVNParameter* V1LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) mvn_param_ = new ::caffe::MVNParameter;
  return mvn_param_;
}
inline ::caffe::MVNParameter* V1LayerParameter::release_mvn_param() {
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
}

// optional .caffe.PoolingParameter pooling_param = 19;
inline bool V1LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void V1LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x80000000u;
}
inline void V1LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void V1LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
inline const ::caffe::PoolingParameter& V1LayerParameter::pooling_param() const {
  return pooling_param_ != NULL ? *pooling_param_ : *default_instance_->pooling_param_;
}
inline ::caffe::PoolingParameter* V1LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) pooling_param_ = new ::caffe::PoolingParameter;
  return pooling_param_;
}
inline ::caffe::PoolingParameter* V1LayerParameter::release_pooling_param() {
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
}

// optional .caffe.PowerParameter power_param = 21;
inline bool V1LayerParameter::has_power_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void V1LayerParameter::set_has_power_param() {
  _has_bits_[1] |= 0x00000001u;
}
inline void V1LayerParameter::clear_has_power_param() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void V1LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
  clear_has_power_param();
}
inline const ::caffe::PowerParameter& V1LayerParameter::power_param() const {
  return power_param_ != NULL ? *power_param_ : *default_instance_->power_param_;
}
inline ::caffe::PowerParameter* V1LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) power_param_ = new ::caffe::PowerParameter;
  return power_param_;
}
inline ::caffe::PowerParameter* V1LayerParameter::release_power_param() {
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
}

// optional .caffe.ReLUParameter relu_param = 30;
inline bool V1LayerParameter::has_relu_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void V1LayerParameter::set_has_relu_param() {
  _has_bits_[1] |= 0x00000002u;
}
inline void V1LayerParameter::clear_has_relu_param() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void V1LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
inline const ::caffe::ReLUParameter& V1LayerParameter::relu_param() const {
  return relu_param_ != NULL ? *relu_param_ : *default_instance_->relu_param_;
}
inline ::caffe::ReLUParameter* V1LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) relu_param_ = new ::caffe::ReLUParameter;
  return relu_param_;
}
inline ::caffe::ReLUParameter* V1LayerParameter::release_relu_param() {
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
}

// optional .caffe.SigmoidParameter sigmoid_param = 38;
inline bool V1LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void V1LayerParameter::set_has_sigmoid_param() {
  _has_bits_[1] |= 0x00000004u;
}
inline void V1LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void V1LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
inline const ::caffe::SigmoidParameter& V1LayerParameter::sigmoid_param() const {
  return sigmoid_param_ != NULL ? *sigmoid_param_ : *default_instance_->sigmoid_param_;
}
inline ::caffe::SigmoidParameter* V1LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) sigmoid_param_ = new ::caffe::SigmoidParameter;
  return sigmoid_param_;
}
inline ::caffe::SigmoidParameter* V1LayerParameter::release_sigmoid_param() {
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
}

// optional .caffe.SoftmaxParameter softmax_param = 39;
inline bool V1LayerParameter::has_softmax_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void V1LayerParameter::set_has_softmax_param() {
  _has_bits_[1] |= 0x00000008u;
}
inline void V1LayerParameter::clear_has_softmax_param() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void V1LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
inline const ::caffe::SoftmaxParameter& V1LayerParameter::softmax_param() const {
  return softmax_param_ != NULL ? *softmax_param_ : *default_instance_->softmax_param_;
}
inline ::caffe::SoftmaxParameter* V1LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) softmax_param_ = new ::caffe::SoftmaxParameter;
  return softmax_param_;
}
inline ::caffe::SoftmaxParameter* V1LayerParameter::release_softmax_param() {
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
}

// optional .caffe.SliceParameter slice_param = 31;
inline bool V1LayerParameter::has_slice_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void V1LayerParameter::set_has_slice_param() {
  _has_bits_[1] |= 0x00000010u;
}
inline void V1LayerParameter::clear_has_slice_param() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void V1LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
  clear_has_slice_param();
}
inline const ::caffe::SliceParameter& V1LayerParameter::slice_param() const {
  return slice_param_ != NULL ? *slice_param_ : *default_instance_->slice_param_;
}
inline ::caffe::SliceParameter* V1LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) slice_param_ = new ::caffe::SliceParameter;
  return slice_param_;
}
inline ::caffe::SliceParameter* V1LayerParameter::release_slice_param() {
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
}

// optional .caffe.TanHParameter tanh_param = 37;
inline bool V1LayerParameter::has_tanh_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void V1LayerParameter::set_has_tanh_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void V1LayerParameter::clear_has_tanh_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void V1LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
  clear_has_tanh_param();
}
inline const ::caffe::TanHParameter& V1LayerParameter::tanh_param() const {
  return tanh_param_ != NULL ? *tanh_param_ : *default_instance_->tanh_param_;
}
inline ::caffe::TanHParameter* V1LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) tanh_param_ = new ::caffe::TanHParameter;
  return tanh_param_;
}
inline ::caffe::TanHParameter* V1LayerParameter::release_tanh_param() {
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
}

// optional .caffe.ThresholdParameter threshold_param = 25;
inline bool V1LayerParameter::has_threshold_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void V1LayerParameter::set_has_threshold_param() {
  _has_bits_[1] |= 0x00000040u;
}
inline void V1LayerParameter::clear_has_threshold_param() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void V1LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
inline const ::caffe::ThresholdParameter& V1LayerParameter::threshold_param() const {
  return threshold_param_ != NULL ? *threshold_param_ : *default_instance_->threshold_param_;
}
inline ::caffe::ThresholdParameter* V1LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) threshold_param_ = new ::caffe::ThresholdParameter;
  return threshold_param_;
}
inline ::caffe::ThresholdParameter* V1LayerParameter::release_threshold_param() {
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
}

// optional .caffe.WindowDataParameter window_data_param = 20;
inline bool V1LayerParameter::has_window_data_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void V1LayerParameter::set_has_window_data_param() {
  _has_bits_[1] |= 0x00000080u;
}
inline void V1LayerParameter::clear_has_window_data_param() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void V1LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
inline const ::caffe::WindowDataParameter& V1LayerParameter::window_data_param() const {
  return window_data_param_ != NULL ? *window_data_param_ : *default_instance_->window_data_param_;
}
inline ::caffe::WindowDataParameter* V1LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) window_data_param_ = new ::caffe::WindowDataParameter;
  return window_data_param_;
}
inline ::caffe::WindowDataParameter* V1LayerParameter::release_window_data_param() {
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
}

// optional .caffe.TransformationParameter transform_param = 36;
inline bool V1LayerParameter::has_transform_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void V1LayerParameter::set_has_transform_param() {
  _has_bits_[1] |= 0x00000100u;
}
inline void V1LayerParameter::clear_has_transform_param() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void V1LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
  clear_has_transform_param();
}
inline const ::caffe::TransformationParameter& V1LayerParameter::transform_param() const {
  return transform_param_ != NULL ? *transform_param_ : *default_instance_->transform_param_;
}
inline ::caffe::TransformationParameter* V1LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) transform_param_ = new ::caffe::TransformationParameter;
  return transform_param_;
}
inline ::caffe::TransformationParameter* V1LayerParameter::release_transform_param() {
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
}

// optional .caffe.LossParameter loss_param = 42;
inline bool V1LayerParameter::has_loss_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void V1LayerParameter::set_has_loss_param() {
  _has_bits_[1] |= 0x00000200u;
}
inline void V1LayerParameter::clear_has_loss_param() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void V1LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
  clear_has_loss_param();
}
inline const ::caffe::LossParameter& V1LayerParameter::loss_param() const {
  return loss_param_ != NULL ? *loss_param_ : *default_instance_->loss_param_;
}
inline ::caffe::LossParameter* V1LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) loss_param_ = new ::caffe::LossParameter;
  return loss_param_;
}
inline ::caffe::LossParameter* V1LayerParameter::release_loss_param() {
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
}

// optional .caffe.V0LayerParameter layer = 1;
inline bool V1LayerParameter::has_layer() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void V1LayerParameter::set_has_layer() {
  _has_bits_[1] |= 0x00000400u;
}
inline void V1LayerParameter::clear_has_layer() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void V1LayerParameter::clear_layer() {
  if (layer_ != NULL) layer_->::caffe::V0LayerParameter::Clear();
  clear_has_layer();
}
inline const ::caffe::V0LayerParameter& V1LayerParameter::layer() const {
  return layer_ != NULL ? *layer_ : *default_instance_->layer_;
}
inline ::caffe::V0LayerParameter* V1LayerParameter::mutable_layer() {
  set_has_layer();
  if (layer_ == NULL) layer_ = new ::caffe::V0LayerParameter;
  return layer_;
}
inline ::caffe::V0LayerParameter* V1LayerParameter::release_layer() {
  clear_has_layer();
  ::caffe::V0LayerParameter* temp = layer_;
  layer_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_layer(::caffe::V0LayerParameter* layer) {
  delete layer_;
  layer_ = layer;
  if (layer) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
}

// -------------------------------------------------------------------

// V0LayerParameter

// optional string name = 1;
inline bool V0LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void V0LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void V0LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void V0LayerParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& V0LayerParameter::name() const {
  return *name_;
}
inline void V0LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void V0LayerParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void V0LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* V0LayerParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* V0LayerParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void V0LayerParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string type = 2;
inline bool V0LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void V0LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void V0LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void V0LayerParameter::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& V0LayerParameter::type() const {
  return *type_;
}
inline void V0LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void V0LayerParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void V0LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* V0LayerParameter::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* V0LayerParameter::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void V0LayerParameter::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 num_output = 3;
inline bool V0LayerParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void V0LayerParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void V0LayerParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void V0LayerParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 V0LayerParameter::num_output() const {
  return num_output_;
}
inline void V0LayerParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
}

// optional bool biasterm = 4 [default = true];
inline bool V0LayerParameter::has_biasterm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void V0LayerParameter::set_has_biasterm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void V0LayerParameter::clear_has_biasterm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void V0LayerParameter::clear_biasterm() {
  biasterm_ = true;
  clear_has_biasterm();
}
inline bool V0LayerParameter::biasterm() const {
  return biasterm_;
}
inline void V0LayerParameter::set_biasterm(bool value) {
  set_has_biasterm();
  biasterm_ = value;
}

// optional .caffe.FillerParameter weight_filler = 5;
inline bool V0LayerParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void V0LayerParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000010u;
}
inline void V0LayerParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void V0LayerParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& V0LayerParameter::weight_filler() const {
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* V0LayerParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::caffe::FillerParameter;
  return weight_filler_;
}
inline ::caffe::FillerParameter* V0LayerParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void V0LayerParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
}

// optional .caffe.FillerParameter bias_filler = 6;
inline bool V0LayerParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void V0LayerParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000020u;
}
inline void V0LayerParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void V0LayerParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& V0LayerParameter::bias_filler() const {
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* V0LayerParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::caffe::FillerParameter;
  return bias_filler_;
}
inline ::caffe::FillerParameter* V0LayerParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void V0LayerParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
}

// optional uint32 pad = 7 [default = 0];
inline bool V0LayerParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void V0LayerParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000040u;
}
inline void V0LayerParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void V0LayerParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 V0LayerParameter::pad() const {
  return pad_;
}
inline void V0LayerParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
}

// optional uint32 kernelsize = 8;
inline bool V0LayerParameter::has_kernelsize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void V0LayerParameter::set_has_kernelsize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void V0LayerParameter::clear_has_kernelsize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void V0LayerParameter::clear_kernelsize() {
  kernelsize_ = 0u;
  clear_has_kernelsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::kernelsize() const {
  return kernelsize_;
}
inline void V0LayerParameter::set_kernelsize(::google::protobuf::uint32 value) {
  set_has_kernelsize();
  kernelsize_ = value;
}

// optional uint32 group = 9 [default = 1];
inline bool V0LayerParameter::has_group() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void V0LayerParameter::set_has_group() {
  _has_bits_[0] |= 0x00000100u;
}
inline void V0LayerParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void V0LayerParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 V0LayerParameter::group() const {
  return group_;
}
inline void V0LayerParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
}

// optional uint32 stride = 10 [default = 1];
inline bool V0LayerParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void V0LayerParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000200u;
}
inline void V0LayerParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void V0LayerParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 V0LayerParameter::stride() const {
  return stride_;
}
inline void V0LayerParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
}

// optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
inline bool V0LayerParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void V0LayerParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000400u;
}
inline void V0LayerParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void V0LayerParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::V0LayerParameter_PoolMethod V0LayerParameter::pool() const {
  return static_cast< ::caffe::V0LayerParameter_PoolMethod >(pool_);
}
inline void V0LayerParameter::set_pool(::caffe::V0LayerParameter_PoolMethod value) {
  assert(::caffe::V0LayerParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
}

// optional float dropout_ratio = 12 [default = 0.5];
inline bool V0LayerParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void V0LayerParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000800u;
}
inline void V0LayerParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void V0LayerParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float V0LayerParameter::dropout_ratio() const {
  return dropout_ratio_;
}
inline void V0LayerParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
}

// optional uint32 local_size = 13 [default = 5];
inline bool V0LayerParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void V0LayerParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00001000u;
}
inline void V0LayerParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void V0LayerParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 V0LayerParameter::local_size() const {
  return local_size_;
}
inline void V0LayerParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
}

// optional float alpha = 14 [default = 1];
inline bool V0LayerParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void V0LayerParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00002000u;
}
inline void V0LayerParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void V0LayerParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float V0LayerParameter::alpha() const {
  return alpha_;
}
inline void V0LayerParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
}

// optional float beta = 15 [default = 0.75];
inline bool V0LayerParameter::has_beta() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void V0LayerParameter::set_has_beta() {
  _has_bits_[0] |= 0x00004000u;
}
inline void V0LayerParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void V0LayerParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float V0LayerParameter::beta() const {
  return beta_;
}
inline void V0LayerParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
}

// optional float k = 22 [default = 1];
inline bool V0LayerParameter::has_k() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void V0LayerParameter::set_has_k() {
  _has_bits_[0] |= 0x00008000u;
}
inline void V0LayerParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void V0LayerParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float V0LayerParameter::k() const {
  return k_;
}
inline void V0LayerParameter::set_k(float value) {
  set_has_k();
  k_ = value;
}

// optional string source = 16;
inline bool V0LayerParameter::has_source() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void V0LayerParameter::set_has_source() {
  _has_bits_[0] |= 0x00010000u;
}
inline void V0LayerParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void V0LayerParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& V0LayerParameter::source() const {
  return *source_;
}
inline void V0LayerParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void V0LayerParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void V0LayerParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* V0LayerParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* V0LayerParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void V0LayerParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float scale = 17 [default = 1];
inline bool V0LayerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void V0LayerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00020000u;
}
inline void V0LayerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void V0LayerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float V0LayerParameter::scale() const {
  return scale_;
}
inline void V0LayerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// optional string meanfile = 18;
inline bool V0LayerParameter::has_meanfile() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void V0LayerParameter::set_has_meanfile() {
  _has_bits_[0] |= 0x00040000u;
}
inline void V0LayerParameter::clear_has_meanfile() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void V0LayerParameter::clear_meanfile() {
  if (meanfile_ != &::google::protobuf::internal::kEmptyString) {
    meanfile_->clear();
  }
  clear_has_meanfile();
}
inline const ::std::string& V0LayerParameter::meanfile() const {
  return *meanfile_;
}
inline void V0LayerParameter::set_meanfile(const ::std::string& value) {
  set_has_meanfile();
  if (meanfile_ == &::google::protobuf::internal::kEmptyString) {
    meanfile_ = new ::std::string;
  }
  meanfile_->assign(value);
}
inline void V0LayerParameter::set_meanfile(const char* value) {
  set_has_meanfile();
  if (meanfile_ == &::google::protobuf::internal::kEmptyString) {
    meanfile_ = new ::std::string;
  }
  meanfile_->assign(value);
}
inline void V0LayerParameter::set_meanfile(const char* value, size_t size) {
  set_has_meanfile();
  if (meanfile_ == &::google::protobuf::internal::kEmptyString) {
    meanfile_ = new ::std::string;
  }
  meanfile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* V0LayerParameter::mutable_meanfile() {
  set_has_meanfile();
  if (meanfile_ == &::google::protobuf::internal::kEmptyString) {
    meanfile_ = new ::std::string;
  }
  return meanfile_;
}
inline ::std::string* V0LayerParameter::release_meanfile() {
  clear_has_meanfile();
  if (meanfile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = meanfile_;
    meanfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void V0LayerParameter::set_allocated_meanfile(::std::string* meanfile) {
  if (meanfile_ != &::google::protobuf::internal::kEmptyString) {
    delete meanfile_;
  }
  if (meanfile) {
    set_has_meanfile();
    meanfile_ = meanfile;
  } else {
    clear_has_meanfile();
    meanfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 batchsize = 19;
inline bool V0LayerParameter::has_batchsize() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void V0LayerParameter::set_has_batchsize() {
  _has_bits_[0] |= 0x00080000u;
}
inline void V0LayerParameter::clear_has_batchsize() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void V0LayerParameter::clear_batchsize() {
  batchsize_ = 0u;
  clear_has_batchsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::batchsize() const {
  return batchsize_;
}
inline void V0LayerParameter::set_batchsize(::google::protobuf::uint32 value) {
  set_has_batchsize();
  batchsize_ = value;
}

// optional uint32 cropsize = 20 [default = 0];
inline bool V0LayerParameter::has_cropsize() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void V0LayerParameter::set_has_cropsize() {
  _has_bits_[0] |= 0x00100000u;
}
inline void V0LayerParameter::clear_has_cropsize() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void V0LayerParameter::clear_cropsize() {
  cropsize_ = 0u;
  clear_has_cropsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::cropsize() const {
  return cropsize_;
}
inline void V0LayerParameter::set_cropsize(::google::protobuf::uint32 value) {
  set_has_cropsize();
  cropsize_ = value;
}

// optional bool mirror = 21 [default = false];
inline bool V0LayerParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void V0LayerParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00200000u;
}
inline void V0LayerParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void V0LayerParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool V0LayerParameter::mirror() const {
  return mirror_;
}
inline void V0LayerParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
}

// repeated .caffe.BlobProto blobs = 50;
inline int V0LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void V0LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& V0LayerParameter::blobs(int index) const {
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* V0LayerParameter::mutable_blobs(int index) {
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* V0LayerParameter::add_blobs() {
  return blobs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V0LayerParameter::blobs() const {
  return blobs_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V0LayerParameter::mutable_blobs() {
  return &blobs_;
}

// repeated float blobs_lr = 51;
inline int V0LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
inline void V0LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float V0LayerParameter::blobs_lr(int index) const {
  return blobs_lr_.Get(index);
}
inline void V0LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
}
inline void V0LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::blobs_lr() const {
  return blobs_lr_;
}
inline ::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_blobs_lr() {
  return &blobs_lr_;
}

// repeated float weight_decay = 52;
inline int V0LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
inline void V0LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float V0LayerParameter::weight_decay(int index) const {
  return weight_decay_.Get(index);
}
inline void V0LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
}
inline void V0LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::weight_decay() const {
  return weight_decay_;
}
inline ::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_weight_decay() {
  return &weight_decay_;
}

// optional uint32 rand_skip = 53 [default = 0];
inline bool V0LayerParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void V0LayerParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x02000000u;
}
inline void V0LayerParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void V0LayerParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 V0LayerParameter::rand_skip() const {
  return rand_skip_;
}
inline void V0LayerParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
}

// optional float det_fg_threshold = 54 [default = 0.5];
inline bool V0LayerParameter::has_det_fg_threshold() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void V0LayerParameter::set_has_det_fg_threshold() {
  _has_bits_[0] |= 0x04000000u;
}
inline void V0LayerParameter::clear_has_det_fg_threshold() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void V0LayerParameter::clear_det_fg_threshold() {
  det_fg_threshold_ = 0.5f;
  clear_has_det_fg_threshold();
}
inline float V0LayerParameter::det_fg_threshold() const {
  return det_fg_threshold_;
}
inline void V0LayerParameter::set_det_fg_threshold(float value) {
  set_has_det_fg_threshold();
  det_fg_threshold_ = value;
}

// optional float det_bg_threshold = 55 [default = 0.5];
inline bool V0LayerParameter::has_det_bg_threshold() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void V0LayerParameter::set_has_det_bg_threshold() {
  _has_bits_[0] |= 0x08000000u;
}
inline void V0LayerParameter::clear_has_det_bg_threshold() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void V0LayerParameter::clear_det_bg_threshold() {
  det_bg_threshold_ = 0.5f;
  clear_has_det_bg_threshold();
}
inline float V0LayerParameter::det_bg_threshold() const {
  return det_bg_threshold_;
}
inline void V0LayerParameter::set_det_bg_threshold(float value) {
  set_has_det_bg_threshold();
  det_bg_threshold_ = value;
}

// optional float det_fg_fraction = 56 [default = 0.25];
inline bool V0LayerParameter::has_det_fg_fraction() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void V0LayerParameter::set_has_det_fg_fraction() {
  _has_bits_[0] |= 0x10000000u;
}
inline void V0LayerParameter::clear_has_det_fg_fraction() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void V0LayerParameter::clear_det_fg_fraction() {
  det_fg_fraction_ = 0.25f;
  clear_has_det_fg_fraction();
}
inline float V0LayerParameter::det_fg_fraction() const {
  return det_fg_fraction_;
}
inline void V0LayerParameter::set_det_fg_fraction(float value) {
  set_has_det_fg_fraction();
  det_fg_fraction_ = value;
}

// optional uint32 det_context_pad = 58 [default = 0];
inline bool V0LayerParameter::has_det_context_pad() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void V0LayerParameter::set_has_det_context_pad() {
  _has_bits_[0] |= 0x20000000u;
}
inline void V0LayerParameter::clear_has_det_context_pad() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void V0LayerParameter::clear_det_context_pad() {
  det_context_pad_ = 0u;
  clear_has_det_context_pad();
}
inline ::google::protobuf::uint32 V0LayerParameter::det_context_pad() const {
  return det_context_pad_;
}
inline void V0LayerParameter::set_det_context_pad(::google::protobuf::uint32 value) {
  set_has_det_context_pad();
  det_context_pad_ = value;
}

// optional string det_crop_mode = 59 [default = "warp"];
inline bool V0LayerParameter::has_det_crop_mode() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void V0LayerParameter::set_has_det_crop_mode() {
  _has_bits_[0] |= 0x40000000u;
}
inline void V0LayerParameter::clear_has_det_crop_mode() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void V0LayerParameter::clear_det_crop_mode() {
  if (det_crop_mode_ != _default_det_crop_mode_) {
    det_crop_mode_->assign(*_default_det_crop_mode_);
  }
  clear_has_det_crop_mode();
}
inline const ::std::string& V0LayerParameter::det_crop_mode() const {
  return *det_crop_mode_;
}
inline void V0LayerParameter::set_det_crop_mode(const ::std::string& value) {
  set_has_det_crop_mode();
  if (det_crop_mode_ == _default_det_crop_mode_) {
    det_crop_mode_ = new ::std::string;
  }
  det_crop_mode_->assign(value);
}
inline void V0LayerParameter::set_det_crop_mode(const char* value) {
  set_has_det_crop_mode();
  if (det_crop_mode_ == _default_det_crop_mode_) {
    det_crop_mode_ = new ::std::string;
  }
  det_crop_mode_->assign(value);
}
inline void V0LayerParameter::set_det_crop_mode(const char* value, size_t size) {
  set_has_det_crop_mode();
  if (det_crop_mode_ == _default_det_crop_mode_) {
    det_crop_mode_ = new ::std::string;
  }
  det_crop_mode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* V0LayerParameter::mutable_det_crop_mode() {
  set_has_det_crop_mode();
  if (det_crop_mode_ == _default_det_crop_mode_) {
    det_crop_mode_ = new ::std::string(*_default_det_crop_mode_);
  }
  return det_crop_mode_;
}
inline ::std::string* V0LayerParameter::release_det_crop_mode() {
  clear_has_det_crop_mode();
  if (det_crop_mode_ == _default_det_crop_mode_) {
    return NULL;
  } else {
    ::std::string* temp = det_crop_mode_;
    det_crop_mode_ = const_cast< ::std::string*>(_default_det_crop_mode_);
    return temp;
  }
}
inline void V0LayerParameter::set_allocated_det_crop_mode(::std::string* det_crop_mode) {
  if (det_crop_mode_ != _default_det_crop_mode_) {
    delete det_crop_mode_;
  }
  if (det_crop_mode) {
    set_has_det_crop_mode();
    det_crop_mode_ = det_crop_mode;
  } else {
    clear_has_det_crop_mode();
    det_crop_mode_ = const_cast< ::std::string*>(_default_det_crop_mode_);
  }
}

// optional int32 new_num = 60 [default = 0];
inline bool V0LayerParameter::has_new_num() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void V0LayerParameter::set_has_new_num() {
  _has_bits_[0] |= 0x80000000u;
}
inline void V0LayerParameter::clear_has_new_num() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void V0LayerParameter::clear_new_num() {
  new_num_ = 0;
  clear_has_new_num();
}
inline ::google::protobuf::int32 V0LayerParameter::new_num() const {
  return new_num_;
}
inline void V0LayerParameter::set_new_num(::google::protobuf::int32 value) {
  set_has_new_num();
  new_num_ = value;
}

// optional int32 new_channels = 61 [default = 0];
inline bool V0LayerParameter::has_new_channels() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void V0LayerParameter::set_has_new_channels() {
  _has_bits_[1] |= 0x00000001u;
}
inline void V0LayerParameter::clear_has_new_channels() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void V0LayerParameter::clear_new_channels() {
  new_channels_ = 0;
  clear_has_new_channels();
}
inline ::google::protobuf::int32 V0LayerParameter::new_channels() const {
  return new_channels_;
}
inline void V0LayerParameter::set_new_channels(::google::protobuf::int32 value) {
  set_has_new_channels();
  new_channels_ = value;
}

// optional int32 new_height = 62 [default = 0];
inline bool V0LayerParameter::has_new_height() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void V0LayerParameter::set_has_new_height() {
  _has_bits_[1] |= 0x00000002u;
}
inline void V0LayerParameter::clear_has_new_height() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void V0LayerParameter::clear_new_height() {
  new_height_ = 0;
  clear_has_new_height();
}
inline ::google::protobuf::int32 V0LayerParameter::new_height() const {
  return new_height_;
}
inline void V0LayerParameter::set_new_height(::google::protobuf::int32 value) {
  set_has_new_height();
  new_height_ = value;
}

// optional int32 new_width = 63 [default = 0];
inline bool V0LayerParameter::has_new_width() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void V0LayerParameter::set_has_new_width() {
  _has_bits_[1] |= 0x00000004u;
}
inline void V0LayerParameter::clear_has_new_width() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void V0LayerParameter::clear_new_width() {
  new_width_ = 0;
  clear_has_new_width();
}
inline ::google::protobuf::int32 V0LayerParameter::new_width() const {
  return new_width_;
}
inline void V0LayerParameter::set_new_width(::google::protobuf::int32 value) {
  set_has_new_width();
  new_width_ = value;
}

// optional bool shuffle_images = 64 [default = false];
inline bool V0LayerParameter::has_shuffle_images() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void V0LayerParameter::set_has_shuffle_images() {
  _has_bits_[1] |= 0x00000008u;
}
inline void V0LayerParameter::clear_has_shuffle_images() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void V0LayerParameter::clear_shuffle_images() {
  shuffle_images_ = false;
  clear_has_shuffle_images();
}
inline bool V0LayerParameter::shuffle_images() const {
  return shuffle_images_;
}
inline void V0LayerParameter::set_shuffle_images(bool value) {
  set_has_shuffle_images();
  shuffle_images_ = value;
}

// optional uint32 concat_dim = 65 [default = 1];
inline bool V0LayerParameter::has_concat_dim() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void V0LayerParameter::set_has_concat_dim() {
  _has_bits_[1] |= 0x00000010u;
}
inline void V0LayerParameter::clear_has_concat_dim() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void V0LayerParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
inline ::google::protobuf::uint32 V0LayerParameter::concat_dim() const {
  return concat_dim_;
}
inline void V0LayerParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
inline bool V0LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void V0LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void V0LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void V0LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& V0LayerParameter::hdf5_output_param() const {
  return hdf5_output_param_ != NULL ? *hdf5_output_param_ : *default_instance_->hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* V0LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  return hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* V0LayerParameter::release_hdf5_output_param() {
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline void V0LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
}

// -------------------------------------------------------------------

// PReLUParameter

// optional .caffe.FillerParameter filler = 1;
inline bool PReLUParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PReLUParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PReLUParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PReLUParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::caffe::FillerParameter& PReLUParameter::filler() const {
  return filler_ != NULL ? *filler_ : *default_instance_->filler_;
}
inline ::caffe::FillerParameter* PReLUParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) filler_ = new ::caffe::FillerParameter;
  return filler_;
}
inline ::caffe::FillerParameter* PReLUParameter::release_filler() {
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void PReLUParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
}

// optional bool channel_shared = 2 [default = false];
inline bool PReLUParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PReLUParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PReLUParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PReLUParameter::clear_channel_shared() {
  channel_shared_ = false;
  clear_has_channel_shared();
}
inline bool PReLUParameter::channel_shared() const {
  return channel_shared_;
}
inline void PReLUParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
}

// -------------------------------------------------------------------

// UpsampleParameter

// optional uint32 scale = 1 [default = 2];
inline bool UpsampleParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpsampleParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpsampleParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpsampleParameter::clear_scale() {
  scale_ = 2u;
  clear_has_scale();
}
inline ::google::protobuf::uint32 UpsampleParameter::scale() const {
  return scale_;
}
inline void UpsampleParameter::set_scale(::google::protobuf::uint32 value) {
  set_has_scale();
  scale_ = value;
}

// optional uint32 scale_h = 2;
inline bool UpsampleParameter::has_scale_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpsampleParameter::set_has_scale_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpsampleParameter::clear_has_scale_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpsampleParameter::clear_scale_h() {
  scale_h_ = 0u;
  clear_has_scale_h();
}
inline ::google::protobuf::uint32 UpsampleParameter::scale_h() const {
  return scale_h_;
}
inline void UpsampleParameter::set_scale_h(::google::protobuf::uint32 value) {
  set_has_scale_h();
  scale_h_ = value;
}

// optional uint32 scale_w = 3;
inline bool UpsampleParameter::has_scale_w() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpsampleParameter::set_has_scale_w() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpsampleParameter::clear_has_scale_w() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpsampleParameter::clear_scale_w() {
  scale_w_ = 0u;
  clear_has_scale_w();
}
inline ::google::protobuf::uint32 UpsampleParameter::scale_w() const {
  return scale_w_;
}
inline void UpsampleParameter::set_scale_w(::google::protobuf::uint32 value) {
  set_has_scale_w();
  scale_w_ = value;
}

// optional bool pad_out_h = 4 [default = false];
inline bool UpsampleParameter::has_pad_out_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpsampleParameter::set_has_pad_out_h() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpsampleParameter::clear_has_pad_out_h() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpsampleParameter::clear_pad_out_h() {
  pad_out_h_ = false;
  clear_has_pad_out_h();
}
inline bool UpsampleParameter::pad_out_h() const {
  return pad_out_h_;
}
inline void UpsampleParameter::set_pad_out_h(bool value) {
  set_has_pad_out_h();
  pad_out_h_ = value;
}

// optional bool pad_out_w = 5 [default = false];
inline bool UpsampleParameter::has_pad_out_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpsampleParameter::set_has_pad_out_w() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpsampleParameter::clear_has_pad_out_w() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpsampleParameter::clear_pad_out_w() {
  pad_out_w_ = false;
  clear_has_pad_out_w();
}
inline bool UpsampleParameter::pad_out_w() const {
  return pad_out_w_;
}
inline void UpsampleParameter::set_pad_out_w(bool value) {
  set_has_pad_out_w();
  pad_out_w_ = value;
}

// optional uint32 upsample_h = 6;
inline bool UpsampleParameter::has_upsample_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpsampleParameter::set_has_upsample_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpsampleParameter::clear_has_upsample_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpsampleParameter::clear_upsample_h() {
  upsample_h_ = 0u;
  clear_has_upsample_h();
}
inline ::google::protobuf::uint32 UpsampleParameter::upsample_h() const {
  return upsample_h_;
}
inline void UpsampleParameter::set_upsample_h(::google::protobuf::uint32 value) {
  set_has_upsample_h();
  upsample_h_ = value;
}

// optional uint32 upsample_w = 7;
inline bool UpsampleParameter::has_upsample_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UpsampleParameter::set_has_upsample_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UpsampleParameter::clear_has_upsample_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UpsampleParameter::clear_upsample_w() {
  upsample_w_ = 0u;
  clear_has_upsample_w();
}
inline ::google::protobuf::uint32 UpsampleParameter::upsample_w() const {
  return upsample_w_;
}
inline void UpsampleParameter::set_upsample_w(::google::protobuf::uint32 value) {
  set_has_upsample_w();
  upsample_w_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::FillerParameter_VarianceNorm>() {
  return ::caffe::FillerParameter_VarianceNorm_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::TestProto_TestType>() {
  return ::caffe::TestProto_TestType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SnapshotFormat>() {
  return ::caffe::SolverParameter_SnapshotFormat_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SolverMode>() {
  return ::caffe::SolverParameter_SolverMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SolverType>() {
  return ::caffe::SolverParameter_SolverType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ParamSpec_DimCheckMode>() {
  return ::caffe::ParamSpec_DimCheckMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::GateRecurrent2dParameter_Active>() {
  return ::caffe::GateRecurrent2dParameter_Active_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::TopInfo_SrcType>() {
  return ::caffe::TopInfo_SrcType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::TopInfo_ResizeType>() {
  return ::caffe::TopInfo_ResizeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::FacerecImageDataParameter_DataType>() {
  return ::caffe::FacerecImageDataParameter_DataType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PairImageDataParameter_DataType>() {
  return ::caffe::PairImageDataParameter_DataType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::GateRecurrentParameter_Active>() {
  return ::caffe::GateRecurrentParameter_Active_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SuperCropParameter_Type>() {
  return ::caffe::SuperCropParameter_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::MapMetricLossParameter_LossType>() {
  return ::caffe::MapMetricLossParameter_LossType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ElementHingeLossParameter_Norm>() {
  return ::caffe::ElementHingeLossParameter_Norm_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ResizeParameter_Type>() {
  return ::caffe::ResizeParameter_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SpatialRecurrentParameter_Active>() {
  return ::caffe::SpatialRecurrentParameter_Active_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ManipulatelabelParameter_Type>() {
  return ::caffe::ManipulatelabelParameter_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ImageDataTextLabelParameter_TextLabelType>() {
  return ::caffe::ImageDataTextLabelParameter_TextLabelType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LossParameter_NormalizationMode>() {
  return ::caffe::LossParameter_NormalizationMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ConvolutionParameter_Engine>() {
  return ::caffe::ConvolutionParameter_Engine_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::DataParameter_DB>() {
  return ::caffe::DataParameter_DB_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::EltwiseParameter_EltwiseOp>() {
  return ::caffe::EltwiseParameter_EltwiseOp_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::HingeLossParameter_Norm>() {
  return ::caffe::HingeLossParameter_Norm_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LRNParameter_NormRegion>() {
  return ::caffe::LRNParameter_NormRegion_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LRNParameter_Engine>() {
  return ::caffe::LRNParameter_Engine_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PoolingParameter_PoolMethod>() {
  return ::caffe::PoolingParameter_PoolMethod_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PoolingParameter_Engine>() {
  return ::caffe::PoolingParameter_Engine_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ReductionParameter_ReductionOp>() {
  return ::caffe::ReductionParameter_ReductionOp_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ReLUParameter_Engine>() {
  return ::caffe::ReLUParameter_Engine_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SigmoidParameter_Engine>() {
  return ::caffe::SigmoidParameter_Engine_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SoftmaxParameter_Engine>() {
  return ::caffe::SoftmaxParameter_Engine_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::TanHParameter_Engine>() {
  return ::caffe::TanHParameter_Engine_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SPPParameter_PoolMethod>() {
  return ::caffe::SPPParameter_PoolMethod_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SPPParameter_Engine>() {
  return ::caffe::SPPParameter_Engine_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V1LayerParameter_LayerType>() {
  return ::caffe::V1LayerParameter_LayerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V1LayerParameter_DimCheckMode>() {
  return ::caffe::V1LayerParameter_DimCheckMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V0LayerParameter_PoolMethod>() {
  return ::caffe::V0LayerParameter_PoolMethod_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::Phase>() {
  return ::caffe::Phase_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::AffineImage_Norm_Mode>() {
  return ::caffe::AffineImage_Norm_Mode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_caffe_2eproto__INCLUDED
