name: "Vface_AE_02.prototxt"
layer {
  name: "data"
  type: "Python"
  top: "video_original"
  top: "video"
  #top: "img_fea"
  #top: "same"
  python_param {
    module: "Vface_datalayer"
    layer: "Vface_datalayer"
  }
}


#----------------face restoration with AE-----------------
layer {
  name: "ae_conv1"
  type: "Convolution"
  bottom: "video"
  top: "ae_conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 64
    kernel_size:5
    stride: 1
    group : 1
    pad: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
          value:0
    }
  }
}#32
layer {
  name: "ae_relu1"
  type: "ReLU"
  bottom: "ae_conv1"
  top: "ae_conv1"
  relu_param{
    negative_slope: 0.0
  }
}
layer {
  name: "ae_pool1"
  type: "Pooling"
  bottom: "ae_conv1"
  top: "ae_pool1"
  top: "ae_pool1_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}#16
layer {
  name: "ae_conv2"
  type: "Convolution"
  bottom: "ae_pool1"
  top: "ae_conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    kernel_size:3
    stride: 1
    group : 1
    pad: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
          value:0
    }
  }
}
layer {
  name: "ae_relu2"
  type: "ReLU"
  bottom: "ae_conv2"
  top: "ae_conv2"
  relu_param{
    negative_slope: 0.0
  }
}
layer {
  name: "ae_pool2"
  type: "Pooling"
  bottom: "ae_conv2"
  top: "ae_pool2"
  top: "ae_pool2_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}#8
layer {
  name: "ae_conv3"
  type: "Convolution"
  bottom: "ae_pool2"
  top: "ae_conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    kernel_size: 3
    stride: 1
	group : 1
	pad: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "ae_relu3"
  type: "ReLU"
  bottom: "ae_conv3"
  top: "ae_conv3"
  relu_param{
    negative_slope: 0.0
  }
}
layer {
  name: "ae_pool3"
  type: "Pooling"
  bottom: "ae_conv3"
  top: "ae_pool3"
  top: "ae_pool3_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}#4
layer {
  name: "ae_conv4"
  type: "Convolution"
  bottom: "ae_pool3"
  top: "ae_conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    kernel_size: 3
    stride: 1
	group : 1
	pad: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "ae_relu3"
  type: "ReLU"
  bottom: "ae_conv4"
  top: "ae_conv4"
  relu_param{
    negative_slope: 0.0
  }
}
#-------------upsample-------------
layer {
  name: "ae_resize4"
  type: "Upsample"
  bottom: "ae_conv4"
  bottom: "ae_pool3_mask"
  top: "ae_resize4"
  upsample_param {
	scale: 2
  }
}#8
layer {
  name: "ae_conv5"
  type: "Convolution"
  bottom: "ae_resize4"
  top: "ae_conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    kernel_size: 3
    stride: 1
	group : 1
	pad: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "ae_relu5"
  type: "ReLU"
  bottom: "ae_conv5"
  top: "ae_conv5"
  relu_param{
    negative_slope: 0.0
  }
}
layer {
  name: "ae_resize5"
  type: "Upsample"
  bottom: "ae_conv5"
  bottom: "ae_pool2_mask"
  top: "ae_resize5"
  upsample_param {
	scale: 2
  }
}#16
layer {
  name: "ae_conv6"
  type: "Convolution"
  bottom: "ae_resize5"
  top: "ae_conv6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 3
    stride: 1
	group : 1
	pad: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "ae_relu6"
  type: "ReLU"
  bottom: "ae_conv6"
  top: "ae_conv6"
  relu_param{
    negative_slope: 0.0
  }
}
layer {
  name: "ae_resize6"
  type: "Upsample"
  bottom: "ae_conv6"
  bottom: "ae_pool1_mask"
  top: "ae_resize6"
  upsample_param {
	scale: 2
  }
}#32
layer {
  name: "ae_deconv7"
  type: "Deconvolution"
  bottom: "ae_resize6"
  top: "ae_deconv7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    kernel_size: 5
    stride: 2
	group : 1
	pad: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "ae_relu7"
  type: "ReLU"
  bottom: "ae_deconv7"
  top: "ae_deconv7"
  relu_param{
    negative_slope: 0.0
  }
}#64
layer {
  name: "ae_deconv8"
  type: "Deconvolution"
  bottom: "ae_deconv7"
  top: "ae_deconv8"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 5
    stride: 2
	group : 1
	pad: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "ae_relu8"
  type: "ReLU"
  bottom: "ae_deconv8"
  top: "ae_deconv8"
  relu_param{
    negative_slope: 0.0
  }
}#128
layer {
  name: "restore_out"
  type: "Convolution"
  bottom: "ae_deconv8"
  top: "restore_out"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 3
    kernel_size: 3
    stride: 1
	group : 1
	pad: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
} 
# L2 loss
layer {
  name: "Restore_L2"
  type: "Python"
  bottom: "restore_out"
  bottom: "video_original"
  top: "Restore_loss"
  python_param {
    module: "L2_loss"
    layer: "L2_loss"
  }
  loss_weight: 1
}

##------------------face image recong net: video------------------
#### conv1 ###
#layer {
#  name: "conv1"
#  type: "Convolution"
#  bottom: "video_original"
#  top: "conv1"
#  param {
#	name: "conv1_w"
#    lr_mult: 0
#    decay_mult: 1
#  }
#  param {
#    name: "conv1_b"
#    lr_mult: 0
#    decay_mult: 0
#  }
#  convolution_param {
#    num_output: 20
#    kernel_size: 4
#    weight_filler {
#      type: "gaussian"
#      std: 0.03
#    }
#    bias_filler {
#      type: "constant"
#      value: 0
#    }
#  }
#}
#layer {
#  name: "relu1"
#  type: "PReLU"
#  bottom: "conv1"
#  top: "conv1"
#  prelu_param {
#    filler {
#      type: "gaussian"
#      std: 0.03
#    }
#  }
#}
#
#### pool1 ###
#layer {
#  name: "pool1"
#  type: "Pooling"
#  bottom: "conv1"
#  top: "pool1"
#  pooling_param {
#    pool: MAX
#    kernel_size: 2
#    stride: 2
#  }
#}
#
#### conv2 ###
#layer {
#  name: "conv2"
#  type: "Convolution"
#  bottom: "pool1"
#  top: "conv2"
#  param {
#    name: "conv2_w"
#    lr_mult: 0
#    decay_mult: 1
#  }
#  param {
#    name: "conv2_b"
#    lr_mult: 0
#    decay_mult: 0
#  }
#  convolution_param {
#    num_output: 40
#    kernel_size: 3
#    weight_filler {
#      type: "gaussian"
#      std: 0.03
#    }
#    bias_filler {
#      type: "constant"
#      value: 0.1
#    }
#  }
#}
#layer {
#  name: "relu2"
#  type: "PReLU"
#  bottom: "conv2"
#  top: "conv2"
#  prelu_param {
#    filler {
#      type: "gaussian"
#      std: 0.03
#    }
#  }
#}
#layer {
#  name: "pool2"
#  type: "Pooling"
#  bottom: "conv2"
#  top: "pool2"
#  pooling_param {
#    pool: MAX
#    kernel_size: 2
#    stride: 2
#  }
#}
#
#### conv3 ###
#layer {
#  name: "conv3"
#  type: "Convolution"
#  bottom: "pool2"
#  top: "conv3"
#  param {
#    name: "conv3_w"
#    lr_mult: 0
#    decay_mult: 1
#  }
#  param {
#    name: "conv3_b"
#    lr_mult: 0
#    decay_mult: 0
#  }
#  convolution_param {
#    num_output: 60
#    kernel_size: 3
#    weight_filler {
#      type: "gaussian"
#      std: 0.03
#    }
#    bias_filler {
#      type: "constant"
#      value: 0.1
#    }
#  }
#}
#layer {
#  name: "relu3"
#  type: "PReLU"
#  bottom: "conv3"
#  top: "conv3"
#  prelu_param {
#    filler {
#      type: "gaussian"
#      std: 0.03
#    }
#  }
#}
#layer {
#  name: "pool3"
#  type: "Pooling"
#  bottom: "conv3"
#  top: "pool3"
#  pooling_param {
#    pool: MAX
#    kernel_size: 2
#    stride: 2
#  }
#}
#
#### conv4 ###
#layer {
#  name: "conv4"
#  type: "Convolution"
#  bottom: "pool3"
#  top: "conv4"
#  param {
#    name: "conv4_w"
#    lr_mult: 0
#    decay_mult: 1
#  }
#  param {
#    name: "conv4_b"
#    lr_mult: 0
#    decay_mult: 0
#  }
#  convolution_param {
#    num_output: 80
#    kernel_size: 2
#    weight_filler {
#      type: "gaussian"
#      std: 0.03
#    }
#    bias_filler {
#      type: "constant"
#      value: 0.1
#    }
#  }
#}
#layer {
#  name: "relu4"
#  type: "PReLU"
#  bottom: "conv4"
#  top: "conv4"
#  prelu_param {
#    filler {
#      type: "gaussian"
#      std: 0.03
#    }
#  }
#}
#
#
### concat pool3 and conv4
#layer {
#  name: "flatten_pool3"
#  type: "Flatten"
#  bottom: "pool3"
#  top: "flatten_pool3"
#}
#layer {
#  name: "flatten_conv4"
#  type: "Flatten"
#  bottom: "conv4"
#  top: "flatten_conv4"
#}
#layer {
#  name: "concat_pool3_conv4"
#  type: "Concat"
#  bottom: "flatten_pool3"
#  bottom: "flatten_conv4"
#  top: "concat_pool3_conv4"
#}
#
#layer {
#  name: "fc1"
#  type: "InnerProduct"
#  bottom: "concat_pool3_conv4"
#  top: "fc1"
#  param {
#    name: "fc1_w"
#    lr_mult: 0
#    decay_mult: 1
#  }
#  param {
#    name: "fc1_b"
#    lr_mult: 0
#    decay_mult: 0
#  }
#  inner_product_param {
#    num_output: 160
#    weight_filler {
#      type: "gaussian"
#      std: 0.01
#    }
#    bias_filler {
#      type: "constant"
#      value: 0
#    }
#  }
#}
#layer {
#  name: "l2"
#  type: "L2Norm"
#  bottom: "fc1"
#  top: "l2"
#
#}
#
#
## add L2 loss as min||l2_i - l2||
#layer {
#  name: "Siamese_loss"
#  type: "ContrastiveLoss"
#  bottom: "img_fea"
#  bottom: "l2"
#  bottom: "same"
#  top: "Siamese_loss"
#  contrastive_loss_param {
#    margin: 1.0
#  }
#  loss_weight: 1
#}
